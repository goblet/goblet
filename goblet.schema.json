{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "type": "object",
  "properties": {
    "function_name": {
      "type": "string"
    },
    "custom_files": {
      "type": "object",
      "properties": {
        "include": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "exclude": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "deploy": {
      "type": "object",
      "properties": {
        "environmentVariables": {
          "type": "object",
          "patternProperties": {
            "^.+$": {
              "type": "string"
            }
          }
        },
        "artifact_tag": {
          "type": "string"
        },
        "artifact_registry": {
          "type": "string"
        }
      }
    },
    "cloudrun_revision": {
      "$ref": "#/definitions/run:v2:GoogleCloudRunV2Revision"
    },
    "cloudrun_container": {
      "$ref": "#/definitions/run:v2:GoogleCloudRunV2Container"
    },
    "cloudrun_container_extra": {
      "$ref": "#/definitions/run:v2:GoogleCloudRunV2Container"
    },
    "cloudfunction": {
      "$ref": "#/definitions/cloudfunctions:v1:CloudFunction"
    },
    "cloudfunction_v2": {
      "$ref": "#/definitions/cloudfunctions:v2:Function"
    },
    "cloudbuild": {
      "$ref": "#/definitions/cloudbuild:v1:Build"
    },
    "apiConfig": {
      "$ref": "#/definitions/apigateway:v1:ApigatewayApiConfig"
    },
    "bindings": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/cloudfunctions:v1:Binding"
      }
    },
    "redis": {
      "$ref": "#/definitions/redis:v1:Instance"
    },
    "vpcconnector": {
      "$ref": "#/definitions/vpcaccess:v1:Connector"
    },
    "job_spec": {
      "$ref": "#/definitions/run:v2:GoogleCloudRunV2TaskTemplate"
    },
    "job_container": {
      "$ref": "#/definitions/run:v2:GoogleCloudRunV2Container"
    },
    "stages": {
      "type": "object",
      "patternProperties": {
        "^.+$": {
          "type": "object",
          "properties": {
            "function_name": {
              "type": "string"
            },
            "custom_files": {
              "type": "object",
              "properties": {
                "include": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                "exclude": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            },
            "deploy": {
              "type": "object",
              "properties": {
                "environmentVariables": {
                  "type": "object",
                  "patternProperties": {
                    "^.+$": {
                      "type": "string"
                    }
                  }
                },
                "artifact_tag": {
                  "type": "string"
                },
                "artifact_registry": {
                  "type": "string"
                }
              }
            },
            "cloudrun_revision": {
              "$ref": "#/definitions/run:v2:GoogleCloudRunV2Revision"
            },
            "cloudrun_container": {
              "$ref": "#/definitions/run:v2:GoogleCloudRunV2Container"
            },
            "cloudrun_container_extra": {
              "$ref": "#/definitions/run:v2:GoogleCloudRunV2Container"
            },
            "cloudfunction": {
              "$ref": "#/definitions/cloudfunctions:v1:CloudFunction"
            },
            "cloudfunction_v2": {
              "$ref": "#/definitions/cloudfunctions:v2:Function"
            },
            "cloudbuild": {
              "$ref": "#/definitions/cloudbuild:v1:Build"
            },
            "apiConfig": {
              "$ref": "#/definitions/apigateway:v1:ApigatewayApiConfig"
            },
            "bindings": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/cloudfunctions:v1:Binding"
              }
            },
            "redis": {
              "$ref": "#/definitions/redis:v1:Instance"
            },
            "vpcconnector": {
              "$ref": "#/definitions/vpcaccess:v1:Connector"
            },
            "job_spec": {
              "$ref": "#/definitions/run:v2:GoogleCloudRunV2TaskTemplate"
            },
            "job_container": {
              "$ref": "#/definitions/run:v2:GoogleCloudRunV2Container"
            }
          },
          "additionalProperties": false
        }
      }
    }
  },
  "additionalProperties": false,
  "definitions": {
    "cloudfunctions:v1:ListOperationsResponse": {
      "description": "The response message for Operations.ListOperations.",
      "type": "object",
      "properties": {
        "operations": {
          "description": "A list of operations that matches the specified filter in the request.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/cloudfunctions:v1:Operation"
          }
        },
        "nextPageToken": {
          "description": "The standard List next-page token.",
          "type": "string"
        }
      },
      "$id": "#/definitions/cloudfunctions:v1:ListOperationsResponse"
    },
    "cloudfunctions:v1:Operation": {
      "description": "This resource represents a long-running operation that is the result of a network API call.",
      "type": "object",
      "properties": {
        "name": {
          "description": "The server-assigned name, which is only unique within the same service that originally returns it. If you use the default HTTP mapping, the `name` should be a resource name ending with `operations/{unique_id}`.",
          "type": "string"
        },
        "metadata": {
          "description": "Service-specific metadata associated with the operation. It typically contains progress information and common metadata such as create time. Some services might not provide such metadata. Any method that returns a long-running operation should document the metadata type, if any.",
          "type": "object",
          "additionalProperties": {
            "type": "object",
            "description": "Properties of the object. Contains field @type with type URL."
          }
        },
        "done": {
          "description": "If the value is `false`, it means the operation is still in progress. If `true`, the operation is completed, and either `error` or `response` is available.",
          "type": "boolean"
        },
        "error": {
          "description": "The error result of the operation in case of failure or cancellation.",
          "$ref": "#/definitions/cloudfunctions:v1:Status"
        },
        "response": {
          "description": "The normal, successful response of the operation. If the original method returns no data on success, such as `Delete`, the response is `google.protobuf.Empty`. If the original method is standard `Get`/`Create`/`Update`, the response should be the resource. For other methods, the response should have the type `XxxResponse`, where `Xxx` is the original method name. For example, if the original method name is `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`.",
          "type": "object",
          "additionalProperties": {
            "type": "object",
            "description": "Properties of the object. Contains field @type with type URL."
          }
        }
      },
      "$id": "#/definitions/cloudfunctions:v1:Operation"
    },
    "cloudfunctions:v1:Status": {
      "description": "The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).",
      "type": "object",
      "properties": {
        "code": {
          "description": "The status code, which should be an enum value of google.rpc.Code.",
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "description": "A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client.",
          "type": "string"
        },
        "details": {
          "description": "A list of messages that carry the error details. There is a common set of message types for APIs to use.",
          "type": "array",
          "items": {
            "type": "object",
            "additionalProperties": {
              "type": "object",
              "description": "Properties of the object. Contains field @type with type URL."
            }
          }
        }
      },
      "$id": "#/definitions/cloudfunctions:v1:Status"
    },
    "cloudfunctions:v1:ListFunctionsResponse": {
      "description": "Response for the `ListFunctions` method.",
      "type": "object",
      "properties": {
        "functions": {
          "description": "The functions that match the request.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/cloudfunctions:v1:CloudFunction"
          }
        },
        "nextPageToken": {
          "description": "If not empty, indicates that there may be more functions that match the request; this value should be passed in a new google.cloud.functions.v1.ListFunctionsRequest to get more functions.",
          "type": "string"
        },
        "unreachable": {
          "description": "Locations that could not be reached. The response does not include any functions from these locations.",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "$id": "#/definitions/cloudfunctions:v1:ListFunctionsResponse"
    },
    "cloudfunctions:v1:CloudFunction": {
      "description": "Describes a Cloud Function that contains user computation executed in response to an event. It encapsulate function and triggers configurations.",
      "type": "object",
      "properties": {
        "name": {
          "description": "A user-defined name of the function. Function names must be unique globally and match pattern `projects/*/locations/*/functions/*`",
          "type": "string"
        },
        "description": {
          "description": "User-provided description of a function.",
          "type": "string"
        },
        "sourceArchiveUrl": {
          "description": "The Google Cloud Storage URL, starting with `gs://`, pointing to the zip archive which contains the function.",
          "type": "string"
        },
        "sourceRepository": {
          "description": "**Beta Feature** The source repository where a function is hosted.",
          "$ref": "#/definitions/cloudfunctions:v1:SourceRepository"
        },
        "sourceUploadUrl": {
          "description": "The Google Cloud Storage signed URL used for source uploading, generated by calling [google.cloud.functions.v1.GenerateUploadUrl]. The signature is validated on write methods (Create, Update) The signature is stripped from the Function object on read methods (Get, List)",
          "type": "string"
        },
        "httpsTrigger": {
          "description": "An HTTPS endpoint type of source that can be triggered via URL.",
          "$ref": "#/definitions/cloudfunctions:v1:HttpsTrigger"
        },
        "eventTrigger": {
          "description": "A source that fires events in response to a condition in another service.",
          "$ref": "#/definitions/cloudfunctions:v1:EventTrigger"
        },
        "status": {
          "description": "Output only. Status of the function deployment.",
          "readOnly": true,
          "type": "string",
          "enum": [
            "CLOUD_FUNCTION_STATUS_UNSPECIFIED",
            "ACTIVE",
            "OFFLINE",
            "DEPLOY_IN_PROGRESS",
            "DELETE_IN_PROGRESS",
            "UNKNOWN"
          ]
        },
        "entryPoint": {
          "description": "The name of the function (as defined in source code) that will be executed. Defaults to the resource name suffix (ID of the function), if not specified.",
          "type": "string"
        },
        "runtime": {
          "description": "The runtime in which to run the function. Required when deploying a new function, optional when updating an existing function. For a complete list of possible choices, see the [`gcloud` command reference](https://cloud.google.com/sdk/gcloud/reference/functions/deploy#--runtime).",
          "type": "string"
        },
        "timeout": {
          "description": "The function execution timeout. Execution is considered failed and can be terminated if the function is not completed at the end of the timeout period. Defaults to 60 seconds.",
          "type": "string",
          "format": "duration"
        },
        "availableMemoryMb": {
          "description": "The amount of memory in MB available for a function. Defaults to 256MB.",
          "type": "integer",
          "format": "int32"
        },
        "serviceAccountEmail": {
          "description": "The email of the function's service account. If empty, defaults to `{project_id}@appspot.gserviceaccount.com`.",
          "type": "string"
        },
        "updateTime": {
          "description": "Output only. The last update timestamp of a Cloud Function.",
          "readOnly": true,
          "type": "string",
          "format": "date-time"
        },
        "versionId": {
          "description": "Output only. The version identifier of the Cloud Function. Each deployment attempt results in a new version of a function being created.",
          "readOnly": true,
          "type": "string",
          "format": "int64"
        },
        "labels": {
          "description": "Labels associated with this Cloud Function.",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "environmentVariables": {
          "description": "Environment variables that shall be available during function execution.",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "buildEnvironmentVariables": {
          "description": "Build environment variables that shall be available during build time.",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "network": {
          "description": "The VPC Network that this cloud function can connect to. It can be either the fully-qualified URI, or the short name of the network resource. If the short network name is used, the network must belong to the same project. Otherwise, it must belong to a project within the same organization. The format of this field is either `projects/{project}/global/networks/{network}` or `{network}`, where `{project}` is a project id where the network is defined, and `{network}` is the short name of the network. This field is mutually exclusive with `vpc_connector` and will be replaced by it. See [the VPC documentation](https://cloud.google.com/compute/docs/vpc) for more information on connecting Cloud projects.",
          "type": "string"
        },
        "maxInstances": {
          "description": "The limit on the maximum number of function instances that may coexist at a given time. In some cases, such as rapid traffic surges, Cloud Functions may, for a short period of time, create more instances than the specified max instances limit. If your function cannot tolerate this temporary behavior, you may want to factor in a safety margin and set a lower max instances value than your function can tolerate. See the [Max Instances](https://cloud.google.com/functions/docs/max-instances) Guide for more details.",
          "type": "integer",
          "format": "int32"
        },
        "minInstances": {
          "description": "A lower bound for the number function instances that may coexist at a given time.",
          "type": "integer",
          "format": "int32"
        },
        "vpcConnector": {
          "description": "The VPC Network Connector that this cloud function can connect to. It can be either the fully-qualified URI, or the short name of the network connector resource. The format of this field is `projects/*/locations/*/connectors/*` This field is mutually exclusive with `network` field and will eventually replace it. See [the VPC documentation](https://cloud.google.com/compute/docs/vpc) for more information on connecting Cloud projects.",
          "type": "string"
        },
        "vpcConnectorEgressSettings": {
          "description": "The egress settings for the connector, controlling what traffic is diverted through it.",
          "type": "string",
          "enum": [
            "VPC_CONNECTOR_EGRESS_SETTINGS_UNSPECIFIED",
            "PRIVATE_RANGES_ONLY",
            "ALL_TRAFFIC"
          ]
        },
        "ingressSettings": {
          "description": "The ingress settings for the function, controlling what traffic can reach it.",
          "type": "string",
          "enum": [
            "INGRESS_SETTINGS_UNSPECIFIED",
            "ALLOW_ALL",
            "ALLOW_INTERNAL_ONLY",
            "ALLOW_INTERNAL_AND_GCLB"
          ]
        },
        "kmsKeyName": {
          "description": "Resource name of a KMS crypto key (managed by the user) used to encrypt/decrypt function resources. It must match the pattern `projects/{project}/locations/{location}/keyRings/{key_ring}/cryptoKeys/{crypto_key}`. If specified, you must also provide an artifact registry repository using the `docker_repository` field that was created with the same KMS crypto key. The following service accounts need to be granted the role 'Cloud KMS CryptoKey Encrypter/Decrypter (roles/cloudkms.cryptoKeyEncrypterDecrypter)' on the Key/KeyRing/Project/Organization (least access preferred). 1. Google Cloud Functions service account (service-{project_number}@gcf-admin-robot.iam.gserviceaccount.com) - Required to protect the function's image. 2. Google Storage service account (service-{project_number}@gs-project-accounts.iam.gserviceaccount.com) - Required to protect the function's source code. If this service account does not exist, deploying a function without a KMS key or retrieving the service agent name provisions it. For more information, see https://cloud.google.com/storage/docs/projects#service-agents and https://cloud.google.com/storage/docs/getting-service-agent#gsutil. Google Cloud Functions delegates access to service agents to protect function resources in internal projects that are not accessible by the end user.",
          "type": "string"
        },
        "buildWorkerPool": {
          "description": "Name of the Cloud Build Custom Worker Pool that should be used to build the function. The format of this field is `projects/{project}/locations/{region}/workerPools/{workerPool}` where `{project}` and `{region}` are the project id and region respectively where the worker pool is defined and `{workerPool}` is the short name of the worker pool. If the project id is not the same as the function, then the Cloud Functions Service Agent (`service-@gcf-admin-robot.iam.gserviceaccount.com`) must be granted the role Cloud Build Custom Workers Builder (`roles/cloudbuild.customworkers.builder`) in the project.",
          "type": "string"
        },
        "buildId": {
          "description": "Output only. The Cloud Build ID of the latest successful deployment of the function.",
          "readOnly": true,
          "type": "string"
        },
        "buildName": {
          "description": "Output only. The Cloud Build Name of the function deployment. `projects//locations//builds/`.",
          "readOnly": true,
          "type": "string"
        },
        "secretEnvironmentVariables": {
          "description": "Secret environment variables configuration.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/cloudfunctions:v1:SecretEnvVar"
          }
        },
        "secretVolumes": {
          "description": "Secret volumes configuration.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/cloudfunctions:v1:SecretVolume"
          }
        },
        "sourceToken": {
          "description": "Input only. An identifier for Firebase function sources. Disclaimer: This field is only supported for Firebase function deployments.",
          "type": "string"
        },
        "dockerRepository": {
          "description": "User managed repository created in Artifact Registry optionally with a customer managed encryption key. If specified, deployments will use Artifact Registry. If unspecified and the deployment is eligible to use Artifact Registry, GCF will create and use a repository named 'gcf-artifacts' for every deployed region. This is the repository to which the function docker image will be pushed after it is built by Cloud Build. It must match the pattern `projects/{project}/locations/{location}/repositories/{repository}`. Cross-project repositories are not supported. Cross-location repositories are not supported. Repository format must be 'DOCKER'.",
          "type": "string"
        },
        "dockerRegistry": {
          "description": "Docker Registry to use for this deployment. If `docker_repository` field is specified, this field will be automatically set as `ARTIFACT_REGISTRY`. If unspecified, it currently defaults to `CONTAINER_REGISTRY`. This field may be overridden by the backend for eligible deployments.",
          "type": "string",
          "enum": [
            "DOCKER_REGISTRY_UNSPECIFIED",
            "CONTAINER_REGISTRY",
            "ARTIFACT_REGISTRY"
          ]
        }
      },
      "$id": "#/definitions/cloudfunctions:v1:CloudFunction"
    },
    "cloudfunctions:v1:SourceRepository": {
      "description": "Describes SourceRepository, used to represent parameters related to source repository where a function is hosted.",
      "type": "object",
      "properties": {
        "url": {
          "description": "The URL pointing to the hosted repository where the function is defined. There are supported Cloud Source Repository URLs in the following formats: To refer to a specific commit: `https://source.developers.google.com/projects/*/repos/*/revisions/*/paths/*` To refer to a moveable alias (branch): `https://source.developers.google.com/projects/*/repos/*/moveable-aliases/*/paths/*` In particular, to refer to HEAD use `master` moveable alias. To refer to a specific fixed alias (tag): `https://source.developers.google.com/projects/*/repos/*/fixed-aliases/*/paths/*` You may omit `paths/*` if you want to use the main directory.",
          "type": "string"
        },
        "deployedUrl": {
          "description": "Output only. The URL pointing to the hosted repository where the function were defined at the time of deployment. It always points to a specific commit in the format described above.",
          "readOnly": true,
          "type": "string"
        }
      },
      "$id": "#/definitions/cloudfunctions:v1:SourceRepository"
    },
    "cloudfunctions:v1:HttpsTrigger": {
      "description": "Describes HttpsTrigger, could be used to connect web hooks to function.",
      "type": "object",
      "properties": {
        "url": {
          "description": "Output only. The deployed url for the function.",
          "readOnly": true,
          "type": "string"
        },
        "securityLevel": {
          "description": "The security level for the function.",
          "type": "string",
          "enum": [
            "SECURITY_LEVEL_UNSPECIFIED",
            "SECURE_ALWAYS",
            "SECURE_OPTIONAL"
          ]
        }
      },
      "$id": "#/definitions/cloudfunctions:v1:HttpsTrigger"
    },
    "cloudfunctions:v1:EventTrigger": {
      "description": "Describes EventTrigger, used to request events be sent from another service.",
      "type": "object",
      "properties": {
        "eventType": {
          "description": "Required. The type of event to observe. For example: `providers/cloud.storage/eventTypes/object.change` and `providers/cloud.pubsub/eventTypes/topic.publish`. Event types match pattern `providers/*/eventTypes/*.*`. The pattern contains: 1. namespace: For example, `cloud.storage` and `google.firebase.analytics`. 2. resource type: The type of resource on which event occurs. For example, the Google Cloud Storage API includes the type `object`. 3. action: The action that generates the event. For example, action for a Google Cloud Storage Object is 'change'. These parts are lower case.",
          "type": "string"
        },
        "resource": {
          "description": "Required. The resource(s) from which to observe events, for example, `projects/_/buckets/myBucket`. Not all syntactically correct values are accepted by all services. For example: 1. The authorization model must support it. Google Cloud Functions only allows EventTriggers to be deployed that observe resources in the same project as the `CloudFunction`. 2. The resource type must match the pattern expected for an `event_type`. For example, an `EventTrigger` that has an `event_type` of \"google.pubsub.topic.publish\" should have a resource that matches Google Cloud Pub/Sub topics. Additionally, some services may support short names when creating an `EventTrigger`. These will always be returned in the normalized \"long\" format. See each *service's* documentation for supported formats.",
          "type": "string"
        },
        "service": {
          "description": "The hostname of the service that should be observed. If no string is provided, the default service implementing the API will be used. For example, `storage.googleapis.com` is the default for all event types in the `google.storage` namespace.",
          "type": "string"
        },
        "failurePolicy": {
          "description": "Specifies policy for failed executions.",
          "$ref": "#/definitions/cloudfunctions:v1:FailurePolicy"
        }
      },
      "$id": "#/definitions/cloudfunctions:v1:EventTrigger"
    },
    "cloudfunctions:v1:FailurePolicy": {
      "description": "Describes the policy in case of function's execution failure. If empty, then defaults to ignoring failures (i.e. not retrying them).",
      "type": "object",
      "properties": {
        "retry": {
          "description": "If specified, then the function will be retried in case of a failure.",
          "$ref": "#/definitions/cloudfunctions:v1:Retry"
        }
      },
      "$id": "#/definitions/cloudfunctions:v1:FailurePolicy"
    },
    "cloudfunctions:v1:Retry": {
      "description": "Describes the retry policy in case of function's execution failure. A function execution will be retried on any failure. A failed execution will be retried up to 7 days with an exponential backoff (capped at 10 seconds). Retried execution is charged as any other execution.",
      "type": "object",
      "properties": {},
      "$id": "#/definitions/cloudfunctions:v1:Retry"
    },
    "cloudfunctions:v1:SecretEnvVar": {
      "description": "Configuration for a secret environment variable. It has the information necessary to fetch the secret value from secret manager and expose it as an environment variable.",
      "type": "object",
      "properties": {
        "key": {
          "description": "Name of the environment variable.",
          "type": "string"
        },
        "projectId": {
          "description": "Project identifier (preferrably project number but can also be the project ID) of the project that contains the secret. If not set, it will be populated with the function's project assuming that the secret exists in the same project as of the function.",
          "type": "string"
        },
        "secret": {
          "description": "Name of the secret in secret manager (not the full resource name).",
          "type": "string"
        },
        "version": {
          "description": "Version of the secret (version number or the string 'latest'). It is recommended to use a numeric version for secret environment variables as any updates to the secret value is not reflected until new instances start.",
          "type": "string"
        }
      },
      "$id": "#/definitions/cloudfunctions:v1:SecretEnvVar"
    },
    "cloudfunctions:v1:SecretVolume": {
      "description": "Configuration for a secret volume. It has the information necessary to fetch the secret value from secret manager and make it available as files mounted at the requested paths within the application container. Secret value is not a part of the configuration. Every filesystem read operation performs a lookup in secret manager to retrieve the secret value.",
      "type": "object",
      "properties": {
        "mountPath": {
          "description": "The path within the container to mount the secret volume. For example, setting the mount_path as `/etc/secrets` would mount the secret value files under the `/etc/secrets` directory. This directory will also be completely shadowed and unavailable to mount any other secrets. Recommended mount paths: /etc/secrets Restricted mount paths: /cloudsql, /dev/log, /pod, /proc, /var/log",
          "type": "string"
        },
        "projectId": {
          "description": "Project identifier (preferrably project number but can also be the project ID) of the project that contains the secret. If not set, it will be populated with the function's project assuming that the secret exists in the same project as of the function.",
          "type": "string"
        },
        "secret": {
          "description": "Name of the secret in secret manager (not the full resource name).",
          "type": "string"
        },
        "versions": {
          "description": "List of secret versions to mount for this secret. If empty, the `latest` version of the secret will be made available in a file named after the secret under the mount point.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/cloudfunctions:v1:SecretVersion"
          }
        }
      },
      "$id": "#/definitions/cloudfunctions:v1:SecretVolume"
    },
    "cloudfunctions:v1:SecretVersion": {
      "description": "Configuration for a single version.",
      "type": "object",
      "properties": {
        "version": {
          "description": "Version of the secret (version number or the string 'latest'). It is preferable to use `latest` version with secret volumes as secret value changes are reflected immediately.",
          "type": "string"
        },
        "path": {
          "description": "Relative path of the file under the mount path where the secret value for this version will be fetched and made available. For example, setting the mount_path as '/etc/secrets' and path as `/secret_foo` would mount the secret value file at `/etc/secrets/secret_foo`.",
          "type": "string"
        }
      },
      "$id": "#/definitions/cloudfunctions:v1:SecretVersion"
    },
    "cloudfunctions:v1:CallFunctionRequest": {
      "description": "Request for the `CallFunction` method.",
      "type": "object",
      "properties": {
        "data": {
          "description": "Required. Input to be passed to the function.",
          "type": "string"
        }
      },
      "$id": "#/definitions/cloudfunctions:v1:CallFunctionRequest"
    },
    "cloudfunctions:v1:CallFunctionResponse": {
      "description": "Response of `CallFunction` method.",
      "type": "object",
      "properties": {
        "executionId": {
          "description": "Execution id of function invocation.",
          "type": "string"
        },
        "result": {
          "description": "Result populated for successful execution of synchronous function. Will not be populated if function does not return a result through context.",
          "type": "string"
        },
        "error": {
          "description": "Either system or user-function generated error. Set if execution was not successful.",
          "type": "string"
        }
      },
      "$id": "#/definitions/cloudfunctions:v1:CallFunctionResponse"
    },
    "cloudfunctions:v1:GenerateUploadUrlRequest": {
      "description": "Request of `GenerateSourceUploadUrl` method.",
      "type": "object",
      "properties": {
        "kmsKeyName": {
          "description": "Resource name of a KMS crypto key (managed by the user) used to encrypt/decrypt function source code objects in staging Cloud Storage buckets. When you generate an upload url and upload your source code, it gets copied to a staging Cloud Storage bucket in an internal regional project. The source code is then copied to a versioned directory in the sources bucket in the consumer project during the function deployment. It must match the pattern `projects/{project}/locations/{location}/keyRings/{key_ring}/cryptoKeys/{crypto_key}`. The Google Cloud Functions service account (service-{project_number}@gcf-admin-robot.iam.gserviceaccount.com) must be granted the role 'Cloud KMS CryptoKey Encrypter/Decrypter (roles/cloudkms.cryptoKeyEncrypterDecrypter)' on the Key/KeyRing/Project/Organization (least access preferred). GCF will delegate access to the Google Storage service account in the internal project.",
          "type": "string"
        }
      },
      "$id": "#/definitions/cloudfunctions:v1:GenerateUploadUrlRequest"
    },
    "cloudfunctions:v1:GenerateUploadUrlResponse": {
      "description": "Response of `GenerateSourceUploadUrl` method.",
      "type": "object",
      "properties": {
        "uploadUrl": {
          "description": "The generated Google Cloud Storage signed URL that should be used for a function source code upload. The uploaded file should be a zip archive which contains a function.",
          "type": "string"
        }
      },
      "$id": "#/definitions/cloudfunctions:v1:GenerateUploadUrlResponse"
    },
    "cloudfunctions:v1:GenerateDownloadUrlRequest": {
      "description": "Request of `GenerateDownloadUrl` method.",
      "type": "object",
      "properties": {
        "versionId": {
          "description": "The optional version of function. If not set, default, current version is used.",
          "type": "string",
          "format": "uint64"
        }
      },
      "$id": "#/definitions/cloudfunctions:v1:GenerateDownloadUrlRequest"
    },
    "cloudfunctions:v1:GenerateDownloadUrlResponse": {
      "description": "Response of `GenerateDownloadUrl` method.",
      "type": "object",
      "properties": {
        "downloadUrl": {
          "description": "The generated Google Cloud Storage signed URL that should be used for function source code download.",
          "type": "string"
        }
      },
      "$id": "#/definitions/cloudfunctions:v1:GenerateDownloadUrlResponse"
    },
    "cloudfunctions:v1:SetIamPolicyRequest": {
      "description": "Request message for `SetIamPolicy` method.",
      "type": "object",
      "properties": {
        "policy": {
          "description": "REQUIRED: The complete policy to be applied to the `resource`. The size of the policy is limited to a few 10s of KB. An empty policy is a valid policy but certain Google Cloud services (such as Projects) might reject them.",
          "$ref": "#/definitions/cloudfunctions:v1:Policy"
        },
        "updateMask": {
          "description": "OPTIONAL: A FieldMask specifying which fields of the policy to modify. Only the fields in the mask will be modified. If no mask is provided, the following default mask is used: `paths: \"bindings, etag\"`",
          "type": "string",
          "format": "google-fieldmask"
        }
      },
      "$id": "#/definitions/cloudfunctions:v1:SetIamPolicyRequest"
    },
    "cloudfunctions:v1:Policy": {
      "description": "An Identity and Access Management (IAM) policy, which specifies access controls for Google Cloud resources. A `Policy` is a collection of `bindings`. A `binding` binds one or more `members`, or principals, to a single `role`. Principals can be user accounts, service accounts, Google groups, and domains (such as G Suite). A `role` is a named list of permissions; each `role` can be an IAM predefined role or a user-created custom role. For some types of Google Cloud resources, a `binding` can also specify a `condition`, which is a logical expression that allows access to a resource only if the expression evaluates to `true`. A condition can add constraints based on attributes of the request, the resource, or both. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies). **JSON example:** ``` { \"bindings\": [ { \"role\": \"roles/resourcemanager.organizationAdmin\", \"members\": [ \"user:mike@example.com\", \"group:admins@example.com\", \"domain:google.com\", \"serviceAccount:my-project-id@appspot.gserviceaccount.com\" ] }, { \"role\": \"roles/resourcemanager.organizationViewer\", \"members\": [ \"user:eve@example.com\" ], \"condition\": { \"title\": \"expirable access\", \"description\": \"Does not grant access after Sep 2020\", \"expression\": \"request.time < timestamp('2020-10-01T00:00:00.000Z')\", } } ], \"etag\": \"BwWWja0YfJA=\", \"version\": 3 } ``` **YAML example:** ``` bindings: - members: - user:mike@example.com - group:admins@example.com - domain:google.com - serviceAccount:my-project-id@appspot.gserviceaccount.com role: roles/resourcemanager.organizationAdmin - members: - user:eve@example.com role: roles/resourcemanager.organizationViewer condition: title: expirable access description: Does not grant access after Sep 2020 expression: request.time < timestamp('2020-10-01T00:00:00.000Z') etag: BwWWja0YfJA= version: 3 ``` For a description of IAM and its features, see the [IAM documentation](https://cloud.google.com/iam/docs/).",
      "type": "object",
      "properties": {
        "version": {
          "description": "Specifies the format of the policy. Valid values are `0`, `1`, and `3`. Requests that specify an invalid value are rejected. Any operation that affects conditional role bindings must specify version `3`. This requirement applies to the following operations: * Getting a policy that includes a conditional role binding * Adding a conditional role binding to a policy * Changing a conditional role binding in a policy * Removing any role binding, with or without a condition, from a policy that includes conditions **Important:** If you use IAM Conditions, you must include the `etag` field whenever you call `setIamPolicy`. If you omit this field, then IAM allows you to overwrite a version `3` policy with a version `1` policy, and all of the conditions in the version `3` policy are lost. If a policy does not include any conditions, operations on that policy may specify any valid version or leave the field unset. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).",
          "type": "integer",
          "format": "int32"
        },
        "bindings": {
          "description": "Associates a list of `members`, or principals, with a `role`. Optionally, may specify a `condition` that determines how and when the `bindings` are applied. Each of the `bindings` must contain at least one principal. The `bindings` in a `Policy` can refer to up to 1,500 principals; up to 250 of these principals can be Google groups. Each occurrence of a principal counts towards these limits. For example, if the `bindings` grant 50 different roles to `user:alice@example.com`, and not to any other principal, then you can add another 1,450 principals to the `bindings` in the `Policy`.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/cloudfunctions:v1:Binding"
          }
        },
        "auditConfigs": {
          "description": "Specifies cloud audit logging configuration for this policy.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/cloudfunctions:v1:AuditConfig"
          }
        },
        "etag": {
          "description": "`etag` is used for optimistic concurrency control as a way to help prevent simultaneous updates of a policy from overwriting each other. It is strongly suggested that systems make use of the `etag` in the read-modify-write cycle to perform policy updates in order to avoid race conditions: An `etag` is returned in the response to `getIamPolicy`, and systems are expected to put that etag in the request to `setIamPolicy` to ensure that their change will be applied to the same version of the policy. **Important:** If you use IAM Conditions, you must include the `etag` field whenever you call `setIamPolicy`. If you omit this field, then IAM allows you to overwrite a version `3` policy with a version `1` policy, and all of the conditions in the version `3` policy are lost.",
          "type": "string",
          "format": "byte"
        }
      },
      "$id": "#/definitions/cloudfunctions:v1:Policy"
    },
    "cloudfunctions:v1:Binding": {
      "description": "Associates `members`, or principals, with a `role`.",
      "type": "object",
      "properties": {
        "role": {
          "description": "Role that is assigned to the list of `members`, or principals. For example, `roles/viewer`, `roles/editor`, or `roles/owner`.",
          "type": "string"
        },
        "members": {
          "description": "Specifies the principals requesting access for a Google Cloud resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. Does not include identities that come from external identity providers (IdPs) through identity federation. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a Google service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `serviceAccount:{projectid}.svc.id.goog[{namespace}/{kubernetes-sa}]`: An identifier for a [Kubernetes service account](https://cloud.google.com/kubernetes-engine/docs/how-to/kubernetes-service-accounts). For example, `my-project.svc.id.goog[my-namespace/my-kubernetes-sa]`. * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "condition": {
          "description": "The condition that is associated with this binding. If the condition evaluates to `true`, then this binding applies to the current request. If the condition evaluates to `false`, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the principals in this binding. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).",
          "$ref": "#/definitions/cloudfunctions:v1:Expr"
        }
      },
      "$id": "#/definitions/cloudfunctions:v1:Binding"
    },
    "cloudfunctions:v1:Expr": {
      "description": "Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: \"Summary size limit\" description: \"Determines if a summary is less than 100 chars\" expression: \"document.summary.size() < 100\" Example (Equality): title: \"Requestor is owner\" description: \"Determines if requestor is the document owner\" expression: \"document.owner == request.auth.claims.email\" Example (Logic): title: \"Public documents\" description: \"Determine whether the document should be publicly visible\" expression: \"document.type != 'private' && document.type != 'internal'\" Example (Data Manipulation): title: \"Notification string\" description: \"Create a notification string with a timestamp.\" expression: \"'New message received at ' + string(document.create_time)\" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information.",
      "type": "object",
      "properties": {
        "expression": {
          "description": "Textual representation of an expression in Common Expression Language syntax.",
          "type": "string"
        },
        "title": {
          "description": "Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.",
          "type": "string"
        },
        "description": {
          "description": "Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.",
          "type": "string"
        },
        "location": {
          "description": "Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.",
          "type": "string"
        }
      },
      "$id": "#/definitions/cloudfunctions:v1:Expr"
    },
    "cloudfunctions:v1:AuditConfig": {
      "description": "Specifies the audit configuration for a service. The configuration determines which permission types are logged, and what identities, if any, are exempted from logging. An AuditConfig must have one or more AuditLogConfigs. If there are AuditConfigs for both `allServices` and a specific service, the union of the two AuditConfigs is used for that service: the log_types specified in each AuditConfig are enabled, and the exempted_members in each AuditLogConfig are exempted. Example Policy with multiple AuditConfigs: { \"audit_configs\": [ { \"service\": \"allServices\", \"audit_log_configs\": [ { \"log_type\": \"DATA_READ\", \"exempted_members\": [ \"user:jose@example.com\" ] }, { \"log_type\": \"DATA_WRITE\" }, { \"log_type\": \"ADMIN_READ\" } ] }, { \"service\": \"sampleservice.googleapis.com\", \"audit_log_configs\": [ { \"log_type\": \"DATA_READ\" }, { \"log_type\": \"DATA_WRITE\", \"exempted_members\": [ \"user:aliya@example.com\" ] } ] } ] } For sampleservice, this policy enables DATA_READ, DATA_WRITE and ADMIN_READ logging. It also exempts `jose@example.com` from DATA_READ logging, and `aliya@example.com` from DATA_WRITE logging.",
      "type": "object",
      "properties": {
        "service": {
          "description": "Specifies a service that will be enabled for audit logging. For example, `storage.googleapis.com`, `cloudsql.googleapis.com`. `allServices` is a special value that covers all services.",
          "type": "string"
        },
        "auditLogConfigs": {
          "description": "The configuration for logging of each type of permission.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/cloudfunctions:v1:AuditLogConfig"
          }
        }
      },
      "$id": "#/definitions/cloudfunctions:v1:AuditConfig"
    },
    "cloudfunctions:v1:AuditLogConfig": {
      "description": "Provides the configuration for logging a type of permissions. Example: { \"audit_log_configs\": [ { \"log_type\": \"DATA_READ\", \"exempted_members\": [ \"user:jose@example.com\" ] }, { \"log_type\": \"DATA_WRITE\" } ] } This enables 'DATA_READ' and 'DATA_WRITE' logging, while exempting jose@example.com from DATA_READ logging.",
      "type": "object",
      "properties": {
        "logType": {
          "description": "The log type that this config enables.",
          "type": "string",
          "enum": [
            "LOG_TYPE_UNSPECIFIED",
            "ADMIN_READ",
            "DATA_WRITE",
            "DATA_READ"
          ]
        },
        "exemptedMembers": {
          "description": "Specifies the identities that do not cause logging for this type of permission. Follows the same format of Binding.members.",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "$id": "#/definitions/cloudfunctions:v1:AuditLogConfig"
    },
    "cloudfunctions:v1:TestIamPermissionsRequest": {
      "description": "Request message for `TestIamPermissions` method.",
      "type": "object",
      "properties": {
        "permissions": {
          "description": "The set of permissions to check for the `resource`. Permissions with wildcards (such as `*` or `storage.*`) are not allowed. For more information see [IAM Overview](https://cloud.google.com/iam/docs/overview#permissions).",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "$id": "#/definitions/cloudfunctions:v1:TestIamPermissionsRequest"
    },
    "cloudfunctions:v1:TestIamPermissionsResponse": {
      "description": "Response message for `TestIamPermissions` method.",
      "type": "object",
      "properties": {
        "permissions": {
          "description": "A subset of `TestPermissionsRequest.permissions` that the caller is allowed.",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "$id": "#/definitions/cloudfunctions:v1:TestIamPermissionsResponse"
    },
    "cloudfunctions:v1:ListLocationsResponse": {
      "description": "The response message for Locations.ListLocations.",
      "type": "object",
      "properties": {
        "locations": {
          "description": "A list of locations that matches the specified filter in the request.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/cloudfunctions:v1:Location"
          }
        },
        "nextPageToken": {
          "description": "The standard List next-page token.",
          "type": "string"
        }
      },
      "$id": "#/definitions/cloudfunctions:v1:ListLocationsResponse"
    },
    "cloudfunctions:v1:Location": {
      "description": "A resource that represents a Google Cloud location.",
      "type": "object",
      "properties": {
        "name": {
          "description": "Resource name for the location, which may vary between implementations. For example: `\"projects/example-project/locations/us-east1\"`",
          "type": "string"
        },
        "locationId": {
          "description": "The canonical id for this location. For example: `\"us-east1\"`.",
          "type": "string"
        },
        "displayName": {
          "description": "The friendly name for this location, typically a nearby city name. For example, \"Tokyo\".",
          "type": "string"
        },
        "labels": {
          "description": "Cross-service attributes for the location. For example {\"cloud.googleapis.com/region\": \"us-east1\"}",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "metadata": {
          "description": "Service-specific metadata. For example the available capacity at the given location.",
          "type": "object",
          "additionalProperties": {
            "type": "object",
            "description": "Properties of the object. Contains field @type with type URL."
          }
        }
      },
      "$id": "#/definitions/cloudfunctions:v1:Location"
    },
    "cloudfunctions:v1:OperationMetadataV1": {
      "description": "Metadata describing an Operation",
      "type": "object",
      "properties": {
        "target": {
          "description": "Target of the operation - for example `projects/project-1/locations/region-1/functions/function-1`",
          "type": "string"
        },
        "type": {
          "description": "Type of operation.",
          "type": "string",
          "enum": [
            "OPERATION_UNSPECIFIED",
            "CREATE_FUNCTION",
            "UPDATE_FUNCTION",
            "DELETE_FUNCTION"
          ]
        },
        "request": {
          "description": "The original request that started the operation.",
          "type": "object",
          "additionalProperties": {
            "type": "object",
            "description": "Properties of the object. Contains field @type with type URL."
          }
        },
        "versionId": {
          "description": "Version id of the function created or updated by an API call. This field is only populated for Create and Update operations.",
          "type": "string",
          "format": "int64"
        },
        "updateTime": {
          "description": "The last update timestamp of the operation.",
          "type": "string",
          "format": "date-time"
        },
        "buildId": {
          "description": "The Cloud Build ID of the function created or updated by an API call. This field is only populated for Create and Update operations.",
          "type": "string"
        },
        "sourceToken": {
          "description": "An identifier for Firebase function sources. Disclaimer: This field is only supported for Firebase function deployments.",
          "type": "string"
        },
        "buildName": {
          "description": "The Cloud Build Name of the function deployment. This field is only populated for Create and Update operations. `projects//locations//builds/`.",
          "type": "string"
        }
      },
      "$id": "#/definitions/cloudfunctions:v1:OperationMetadataV1"
    },
    "cloudfunctions:v1:GoogleCloudFunctionsV2alphaOperationMetadata": {
      "description": "Represents the metadata of the long-running operation.",
      "type": "object",
      "properties": {
        "createTime": {
          "description": "The time the operation was created.",
          "type": "string",
          "format": "date-time"
        },
        "endTime": {
          "description": "The time the operation finished running.",
          "type": "string",
          "format": "date-time"
        },
        "target": {
          "description": "Server-defined resource path for the target of the operation.",
          "type": "string"
        },
        "verb": {
          "description": "Name of the verb executed by the operation.",
          "type": "string"
        },
        "statusDetail": {
          "description": "Human-readable status of the operation, if any.",
          "type": "string"
        },
        "cancelRequested": {
          "description": "Identifies whether the user has requested cancellation of the operation. Operations that have successfully been cancelled have google.longrunning.Operation.error value with a google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`.",
          "type": "boolean"
        },
        "apiVersion": {
          "description": "API version used to start the operation.",
          "type": "string"
        },
        "requestResource": {
          "description": "The original request that started the operation.",
          "type": "object",
          "additionalProperties": {
            "type": "object",
            "description": "Properties of the object. Contains field @type with type URL."
          }
        },
        "stages": {
          "description": "Mechanism for reporting in-progress stages",
          "type": "array",
          "items": {
            "$ref": "#/definitions/cloudfunctions:v1:GoogleCloudFunctionsV2alphaStage"
          }
        },
        "sourceToken": {
          "description": "An identifier for Firebase function sources. Disclaimer: This field is only supported for Firebase function deployments.",
          "type": "string"
        }
      },
      "$id": "#/definitions/cloudfunctions:v1:GoogleCloudFunctionsV2alphaOperationMetadata"
    },
    "cloudfunctions:v1:GoogleCloudFunctionsV2alphaStage": {
      "description": "Each Stage of the deployment process",
      "type": "object",
      "properties": {
        "name": {
          "description": "Name of the Stage. This will be unique for each Stage.",
          "type": "string",
          "enum": [
            "NAME_UNSPECIFIED",
            "ARTIFACT_REGISTRY",
            "BUILD",
            "SERVICE",
            "TRIGGER",
            "SERVICE_ROLLBACK",
            "TRIGGER_ROLLBACK"
          ]
        },
        "message": {
          "description": "Message describing the Stage",
          "type": "string"
        },
        "state": {
          "description": "Current state of the Stage",
          "type": "string",
          "enum": [
            "STATE_UNSPECIFIED",
            "NOT_STARTED",
            "IN_PROGRESS",
            "COMPLETE"
          ]
        },
        "resource": {
          "description": "Resource of the Stage",
          "type": "string"
        },
        "resourceUri": {
          "description": "Link to the current Stage resource",
          "type": "string"
        },
        "stateMessages": {
          "description": "State messages from the current Stage.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/cloudfunctions:v1:GoogleCloudFunctionsV2alphaStateMessage"
          }
        }
      },
      "$id": "#/definitions/cloudfunctions:v1:GoogleCloudFunctionsV2alphaStage"
    },
    "cloudfunctions:v1:GoogleCloudFunctionsV2alphaStateMessage": {
      "description": "Informational messages about the state of the Cloud Function or Operation.",
      "type": "object",
      "properties": {
        "severity": {
          "description": "Severity of the state message.",
          "type": "string",
          "enum": [
            "SEVERITY_UNSPECIFIED",
            "ERROR",
            "WARNING",
            "INFO"
          ]
        },
        "type": {
          "description": "One-word CamelCase type of the state message.",
          "type": "string"
        },
        "message": {
          "description": "The message.",
          "type": "string"
        }
      },
      "$id": "#/definitions/cloudfunctions:v1:GoogleCloudFunctionsV2alphaStateMessage"
    },
    "cloudfunctions:v1:GoogleCloudFunctionsV2betaOperationMetadata": {
      "description": "Represents the metadata of the long-running operation.",
      "type": "object",
      "properties": {
        "createTime": {
          "description": "The time the operation was created.",
          "type": "string",
          "format": "date-time"
        },
        "endTime": {
          "description": "The time the operation finished running.",
          "type": "string",
          "format": "date-time"
        },
        "target": {
          "description": "Server-defined resource path for the target of the operation.",
          "type": "string"
        },
        "verb": {
          "description": "Name of the verb executed by the operation.",
          "type": "string"
        },
        "statusDetail": {
          "description": "Human-readable status of the operation, if any.",
          "type": "string"
        },
        "cancelRequested": {
          "description": "Identifies whether the user has requested cancellation of the operation. Operations that have successfully been cancelled have google.longrunning.Operation.error value with a google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`.",
          "type": "boolean"
        },
        "apiVersion": {
          "description": "API version used to start the operation.",
          "type": "string"
        },
        "requestResource": {
          "description": "The original request that started the operation.",
          "type": "object",
          "additionalProperties": {
            "type": "object",
            "description": "Properties of the object. Contains field @type with type URL."
          }
        },
        "stages": {
          "description": "Mechanism for reporting in-progress stages",
          "type": "array",
          "items": {
            "$ref": "#/definitions/cloudfunctions:v1:GoogleCloudFunctionsV2betaStage"
          }
        },
        "sourceToken": {
          "description": "An identifier for Firebase function sources. Disclaimer: This field is only supported for Firebase function deployments.",
          "type": "string"
        }
      },
      "$id": "#/definitions/cloudfunctions:v1:GoogleCloudFunctionsV2betaOperationMetadata"
    },
    "cloudfunctions:v1:GoogleCloudFunctionsV2betaStage": {
      "description": "Each Stage of the deployment process",
      "type": "object",
      "properties": {
        "name": {
          "description": "Name of the Stage. This will be unique for each Stage.",
          "type": "string",
          "enum": [
            "NAME_UNSPECIFIED",
            "ARTIFACT_REGISTRY",
            "BUILD",
            "SERVICE",
            "TRIGGER",
            "SERVICE_ROLLBACK",
            "TRIGGER_ROLLBACK"
          ]
        },
        "message": {
          "description": "Message describing the Stage",
          "type": "string"
        },
        "state": {
          "description": "Current state of the Stage",
          "type": "string",
          "enum": [
            "STATE_UNSPECIFIED",
            "NOT_STARTED",
            "IN_PROGRESS",
            "COMPLETE"
          ]
        },
        "resource": {
          "description": "Resource of the Stage",
          "type": "string"
        },
        "resourceUri": {
          "description": "Link to the current Stage resource",
          "type": "string"
        },
        "stateMessages": {
          "description": "State messages from the current Stage.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/cloudfunctions:v1:GoogleCloudFunctionsV2betaStateMessage"
          }
        }
      },
      "$id": "#/definitions/cloudfunctions:v1:GoogleCloudFunctionsV2betaStage"
    },
    "cloudfunctions:v1:GoogleCloudFunctionsV2betaStateMessage": {
      "description": "Informational messages about the state of the Cloud Function or Operation.",
      "type": "object",
      "properties": {
        "severity": {
          "description": "Severity of the state message.",
          "type": "string",
          "enum": [
            "SEVERITY_UNSPECIFIED",
            "ERROR",
            "WARNING",
            "INFO"
          ]
        },
        "type": {
          "description": "One-word CamelCase type of the state message.",
          "type": "string"
        },
        "message": {
          "description": "The message.",
          "type": "string"
        }
      },
      "$id": "#/definitions/cloudfunctions:v1:GoogleCloudFunctionsV2betaStateMessage"
    },
    "cloudfunctions:v1:GoogleCloudFunctionsV2OperationMetadata": {
      "description": "Represents the metadata of the long-running operation.",
      "type": "object",
      "properties": {
        "createTime": {
          "description": "The time the operation was created.",
          "type": "string",
          "format": "date-time"
        },
        "endTime": {
          "description": "The time the operation finished running.",
          "type": "string",
          "format": "date-time"
        },
        "target": {
          "description": "Server-defined resource path for the target of the operation.",
          "type": "string"
        },
        "verb": {
          "description": "Name of the verb executed by the operation.",
          "type": "string"
        },
        "statusDetail": {
          "description": "Human-readable status of the operation, if any.",
          "type": "string"
        },
        "cancelRequested": {
          "description": "Identifies whether the user has requested cancellation of the operation. Operations that have successfully been cancelled have google.longrunning.Operation.error value with a google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`.",
          "type": "boolean"
        },
        "apiVersion": {
          "description": "API version used to start the operation.",
          "type": "string"
        },
        "requestResource": {
          "description": "The original request that started the operation.",
          "type": "object",
          "additionalProperties": {
            "type": "object",
            "description": "Properties of the object. Contains field @type with type URL."
          }
        },
        "stages": {
          "description": "Mechanism for reporting in-progress stages",
          "type": "array",
          "items": {
            "$ref": "#/definitions/cloudfunctions:v1:GoogleCloudFunctionsV2Stage"
          }
        },
        "sourceToken": {
          "description": "An identifier for Firebase function sources. Disclaimer: This field is only supported for Firebase function deployments.",
          "type": "string"
        }
      },
      "$id": "#/definitions/cloudfunctions:v1:GoogleCloudFunctionsV2OperationMetadata"
    },
    "cloudfunctions:v1:GoogleCloudFunctionsV2Stage": {
      "description": "Each Stage of the deployment process",
      "type": "object",
      "properties": {
        "name": {
          "description": "Name of the Stage. This will be unique for each Stage.",
          "type": "string",
          "enum": [
            "NAME_UNSPECIFIED",
            "ARTIFACT_REGISTRY",
            "BUILD",
            "SERVICE",
            "TRIGGER",
            "SERVICE_ROLLBACK",
            "TRIGGER_ROLLBACK"
          ]
        },
        "message": {
          "description": "Message describing the Stage",
          "type": "string"
        },
        "state": {
          "description": "Current state of the Stage",
          "type": "string",
          "enum": [
            "STATE_UNSPECIFIED",
            "NOT_STARTED",
            "IN_PROGRESS",
            "COMPLETE"
          ]
        },
        "resource": {
          "description": "Resource of the Stage",
          "type": "string"
        },
        "resourceUri": {
          "description": "Link to the current Stage resource",
          "type": "string"
        },
        "stateMessages": {
          "description": "State messages from the current Stage.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/cloudfunctions:v1:GoogleCloudFunctionsV2StateMessage"
          }
        }
      },
      "$id": "#/definitions/cloudfunctions:v1:GoogleCloudFunctionsV2Stage"
    },
    "cloudfunctions:v1:GoogleCloudFunctionsV2StateMessage": {
      "description": "Informational messages about the state of the Cloud Function or Operation.",
      "type": "object",
      "properties": {
        "severity": {
          "description": "Severity of the state message.",
          "type": "string",
          "enum": [
            "SEVERITY_UNSPECIFIED",
            "ERROR",
            "WARNING",
            "INFO"
          ]
        },
        "type": {
          "description": "One-word CamelCase type of the state message.",
          "type": "string"
        },
        "message": {
          "description": "The message.",
          "type": "string"
        }
      },
      "$id": "#/definitions/cloudfunctions:v1:GoogleCloudFunctionsV2StateMessage"
    },
    "cloudfunctions:v1:GoogleCloudFunctionsV2alphaLocationMetadata": {
      "description": "Extra GCF specific location information.",
      "type": "object",
      "properties": {
        "environments": {
          "description": "The Cloud Function environments this location supports.",
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "ENVIRONMENT_UNSPECIFIED",
              "GEN_1",
              "GEN_2"
            ]
          }
        }
      },
      "$id": "#/definitions/cloudfunctions:v1:GoogleCloudFunctionsV2alphaLocationMetadata"
    },
    "cloudfunctions:v1:GoogleCloudFunctionsV2betaLocationMetadata": {
      "description": "Extra GCF specific location information.",
      "type": "object",
      "properties": {
        "environments": {
          "description": "The Cloud Function environments this location supports.",
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "ENVIRONMENT_UNSPECIFIED",
              "GEN_1",
              "GEN_2"
            ]
          }
        }
      },
      "$id": "#/definitions/cloudfunctions:v1:GoogleCloudFunctionsV2betaLocationMetadata"
    },
    "cloudfunctions:v1:GoogleCloudFunctionsV2LocationMetadata": {
      "description": "Extra GCF specific location information.",
      "type": "object",
      "properties": {
        "environments": {
          "description": "The Cloud Function environments this location supports.",
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "ENVIRONMENT_UNSPECIFIED",
              "GEN_1",
              "GEN_2"
            ]
          }
        }
      },
      "$id": "#/definitions/cloudfunctions:v1:GoogleCloudFunctionsV2LocationMetadata"
    },
    "cloudfunctions:v2:ListOperationsResponse": {
      "description": "The response message for Operations.ListOperations.",
      "type": "object",
      "properties": {
        "operations": {
          "description": "A list of operations that matches the specified filter in the request.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/cloudfunctions:v2:Operation"
          }
        },
        "nextPageToken": {
          "description": "The standard List next-page token.",
          "type": "string"
        }
      },
      "$id": "#/definitions/cloudfunctions:v2:ListOperationsResponse"
    },
    "cloudfunctions:v2:Operation": {
      "description": "This resource represents a long-running operation that is the result of a network API call.",
      "type": "object",
      "properties": {
        "name": {
          "description": "The server-assigned name, which is only unique within the same service that originally returns it. If you use the default HTTP mapping, the `name` should be a resource name ending with `operations/{unique_id}`.",
          "type": "string"
        },
        "metadata": {
          "description": "Service-specific metadata associated with the operation. It typically contains progress information and common metadata such as create time. Some services might not provide such metadata. Any method that returns a long-running operation should document the metadata type, if any.",
          "type": "object",
          "additionalProperties": {
            "type": "object",
            "description": "Properties of the object. Contains field @type with type URL."
          }
        },
        "done": {
          "description": "If the value is `false`, it means the operation is still in progress. If `true`, the operation is completed, and either `error` or `response` is available.",
          "type": "boolean"
        },
        "error": {
          "description": "The error result of the operation in case of failure or cancellation.",
          "$ref": "#/definitions/cloudfunctions:v2:Status"
        },
        "response": {
          "description": "The normal, successful response of the operation. If the original method returns no data on success, such as `Delete`, the response is `google.protobuf.Empty`. If the original method is standard `Get`/`Create`/`Update`, the response should be the resource. For other methods, the response should have the type `XxxResponse`, where `Xxx` is the original method name. For example, if the original method name is `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`.",
          "type": "object",
          "additionalProperties": {
            "type": "object",
            "description": "Properties of the object. Contains field @type with type URL."
          }
        }
      },
      "$id": "#/definitions/cloudfunctions:v2:Operation"
    },
    "cloudfunctions:v2:Status": {
      "description": "The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).",
      "type": "object",
      "properties": {
        "code": {
          "description": "The status code, which should be an enum value of google.rpc.Code.",
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "description": "A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client.",
          "type": "string"
        },
        "details": {
          "description": "A list of messages that carry the error details. There is a common set of message types for APIs to use.",
          "type": "array",
          "items": {
            "type": "object",
            "additionalProperties": {
              "type": "object",
              "description": "Properties of the object. Contains field @type with type URL."
            }
          }
        }
      },
      "$id": "#/definitions/cloudfunctions:v2:Status"
    },
    "cloudfunctions:v2:SetIamPolicyRequest": {
      "description": "Request message for `SetIamPolicy` method.",
      "type": "object",
      "properties": {
        "policy": {
          "description": "REQUIRED: The complete policy to be applied to the `resource`. The size of the policy is limited to a few 10s of KB. An empty policy is a valid policy but certain Google Cloud services (such as Projects) might reject them.",
          "$ref": "#/definitions/cloudfunctions:v2:Policy"
        },
        "updateMask": {
          "description": "OPTIONAL: A FieldMask specifying which fields of the policy to modify. Only the fields in the mask will be modified. If no mask is provided, the following default mask is used: `paths: \"bindings, etag\"`",
          "type": "string",
          "format": "google-fieldmask"
        }
      },
      "$id": "#/definitions/cloudfunctions:v2:SetIamPolicyRequest"
    },
    "cloudfunctions:v2:Policy": {
      "description": "An Identity and Access Management (IAM) policy, which specifies access controls for Google Cloud resources. A `Policy` is a collection of `bindings`. A `binding` binds one or more `members`, or principals, to a single `role`. Principals can be user accounts, service accounts, Google groups, and domains (such as G Suite). A `role` is a named list of permissions; each `role` can be an IAM predefined role or a user-created custom role. For some types of Google Cloud resources, a `binding` can also specify a `condition`, which is a logical expression that allows access to a resource only if the expression evaluates to `true`. A condition can add constraints based on attributes of the request, the resource, or both. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies). **JSON example:** ``` { \"bindings\": [ { \"role\": \"roles/resourcemanager.organizationAdmin\", \"members\": [ \"user:mike@example.com\", \"group:admins@example.com\", \"domain:google.com\", \"serviceAccount:my-project-id@appspot.gserviceaccount.com\" ] }, { \"role\": \"roles/resourcemanager.organizationViewer\", \"members\": [ \"user:eve@example.com\" ], \"condition\": { \"title\": \"expirable access\", \"description\": \"Does not grant access after Sep 2020\", \"expression\": \"request.time < timestamp('2020-10-01T00:00:00.000Z')\", } } ], \"etag\": \"BwWWja0YfJA=\", \"version\": 3 } ``` **YAML example:** ``` bindings: - members: - user:mike@example.com - group:admins@example.com - domain:google.com - serviceAccount:my-project-id@appspot.gserviceaccount.com role: roles/resourcemanager.organizationAdmin - members: - user:eve@example.com role: roles/resourcemanager.organizationViewer condition: title: expirable access description: Does not grant access after Sep 2020 expression: request.time < timestamp('2020-10-01T00:00:00.000Z') etag: BwWWja0YfJA= version: 3 ``` For a description of IAM and its features, see the [IAM documentation](https://cloud.google.com/iam/docs/).",
      "type": "object",
      "properties": {
        "version": {
          "description": "Specifies the format of the policy. Valid values are `0`, `1`, and `3`. Requests that specify an invalid value are rejected. Any operation that affects conditional role bindings must specify version `3`. This requirement applies to the following operations: * Getting a policy that includes a conditional role binding * Adding a conditional role binding to a policy * Changing a conditional role binding in a policy * Removing any role binding, with or without a condition, from a policy that includes conditions **Important:** If you use IAM Conditions, you must include the `etag` field whenever you call `setIamPolicy`. If you omit this field, then IAM allows you to overwrite a version `3` policy with a version `1` policy, and all of the conditions in the version `3` policy are lost. If a policy does not include any conditions, operations on that policy may specify any valid version or leave the field unset. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).",
          "type": "integer",
          "format": "int32"
        },
        "bindings": {
          "description": "Associates a list of `members`, or principals, with a `role`. Optionally, may specify a `condition` that determines how and when the `bindings` are applied. Each of the `bindings` must contain at least one principal. The `bindings` in a `Policy` can refer to up to 1,500 principals; up to 250 of these principals can be Google groups. Each occurrence of a principal counts towards these limits. For example, if the `bindings` grant 50 different roles to `user:alice@example.com`, and not to any other principal, then you can add another 1,450 principals to the `bindings` in the `Policy`.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/cloudfunctions:v2:Binding"
          }
        },
        "auditConfigs": {
          "description": "Specifies cloud audit logging configuration for this policy.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/cloudfunctions:v2:AuditConfig"
          }
        },
        "etag": {
          "description": "`etag` is used for optimistic concurrency control as a way to help prevent simultaneous updates of a policy from overwriting each other. It is strongly suggested that systems make use of the `etag` in the read-modify-write cycle to perform policy updates in order to avoid race conditions: An `etag` is returned in the response to `getIamPolicy`, and systems are expected to put that etag in the request to `setIamPolicy` to ensure that their change will be applied to the same version of the policy. **Important:** If you use IAM Conditions, you must include the `etag` field whenever you call `setIamPolicy`. If you omit this field, then IAM allows you to overwrite a version `3` policy with a version `1` policy, and all of the conditions in the version `3` policy are lost.",
          "type": "string",
          "format": "byte"
        }
      },
      "$id": "#/definitions/cloudfunctions:v2:Policy"
    },
    "cloudfunctions:v2:Binding": {
      "description": "Associates `members`, or principals, with a `role`.",
      "type": "object",
      "properties": {
        "role": {
          "description": "Role that is assigned to the list of `members`, or principals. For example, `roles/viewer`, `roles/editor`, or `roles/owner`.",
          "type": "string"
        },
        "members": {
          "description": "Specifies the principals requesting access for a Google Cloud resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. Does not include identities that come from external identity providers (IdPs) through identity federation. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a Google service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `serviceAccount:{projectid}.svc.id.goog[{namespace}/{kubernetes-sa}]`: An identifier for a [Kubernetes service account](https://cloud.google.com/kubernetes-engine/docs/how-to/kubernetes-service-accounts). For example, `my-project.svc.id.goog[my-namespace/my-kubernetes-sa]`. * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "condition": {
          "description": "The condition that is associated with this binding. If the condition evaluates to `true`, then this binding applies to the current request. If the condition evaluates to `false`, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the principals in this binding. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).",
          "$ref": "#/definitions/cloudfunctions:v2:Expr"
        }
      },
      "$id": "#/definitions/cloudfunctions:v2:Binding"
    },
    "cloudfunctions:v2:Expr": {
      "description": "Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: \"Summary size limit\" description: \"Determines if a summary is less than 100 chars\" expression: \"document.summary.size() < 100\" Example (Equality): title: \"Requestor is owner\" description: \"Determines if requestor is the document owner\" expression: \"document.owner == request.auth.claims.email\" Example (Logic): title: \"Public documents\" description: \"Determine whether the document should be publicly visible\" expression: \"document.type != 'private' && document.type != 'internal'\" Example (Data Manipulation): title: \"Notification string\" description: \"Create a notification string with a timestamp.\" expression: \"'New message received at ' + string(document.create_time)\" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information.",
      "type": "object",
      "properties": {
        "expression": {
          "description": "Textual representation of an expression in Common Expression Language syntax.",
          "type": "string"
        },
        "title": {
          "description": "Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.",
          "type": "string"
        },
        "description": {
          "description": "Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.",
          "type": "string"
        },
        "location": {
          "description": "Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.",
          "type": "string"
        }
      },
      "$id": "#/definitions/cloudfunctions:v2:Expr"
    },
    "cloudfunctions:v2:AuditConfig": {
      "description": "Specifies the audit configuration for a service. The configuration determines which permission types are logged, and what identities, if any, are exempted from logging. An AuditConfig must have one or more AuditLogConfigs. If there are AuditConfigs for both `allServices` and a specific service, the union of the two AuditConfigs is used for that service: the log_types specified in each AuditConfig are enabled, and the exempted_members in each AuditLogConfig are exempted. Example Policy with multiple AuditConfigs: { \"audit_configs\": [ { \"service\": \"allServices\", \"audit_log_configs\": [ { \"log_type\": \"DATA_READ\", \"exempted_members\": [ \"user:jose@example.com\" ] }, { \"log_type\": \"DATA_WRITE\" }, { \"log_type\": \"ADMIN_READ\" } ] }, { \"service\": \"sampleservice.googleapis.com\", \"audit_log_configs\": [ { \"log_type\": \"DATA_READ\" }, { \"log_type\": \"DATA_WRITE\", \"exempted_members\": [ \"user:aliya@example.com\" ] } ] } ] } For sampleservice, this policy enables DATA_READ, DATA_WRITE and ADMIN_READ logging. It also exempts `jose@example.com` from DATA_READ logging, and `aliya@example.com` from DATA_WRITE logging.",
      "type": "object",
      "properties": {
        "service": {
          "description": "Specifies a service that will be enabled for audit logging. For example, `storage.googleapis.com`, `cloudsql.googleapis.com`. `allServices` is a special value that covers all services.",
          "type": "string"
        },
        "auditLogConfigs": {
          "description": "The configuration for logging of each type of permission.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/cloudfunctions:v2:AuditLogConfig"
          }
        }
      },
      "$id": "#/definitions/cloudfunctions:v2:AuditConfig"
    },
    "cloudfunctions:v2:AuditLogConfig": {
      "description": "Provides the configuration for logging a type of permissions. Example: { \"audit_log_configs\": [ { \"log_type\": \"DATA_READ\", \"exempted_members\": [ \"user:jose@example.com\" ] }, { \"log_type\": \"DATA_WRITE\" } ] } This enables 'DATA_READ' and 'DATA_WRITE' logging, while exempting jose@example.com from DATA_READ logging.",
      "type": "object",
      "properties": {
        "logType": {
          "description": "The log type that this config enables.",
          "type": "string",
          "enum": [
            "LOG_TYPE_UNSPECIFIED",
            "ADMIN_READ",
            "DATA_WRITE",
            "DATA_READ"
          ]
        },
        "exemptedMembers": {
          "description": "Specifies the identities that do not cause logging for this type of permission. Follows the same format of Binding.members.",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "$id": "#/definitions/cloudfunctions:v2:AuditLogConfig"
    },
    "cloudfunctions:v2:TestIamPermissionsRequest": {
      "description": "Request message for `TestIamPermissions` method.",
      "type": "object",
      "properties": {
        "permissions": {
          "description": "The set of permissions to check for the `resource`. Permissions with wildcards (such as `*` or `storage.*`) are not allowed. For more information see [IAM Overview](https://cloud.google.com/iam/docs/overview#permissions).",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "$id": "#/definitions/cloudfunctions:v2:TestIamPermissionsRequest"
    },
    "cloudfunctions:v2:TestIamPermissionsResponse": {
      "description": "Response message for `TestIamPermissions` method.",
      "type": "object",
      "properties": {
        "permissions": {
          "description": "A subset of `TestPermissionsRequest.permissions` that the caller is allowed.",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "$id": "#/definitions/cloudfunctions:v2:TestIamPermissionsResponse"
    },
    "cloudfunctions:v2:Function": {
      "description": "Describes a Cloud Function that contains user computation executed in response to an event. It encapsulates function and trigger configurations.",
      "type": "object",
      "properties": {
        "name": {
          "description": "A user-defined name of the function. Function names must be unique globally and match pattern `projects/*/locations/*/functions/*`",
          "type": "string"
        },
        "description": {
          "description": "User-provided description of a function.",
          "type": "string"
        },
        "buildConfig": {
          "description": "Describes the Build step of the function that builds a container from the given source.",
          "$ref": "#/definitions/cloudfunctions:v2:BuildConfig"
        },
        "serviceConfig": {
          "description": "Describes the Service being deployed. Currently deploys services to Cloud Run (fully managed).",
          "$ref": "#/definitions/cloudfunctions:v2:ServiceConfig"
        },
        "eventTrigger": {
          "description": "An Eventarc trigger managed by Google Cloud Functions that fires events in response to a condition in another service.",
          "$ref": "#/definitions/cloudfunctions:v2:EventTrigger"
        },
        "state": {
          "description": "Output only. State of the function.",
          "readOnly": true,
          "type": "string",
          "enum": [
            "STATE_UNSPECIFIED",
            "ACTIVE",
            "FAILED",
            "DEPLOYING",
            "DELETING",
            "UNKNOWN"
          ]
        },
        "updateTime": {
          "description": "Output only. The last update timestamp of a Cloud Function.",
          "readOnly": true,
          "type": "string",
          "format": "date-time"
        },
        "labels": {
          "description": "Labels associated with this Cloud Function.",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "stateMessages": {
          "description": "Output only. State Messages for this Cloud Function.",
          "readOnly": true,
          "type": "array",
          "items": {
            "$ref": "#/definitions/cloudfunctions:v2:GoogleCloudFunctionsV2StateMessage"
          }
        },
        "environment": {
          "description": "Describe whether the function is 1st Gen or 2nd Gen.",
          "type": "string",
          "enum": [
            "ENVIRONMENT_UNSPECIFIED",
            "GEN_1",
            "GEN_2"
          ]
        },
        "url": {
          "description": "Output only. The deployed url for the function.",
          "readOnly": true,
          "type": "string"
        },
        "kmsKeyName": {
          "description": "[Preview] Resource name of a KMS crypto key (managed by the user) used to encrypt/decrypt function resources. It must match the pattern `projects/{project}/locations/{location}/keyRings/{key_ring}/cryptoKeys/{crypto_key}`.",
          "type": "string"
        },
        "satisfiesPzs": {
          "description": "Output only. Reserved for future use.",
          "readOnly": true,
          "type": "boolean"
        }
      },
      "$id": "#/definitions/cloudfunctions:v2:Function"
    },
    "cloudfunctions:v2:BuildConfig": {
      "description": "Describes the Build step of the function that builds a container from the given source.",
      "type": "object",
      "properties": {
        "build": {
          "description": "Output only. The Cloud Build name of the latest successful deployment of the function.",
          "readOnly": true,
          "type": "string"
        },
        "runtime": {
          "description": "The runtime in which to run the function. Required when deploying a new function, optional when updating an existing function. For a complete list of possible choices, see the [`gcloud` command reference](https://cloud.google.com/sdk/gcloud/reference/functions/deploy#--runtime).",
          "type": "string"
        },
        "entryPoint": {
          "description": "The name of the function (as defined in source code) that will be executed. Defaults to the resource name suffix, if not specified. For backward compatibility, if function with given name is not found, then the system will try to use function named \"function\". For Node.js this is name of a function exported by the module specified in `source_location`.",
          "type": "string"
        },
        "source": {
          "description": "The location of the function source code.",
          "$ref": "#/definitions/cloudfunctions:v2:Source"
        },
        "sourceProvenance": {
          "description": "Output only. A permanent fixed identifier for source.",
          "readOnly": true,
          "$ref": "#/definitions/cloudfunctions:v2:SourceProvenance"
        },
        "workerPool": {
          "description": "Name of the Cloud Build Custom Worker Pool that should be used to build the function. The format of this field is `projects/{project}/locations/{region}/workerPools/{workerPool}` where {project} and {region} are the project id and region respectively where the worker pool is defined and {workerPool} is the short name of the worker pool. If the project id is not the same as the function, then the Cloud Functions Service Agent (service-@gcf-admin-robot.iam.gserviceaccount.com) must be granted the role Cloud Build Custom Workers Builder (roles/cloudbuild.customworkers.builder) in the project.",
          "type": "string"
        },
        "environmentVariables": {
          "description": "User-provided build-time environment variables for the function",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "dockerRegistry": {
          "description": "Docker Registry to use for this deployment. This configuration is only applicable to 1st Gen functions, 2nd Gen functions can only use Artifact Registry. If `docker_repository` field is specified, this field will be automatically set as `ARTIFACT_REGISTRY`. If unspecified, it currently defaults to `CONTAINER_REGISTRY`. This field may be overridden by the backend for eligible deployments.",
          "type": "string",
          "enum": [
            "DOCKER_REGISTRY_UNSPECIFIED",
            "CONTAINER_REGISTRY",
            "ARTIFACT_REGISTRY"
          ]
        },
        "dockerRepository": {
          "description": "User managed repository created in Artifact Registry optionally with a customer managed encryption key. This is the repository to which the function docker image will be pushed after it is built by Cloud Build. If unspecified, GCF will create and use a repository named 'gcf-artifacts' for every deployed region. It must match the pattern `projects/{project}/locations/{location}/repositories/{repository}`. Cross-project repositories are not supported. Cross-location repositories are not supported. Repository format must be 'DOCKER'.",
          "type": "string"
        },
        "sourceToken": {
          "description": "An identifier for Firebase function sources. Disclaimer: This field is only supported for Firebase function deployments.",
          "type": "string"
        }
      },
      "$id": "#/definitions/cloudfunctions:v2:BuildConfig"
    },
    "cloudfunctions:v2:Source": {
      "description": "The location of the function source code.",
      "type": "object",
      "properties": {
        "storageSource": {
          "description": "If provided, get the source from this location in Google Cloud Storage.",
          "$ref": "#/definitions/cloudfunctions:v2:StorageSource"
        },
        "repoSource": {
          "description": "If provided, get the source from this location in a Cloud Source Repository.",
          "$ref": "#/definitions/cloudfunctions:v2:RepoSource"
        },
        "gitUri": {
          "description": "If provided, get the source from GitHub repository. This option is valid only for GCF 1st Gen function. Example: https://github.com///blob//",
          "type": "string"
        }
      },
      "$id": "#/definitions/cloudfunctions:v2:Source"
    },
    "cloudfunctions:v2:StorageSource": {
      "description": "Location of the source in an archive file in Google Cloud Storage.",
      "type": "object",
      "properties": {
        "bucket": {
          "description": "Google Cloud Storage bucket containing the source (see [Bucket Name Requirements](https://cloud.google.com/storage/docs/bucket-naming#requirements)).",
          "type": "string"
        },
        "object": {
          "description": "Google Cloud Storage object containing the source. This object must be a gzipped archive file (`.tar.gz`) containing source to build.",
          "type": "string"
        },
        "generation": {
          "description": "Google Cloud Storage generation for the object. If the generation is omitted, the latest generation will be used.",
          "type": "string",
          "format": "int64"
        }
      },
      "$id": "#/definitions/cloudfunctions:v2:StorageSource"
    },
    "cloudfunctions:v2:RepoSource": {
      "description": "Location of the source in a Google Cloud Source Repository.",
      "type": "object",
      "properties": {
        "branchName": {
          "description": "Regex matching branches to build. The syntax of the regular expressions accepted is the syntax accepted by RE2 and described at https://github.com/google/re2/wiki/Syntax",
          "type": "string"
        },
        "tagName": {
          "description": "Regex matching tags to build. The syntax of the regular expressions accepted is the syntax accepted by RE2 and described at https://github.com/google/re2/wiki/Syntax",
          "type": "string"
        },
        "commitSha": {
          "description": "Explicit commit SHA to build.",
          "type": "string"
        },
        "projectId": {
          "description": "ID of the project that owns the Cloud Source Repository. If omitted, the project ID requesting the build is assumed.",
          "type": "string"
        },
        "repoName": {
          "description": "Name of the Cloud Source Repository.",
          "type": "string"
        },
        "dir": {
          "description": "Directory, relative to the source root, in which to run the build. This must be a relative path. If a step's `dir` is specified and is an absolute path, this value is ignored for that step's execution. eg. helloworld (no leading slash allowed)",
          "type": "string"
        }
      },
      "$id": "#/definitions/cloudfunctions:v2:RepoSource"
    },
    "cloudfunctions:v2:SourceProvenance": {
      "description": "Provenance of the source. Ways to find the original source, or verify that some source was used for this build.",
      "type": "object",
      "properties": {
        "resolvedStorageSource": {
          "description": "A copy of the build's `source.storage_source`, if exists, with any generations resolved.",
          "$ref": "#/definitions/cloudfunctions:v2:StorageSource"
        },
        "resolvedRepoSource": {
          "description": "A copy of the build's `source.repo_source`, if exists, with any revisions resolved.",
          "$ref": "#/definitions/cloudfunctions:v2:RepoSource"
        },
        "gitUri": {
          "description": "A copy of the build's `source.git_uri`, if exists, with any commits resolved.",
          "type": "string"
        }
      },
      "$id": "#/definitions/cloudfunctions:v2:SourceProvenance"
    },
    "cloudfunctions:v2:ServiceConfig": {
      "description": "Describes the Service being deployed. Currently Supported : Cloud Run (fully managed).",
      "type": "object",
      "properties": {
        "service": {
          "description": "Output only. Name of the service associated with a Function. The format of this field is `projects/{project}/locations/{region}/services/{service}`",
          "readOnly": true,
          "type": "string"
        },
        "timeoutSeconds": {
          "description": "The function execution timeout. Execution is considered failed and can be terminated if the function is not completed at the end of the timeout period. Defaults to 60 seconds.",
          "type": "integer",
          "format": "int32"
        },
        "availableMemory": {
          "description": "The amount of memory available for a function. Defaults to 256M. Supported units are k, M, G, Mi, Gi. If no unit is supplied the value is interpreted as bytes. See https://github.com/kubernetes/kubernetes/blob/master/staging/src/k8s.io/apimachinery/pkg/api/resource/quantity.go a full description.",
          "type": "string"
        },
        "availableCpu": {
          "description": "[Preview] The number of CPUs used in a single container instance. Default value is calculated from available memory. Supports the same values as Cloud Run, see https://cloud.google.com/run/docs/reference/rest/v1/Container#resourcerequirements Example: \"1\" indicates 1 vCPU",
          "type": "string"
        },
        "environmentVariables": {
          "description": "Environment variables that shall be available during function execution.",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "maxInstanceCount": {
          "description": "The limit on the maximum number of function instances that may coexist at a given time. In some cases, such as rapid traffic surges, Cloud Functions may, for a short period of time, create more instances than the specified max instances limit. If your function cannot tolerate this temporary behavior, you may want to factor in a safety margin and set a lower max instances value than your function can tolerate. See the [Max Instances](https://cloud.google.com/functions/docs/max-instances) Guide for more details.",
          "type": "integer",
          "format": "int32"
        },
        "minInstanceCount": {
          "description": "The limit on the minimum number of function instances that may coexist at a given time. Function instances are kept in idle state for a short period after they finished executing the request to reduce cold start time for subsequent requests. Setting a minimum instance count will ensure that the given number of instances are kept running in idle state always. This can help with cold start times when jump in incoming request count occurs after the idle instance would have been stopped in the default case.",
          "type": "integer",
          "format": "int32"
        },
        "vpcConnector": {
          "description": "The Serverless VPC Access connector that this cloud function can connect to. The format of this field is `projects/*/locations/*/connectors/*`.",
          "type": "string"
        },
        "vpcConnectorEgressSettings": {
          "description": "The egress settings for the connector, controlling what traffic is diverted through it.",
          "type": "string",
          "enum": [
            "VPC_CONNECTOR_EGRESS_SETTINGS_UNSPECIFIED",
            "PRIVATE_RANGES_ONLY",
            "ALL_TRAFFIC"
          ]
        },
        "ingressSettings": {
          "description": "The ingress settings for the function, controlling what traffic can reach it.",
          "type": "string",
          "enum": [
            "INGRESS_SETTINGS_UNSPECIFIED",
            "ALLOW_ALL",
            "ALLOW_INTERNAL_ONLY",
            "ALLOW_INTERNAL_AND_GCLB"
          ]
        },
        "uri": {
          "description": "Output only. URI of the Service deployed.",
          "readOnly": true,
          "type": "string"
        },
        "serviceAccountEmail": {
          "description": "The email of the service's service account. If empty, defaults to `{project_number}-compute@developer.gserviceaccount.com`.",
          "type": "string"
        },
        "allTrafficOnLatestRevision": {
          "description": "Whether 100% of traffic is routed to the latest revision. On CreateFunction and UpdateFunction, when set to true, the revision being deployed will serve 100% of traffic, ignoring any traffic split settings, if any. On GetFunction, true will be returned if the latest revision is serving 100% of traffic.",
          "type": "boolean"
        },
        "secretEnvironmentVariables": {
          "description": "Secret environment variables configuration.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/cloudfunctions:v2:SecretEnvVar"
          }
        },
        "secretVolumes": {
          "description": "Secret volumes configuration.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/cloudfunctions:v2:SecretVolume"
          }
        },
        "revision": {
          "description": "Output only. The name of service revision.",
          "readOnly": true,
          "type": "string"
        },
        "maxInstanceRequestConcurrency": {
          "description": "[Preview] Sets the maximum number of concurrent requests that each instance can receive. Defaults to 1.",
          "type": "integer",
          "format": "int32"
        },
        "securityLevel": {
          "description": "Security level configure whether the function only accepts https. This configuration is only applicable to 1st Gen functions with Http trigger. By default https is optional for 1st Gen functions; 2nd Gen functions are https ONLY.",
          "type": "string",
          "enum": [
            "SECURITY_LEVEL_UNSPECIFIED",
            "SECURE_ALWAYS",
            "SECURE_OPTIONAL"
          ]
        }
      },
      "$id": "#/definitions/cloudfunctions:v2:ServiceConfig"
    },
    "cloudfunctions:v2:SecretEnvVar": {
      "description": "Configuration for a secret environment variable. It has the information necessary to fetch the secret value from secret manager and expose it as an environment variable.",
      "type": "object",
      "properties": {
        "key": {
          "description": "Name of the environment variable.",
          "type": "string"
        },
        "projectId": {
          "description": "Project identifier (preferably project number but can also be the project ID) of the project that contains the secret. If not set, it is assumed that the secret is in the same project as the function.",
          "type": "string"
        },
        "secret": {
          "description": "Name of the secret in secret manager (not the full resource name).",
          "type": "string"
        },
        "version": {
          "description": "Version of the secret (version number or the string 'latest'). It is recommended to use a numeric version for secret environment variables as any updates to the secret value is not reflected until new instances start.",
          "type": "string"
        }
      },
      "$id": "#/definitions/cloudfunctions:v2:SecretEnvVar"
    },
    "cloudfunctions:v2:SecretVolume": {
      "description": "Configuration for a secret volume. It has the information necessary to fetch the secret value from secret manager and make it available as files mounted at the requested paths within the application container.",
      "type": "object",
      "properties": {
        "mountPath": {
          "description": "The path within the container to mount the secret volume. For example, setting the mount_path as `/etc/secrets` would mount the secret value files under the `/etc/secrets` directory. This directory will also be completely shadowed and unavailable to mount any other secrets. Recommended mount path: /etc/secrets",
          "type": "string"
        },
        "projectId": {
          "description": "Project identifier (preferably project number but can also be the project ID) of the project that contains the secret. If not set, it is assumed that the secret is in the same project as the function.",
          "type": "string"
        },
        "secret": {
          "description": "Name of the secret in secret manager (not the full resource name).",
          "type": "string"
        },
        "versions": {
          "description": "List of secret versions to mount for this secret. If empty, the `latest` version of the secret will be made available in a file named after the secret under the mount point.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/cloudfunctions:v2:SecretVersion"
          }
        }
      },
      "$id": "#/definitions/cloudfunctions:v2:SecretVolume"
    },
    "cloudfunctions:v2:SecretVersion": {
      "description": "Configuration for a single version.",
      "type": "object",
      "properties": {
        "version": {
          "description": "Version of the secret (version number or the string 'latest'). It is preferable to use `latest` version with secret volumes as secret value changes are reflected immediately.",
          "type": "string"
        },
        "path": {
          "description": "Relative path of the file under the mount path where the secret value for this version will be fetched and made available. For example, setting the mount_path as '/etc/secrets' and path as `secret_foo` would mount the secret value file at `/etc/secrets/secret_foo`.",
          "type": "string"
        }
      },
      "$id": "#/definitions/cloudfunctions:v2:SecretVersion"
    },
    "cloudfunctions:v2:EventTrigger": {
      "description": "Describes EventTrigger, used to request events to be sent from another service.",
      "type": "object",
      "properties": {
        "trigger": {
          "description": "Output only. The resource name of the Eventarc trigger. The format of this field is `projects/{project}/locations/{region}/triggers/{trigger}`.",
          "readOnly": true,
          "type": "string"
        },
        "triggerRegion": {
          "description": "The region that the trigger will be in. The trigger will only receive events originating in this region. It can be the same region as the function, a different region or multi-region, or the global region. If not provided, defaults to the same region as the function.",
          "type": "string"
        },
        "eventType": {
          "description": "Required. The type of event to observe. For example: `google.cloud.audit.log.v1.written` or `google.cloud.pubsub.topic.v1.messagePublished`.",
          "type": "string"
        },
        "eventFilters": {
          "description": "Criteria used to filter events.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/cloudfunctions:v2:EventFilter"
          }
        },
        "pubsubTopic": {
          "description": "Optional. The name of a Pub/Sub topic in the same project that will be used as the transport topic for the event delivery. Format: `projects/{project}/topics/{topic}`. This is only valid for events of type `google.cloud.pubsub.topic.v1.messagePublished`. The topic provided here will not be deleted at function deletion.",
          "type": "string"
        },
        "serviceAccountEmail": {
          "description": "Optional. The email of the trigger's service account. The service account must have permission to invoke Cloud Run services, the permission is `run.routes.invoke`. If empty, defaults to the Compute Engine default service account: `{project_number}-compute@developer.gserviceaccount.com`.",
          "type": "string"
        },
        "retryPolicy": {
          "description": "Optional. If unset, then defaults to ignoring failures (i.e. not retrying them).",
          "type": "string",
          "enum": [
            "RETRY_POLICY_UNSPECIFIED",
            "RETRY_POLICY_DO_NOT_RETRY",
            "RETRY_POLICY_RETRY"
          ]
        },
        "channel": {
          "description": "Optional. The name of the channel associated with the trigger in `projects/{project}/locations/{location}/channels/{channel}` format. You must provide a channel to receive events from Eventarc SaaS partners.",
          "type": "string"
        }
      },
      "$id": "#/definitions/cloudfunctions:v2:EventTrigger"
    },
    "cloudfunctions:v2:EventFilter": {
      "description": "Filters events based on exact matches on the CloudEvents attributes.",
      "type": "object",
      "properties": {
        "attribute": {
          "description": "Required. The name of a CloudEvents attribute.",
          "type": "string"
        },
        "value": {
          "description": "Required. The value for the attribute.",
          "type": "string"
        },
        "operator": {
          "description": "Optional. The operator used for matching the events with the value of the filter. If not specified, only events that have an exact key-value pair specified in the filter are matched. The only allowed value is `match-path-pattern`.",
          "type": "string"
        }
      },
      "$id": "#/definitions/cloudfunctions:v2:EventFilter"
    },
    "cloudfunctions:v2:GoogleCloudFunctionsV2StateMessage": {
      "description": "Informational messages about the state of the Cloud Function or Operation.",
      "type": "object",
      "properties": {
        "severity": {
          "description": "Severity of the state message.",
          "type": "string",
          "enum": [
            "SEVERITY_UNSPECIFIED",
            "ERROR",
            "WARNING",
            "INFO"
          ]
        },
        "type": {
          "description": "One-word CamelCase type of the state message.",
          "type": "string"
        },
        "message": {
          "description": "The message.",
          "type": "string"
        }
      },
      "$id": "#/definitions/cloudfunctions:v2:GoogleCloudFunctionsV2StateMessage"
    },
    "cloudfunctions:v2:ListFunctionsResponse": {
      "description": "Response for the `ListFunctions` method.",
      "type": "object",
      "properties": {
        "functions": {
          "description": "The functions that match the request.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/cloudfunctions:v2:Function"
          }
        },
        "nextPageToken": {
          "description": "A token, which can be sent as `page_token` to retrieve the next page. If this field is omitted, there are no subsequent pages.",
          "type": "string"
        },
        "unreachable": {
          "description": "Locations that could not be reached. The response does not include any functions from these locations.",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "$id": "#/definitions/cloudfunctions:v2:ListFunctionsResponse"
    },
    "cloudfunctions:v2:GenerateUploadUrlRequest": {
      "description": "Request of `GenerateSourceUploadUrl` method.",
      "type": "object",
      "properties": {
        "kmsKeyName": {
          "description": "[Preview] Resource name of a KMS crypto key (managed by the user) used to encrypt/decrypt function source code objects in intermediate Cloud Storage buckets. When you generate an upload url and upload your source code, it gets copied to an intermediate Cloud Storage bucket. The source code is then copied to a versioned directory in the sources bucket in the consumer project during the function deployment. It must match the pattern `projects/{project}/locations/{location}/keyRings/{key_ring}/cryptoKeys/{crypto_key}`. The Google Cloud Functions service account (service-{project_number}@gcf-admin-robot.iam.gserviceaccount.com) must be granted the role 'Cloud KMS CryptoKey Encrypter/Decrypter (roles/cloudkms.cryptoKeyEncrypterDecrypter)' on the Key/KeyRing/Project/Organization (least access preferred).",
          "type": "string"
        }
      },
      "$id": "#/definitions/cloudfunctions:v2:GenerateUploadUrlRequest"
    },
    "cloudfunctions:v2:GenerateUploadUrlResponse": {
      "description": "Response of `GenerateSourceUploadUrl` method.",
      "type": "object",
      "properties": {
        "uploadUrl": {
          "description": "The generated Google Cloud Storage signed URL that should be used for a function source code upload. The uploaded file should be a zip archive which contains a function.",
          "type": "string"
        },
        "storageSource": {
          "description": "The location of the source code in the upload bucket. Once the archive is uploaded using the `upload_url` use this field to set the `function.build_config.source.storage_source` during CreateFunction and UpdateFunction. Generation defaults to 0, as Cloud Storage provides a new generation only upon uploading a new object or version of an object.",
          "$ref": "#/definitions/cloudfunctions:v2:StorageSource"
        }
      },
      "$id": "#/definitions/cloudfunctions:v2:GenerateUploadUrlResponse"
    },
    "cloudfunctions:v2:GenerateDownloadUrlRequest": {
      "description": "Request of `GenerateDownloadUrl` method.",
      "type": "object",
      "properties": {},
      "$id": "#/definitions/cloudfunctions:v2:GenerateDownloadUrlRequest"
    },
    "cloudfunctions:v2:GenerateDownloadUrlResponse": {
      "description": "Response of `GenerateDownloadUrl` method.",
      "type": "object",
      "properties": {
        "downloadUrl": {
          "description": "The generated Google Cloud Storage signed URL that should be used for function source code download.",
          "type": "string"
        }
      },
      "$id": "#/definitions/cloudfunctions:v2:GenerateDownloadUrlResponse"
    },
    "cloudfunctions:v2:ListRuntimesResponse": {
      "description": "Response for the `ListRuntimes` method.",
      "type": "object",
      "properties": {
        "runtimes": {
          "description": "The runtimes that match the request.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/cloudfunctions:v2:Runtime"
          }
        }
      },
      "$id": "#/definitions/cloudfunctions:v2:ListRuntimesResponse"
    },
    "cloudfunctions:v2:Runtime": {
      "description": "Describes a runtime and any special information (e.g., deprecation status) related to it.",
      "type": "object",
      "properties": {
        "name": {
          "description": "The name of the runtime, e.g., 'go113', 'nodejs12', etc.",
          "type": "string"
        },
        "displayName": {
          "description": "The user facing name, eg 'Go 1.13', 'Node.js 12', etc.",
          "type": "string"
        },
        "stage": {
          "description": "The stage of life this runtime is in, e.g., BETA, GA, etc.",
          "type": "string",
          "enum": [
            "RUNTIME_STAGE_UNSPECIFIED",
            "DEVELOPMENT",
            "ALPHA",
            "BETA",
            "GA",
            "DEPRECATED",
            "DECOMMISSIONED"
          ]
        },
        "warnings": {
          "description": "Warning messages, e.g., a deprecation warning.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "environment": {
          "description": "The environment for the runtime.",
          "type": "string",
          "enum": [
            "ENVIRONMENT_UNSPECIFIED",
            "GEN_1",
            "GEN_2"
          ]
        },
        "deprecationDate": {
          "description": "Deprecation date for the runtime.",
          "$ref": "#/definitions/cloudfunctions:v2:Date"
        },
        "decommissionDate": {
          "description": "Decommission date for the runtime.",
          "$ref": "#/definitions/cloudfunctions:v2:Date"
        }
      },
      "$id": "#/definitions/cloudfunctions:v2:Runtime"
    },
    "cloudfunctions:v2:Date": {
      "description": "Represents a whole or partial calendar date, such as a birthday. The time of day and time zone are either specified elsewhere or are insignificant. The date is relative to the Gregorian Calendar. This can represent one of the following: * A full date, with non-zero year, month, and day values. * A month and day, with a zero year (for example, an anniversary). * A year on its own, with a zero month and a zero day. * A year and month, with a zero day (for example, a credit card expiration date). Related types: * google.type.TimeOfDay * google.type.DateTime * google.protobuf.Timestamp",
      "type": "object",
      "properties": {
        "year": {
          "description": "Year of the date. Must be from 1 to 9999, or 0 to specify a date without a year.",
          "type": "integer",
          "format": "int32"
        },
        "month": {
          "description": "Month of a year. Must be from 1 to 12, or 0 to specify a year without a month and day.",
          "type": "integer",
          "format": "int32"
        },
        "day": {
          "description": "Day of a month. Must be from 1 to 31 and valid for the year and month, or 0 to specify a year by itself or a year and month where the day isn't significant.",
          "type": "integer",
          "format": "int32"
        }
      },
      "$id": "#/definitions/cloudfunctions:v2:Date"
    },
    "cloudfunctions:v2:ListLocationsResponse": {
      "description": "The response message for Locations.ListLocations.",
      "type": "object",
      "properties": {
        "locations": {
          "description": "A list of locations that matches the specified filter in the request.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/cloudfunctions:v2:Location"
          }
        },
        "nextPageToken": {
          "description": "The standard List next-page token.",
          "type": "string"
        }
      },
      "$id": "#/definitions/cloudfunctions:v2:ListLocationsResponse"
    },
    "cloudfunctions:v2:Location": {
      "description": "A resource that represents a Google Cloud location.",
      "type": "object",
      "properties": {
        "name": {
          "description": "Resource name for the location, which may vary between implementations. For example: `\"projects/example-project/locations/us-east1\"`",
          "type": "string"
        },
        "locationId": {
          "description": "The canonical id for this location. For example: `\"us-east1\"`.",
          "type": "string"
        },
        "displayName": {
          "description": "The friendly name for this location, typically a nearby city name. For example, \"Tokyo\".",
          "type": "string"
        },
        "labels": {
          "description": "Cross-service attributes for the location. For example {\"cloud.googleapis.com/region\": \"us-east1\"}",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "metadata": {
          "description": "Service-specific metadata. For example the available capacity at the given location.",
          "type": "object",
          "additionalProperties": {
            "type": "object",
            "description": "Properties of the object. Contains field @type with type URL."
          }
        }
      },
      "$id": "#/definitions/cloudfunctions:v2:Location"
    },
    "cloudfunctions:v2:OperationMetadataV1": {
      "description": "Metadata describing an Operation",
      "type": "object",
      "properties": {
        "target": {
          "description": "Target of the operation - for example `projects/project-1/locations/region-1/functions/function-1`",
          "type": "string"
        },
        "type": {
          "description": "Type of operation.",
          "type": "string",
          "enum": [
            "OPERATION_UNSPECIFIED",
            "CREATE_FUNCTION",
            "UPDATE_FUNCTION",
            "DELETE_FUNCTION"
          ]
        },
        "request": {
          "description": "The original request that started the operation.",
          "type": "object",
          "additionalProperties": {
            "type": "object",
            "description": "Properties of the object. Contains field @type with type URL."
          }
        },
        "versionId": {
          "description": "Version id of the function created or updated by an API call. This field is only populated for Create and Update operations.",
          "type": "string",
          "format": "int64"
        },
        "updateTime": {
          "description": "The last update timestamp of the operation.",
          "type": "string",
          "format": "date-time"
        },
        "buildId": {
          "description": "The Cloud Build ID of the function created or updated by an API call. This field is only populated for Create and Update operations.",
          "type": "string"
        },
        "sourceToken": {
          "description": "An identifier for Firebase function sources. Disclaimer: This field is only supported for Firebase function deployments.",
          "type": "string"
        },
        "buildName": {
          "description": "The Cloud Build Name of the function deployment. This field is only populated for Create and Update operations. `projects//locations//builds/`.",
          "type": "string"
        }
      },
      "$id": "#/definitions/cloudfunctions:v2:OperationMetadataV1"
    },
    "cloudfunctions:v2:GoogleCloudFunctionsV2alphaOperationMetadata": {
      "description": "Represents the metadata of the long-running operation.",
      "type": "object",
      "properties": {
        "createTime": {
          "description": "The time the operation was created.",
          "type": "string",
          "format": "date-time"
        },
        "endTime": {
          "description": "The time the operation finished running.",
          "type": "string",
          "format": "date-time"
        },
        "target": {
          "description": "Server-defined resource path for the target of the operation.",
          "type": "string"
        },
        "verb": {
          "description": "Name of the verb executed by the operation.",
          "type": "string"
        },
        "statusDetail": {
          "description": "Human-readable status of the operation, if any.",
          "type": "string"
        },
        "cancelRequested": {
          "description": "Identifies whether the user has requested cancellation of the operation. Operations that have successfully been cancelled have google.longrunning.Operation.error value with a google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`.",
          "type": "boolean"
        },
        "apiVersion": {
          "description": "API version used to start the operation.",
          "type": "string"
        },
        "requestResource": {
          "description": "The original request that started the operation.",
          "type": "object",
          "additionalProperties": {
            "type": "object",
            "description": "Properties of the object. Contains field @type with type URL."
          }
        },
        "stages": {
          "description": "Mechanism for reporting in-progress stages",
          "type": "array",
          "items": {
            "$ref": "#/definitions/cloudfunctions:v2:GoogleCloudFunctionsV2alphaStage"
          }
        },
        "sourceToken": {
          "description": "An identifier for Firebase function sources. Disclaimer: This field is only supported for Firebase function deployments.",
          "type": "string"
        }
      },
      "$id": "#/definitions/cloudfunctions:v2:GoogleCloudFunctionsV2alphaOperationMetadata"
    },
    "cloudfunctions:v2:GoogleCloudFunctionsV2alphaStage": {
      "description": "Each Stage of the deployment process",
      "type": "object",
      "properties": {
        "name": {
          "description": "Name of the Stage. This will be unique for each Stage.",
          "type": "string",
          "enum": [
            "NAME_UNSPECIFIED",
            "ARTIFACT_REGISTRY",
            "BUILD",
            "SERVICE",
            "TRIGGER",
            "SERVICE_ROLLBACK",
            "TRIGGER_ROLLBACK"
          ]
        },
        "message": {
          "description": "Message describing the Stage",
          "type": "string"
        },
        "state": {
          "description": "Current state of the Stage",
          "type": "string",
          "enum": [
            "STATE_UNSPECIFIED",
            "NOT_STARTED",
            "IN_PROGRESS",
            "COMPLETE"
          ]
        },
        "resource": {
          "description": "Resource of the Stage",
          "type": "string"
        },
        "resourceUri": {
          "description": "Link to the current Stage resource",
          "type": "string"
        },
        "stateMessages": {
          "description": "State messages from the current Stage.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/cloudfunctions:v2:GoogleCloudFunctionsV2alphaStateMessage"
          }
        }
      },
      "$id": "#/definitions/cloudfunctions:v2:GoogleCloudFunctionsV2alphaStage"
    },
    "cloudfunctions:v2:GoogleCloudFunctionsV2alphaStateMessage": {
      "description": "Informational messages about the state of the Cloud Function or Operation.",
      "type": "object",
      "properties": {
        "severity": {
          "description": "Severity of the state message.",
          "type": "string",
          "enum": [
            "SEVERITY_UNSPECIFIED",
            "ERROR",
            "WARNING",
            "INFO"
          ]
        },
        "type": {
          "description": "One-word CamelCase type of the state message.",
          "type": "string"
        },
        "message": {
          "description": "The message.",
          "type": "string"
        }
      },
      "$id": "#/definitions/cloudfunctions:v2:GoogleCloudFunctionsV2alphaStateMessage"
    },
    "cloudfunctions:v2:GoogleCloudFunctionsV2betaOperationMetadata": {
      "description": "Represents the metadata of the long-running operation.",
      "type": "object",
      "properties": {
        "createTime": {
          "description": "The time the operation was created.",
          "type": "string",
          "format": "date-time"
        },
        "endTime": {
          "description": "The time the operation finished running.",
          "type": "string",
          "format": "date-time"
        },
        "target": {
          "description": "Server-defined resource path for the target of the operation.",
          "type": "string"
        },
        "verb": {
          "description": "Name of the verb executed by the operation.",
          "type": "string"
        },
        "statusDetail": {
          "description": "Human-readable status of the operation, if any.",
          "type": "string"
        },
        "cancelRequested": {
          "description": "Identifies whether the user has requested cancellation of the operation. Operations that have successfully been cancelled have google.longrunning.Operation.error value with a google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`.",
          "type": "boolean"
        },
        "apiVersion": {
          "description": "API version used to start the operation.",
          "type": "string"
        },
        "requestResource": {
          "description": "The original request that started the operation.",
          "type": "object",
          "additionalProperties": {
            "type": "object",
            "description": "Properties of the object. Contains field @type with type URL."
          }
        },
        "stages": {
          "description": "Mechanism for reporting in-progress stages",
          "type": "array",
          "items": {
            "$ref": "#/definitions/cloudfunctions:v2:GoogleCloudFunctionsV2betaStage"
          }
        },
        "sourceToken": {
          "description": "An identifier for Firebase function sources. Disclaimer: This field is only supported for Firebase function deployments.",
          "type": "string"
        }
      },
      "$id": "#/definitions/cloudfunctions:v2:GoogleCloudFunctionsV2betaOperationMetadata"
    },
    "cloudfunctions:v2:GoogleCloudFunctionsV2betaStage": {
      "description": "Each Stage of the deployment process",
      "type": "object",
      "properties": {
        "name": {
          "description": "Name of the Stage. This will be unique for each Stage.",
          "type": "string",
          "enum": [
            "NAME_UNSPECIFIED",
            "ARTIFACT_REGISTRY",
            "BUILD",
            "SERVICE",
            "TRIGGER",
            "SERVICE_ROLLBACK",
            "TRIGGER_ROLLBACK"
          ]
        },
        "message": {
          "description": "Message describing the Stage",
          "type": "string"
        },
        "state": {
          "description": "Current state of the Stage",
          "type": "string",
          "enum": [
            "STATE_UNSPECIFIED",
            "NOT_STARTED",
            "IN_PROGRESS",
            "COMPLETE"
          ]
        },
        "resource": {
          "description": "Resource of the Stage",
          "type": "string"
        },
        "resourceUri": {
          "description": "Link to the current Stage resource",
          "type": "string"
        },
        "stateMessages": {
          "description": "State messages from the current Stage.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/cloudfunctions:v2:GoogleCloudFunctionsV2betaStateMessage"
          }
        }
      },
      "$id": "#/definitions/cloudfunctions:v2:GoogleCloudFunctionsV2betaStage"
    },
    "cloudfunctions:v2:GoogleCloudFunctionsV2betaStateMessage": {
      "description": "Informational messages about the state of the Cloud Function or Operation.",
      "type": "object",
      "properties": {
        "severity": {
          "description": "Severity of the state message.",
          "type": "string",
          "enum": [
            "SEVERITY_UNSPECIFIED",
            "ERROR",
            "WARNING",
            "INFO"
          ]
        },
        "type": {
          "description": "One-word CamelCase type of the state message.",
          "type": "string"
        },
        "message": {
          "description": "The message.",
          "type": "string"
        }
      },
      "$id": "#/definitions/cloudfunctions:v2:GoogleCloudFunctionsV2betaStateMessage"
    },
    "cloudfunctions:v2:GoogleCloudFunctionsV2OperationMetadata": {
      "description": "Represents the metadata of the long-running operation.",
      "type": "object",
      "properties": {
        "createTime": {
          "description": "The time the operation was created.",
          "type": "string",
          "format": "date-time"
        },
        "endTime": {
          "description": "The time the operation finished running.",
          "type": "string",
          "format": "date-time"
        },
        "target": {
          "description": "Server-defined resource path for the target of the operation.",
          "type": "string"
        },
        "verb": {
          "description": "Name of the verb executed by the operation.",
          "type": "string"
        },
        "statusDetail": {
          "description": "Human-readable status of the operation, if any.",
          "type": "string"
        },
        "cancelRequested": {
          "description": "Identifies whether the user has requested cancellation of the operation. Operations that have successfully been cancelled have google.longrunning.Operation.error value with a google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`.",
          "type": "boolean"
        },
        "apiVersion": {
          "description": "API version used to start the operation.",
          "type": "string"
        },
        "requestResource": {
          "description": "The original request that started the operation.",
          "type": "object",
          "additionalProperties": {
            "type": "object",
            "description": "Properties of the object. Contains field @type with type URL."
          }
        },
        "stages": {
          "description": "Mechanism for reporting in-progress stages",
          "type": "array",
          "items": {
            "$ref": "#/definitions/cloudfunctions:v2:GoogleCloudFunctionsV2Stage"
          }
        },
        "sourceToken": {
          "description": "An identifier for Firebase function sources. Disclaimer: This field is only supported for Firebase function deployments.",
          "type": "string"
        }
      },
      "$id": "#/definitions/cloudfunctions:v2:GoogleCloudFunctionsV2OperationMetadata"
    },
    "cloudfunctions:v2:GoogleCloudFunctionsV2Stage": {
      "description": "Each Stage of the deployment process",
      "type": "object",
      "properties": {
        "name": {
          "description": "Name of the Stage. This will be unique for each Stage.",
          "type": "string",
          "enum": [
            "NAME_UNSPECIFIED",
            "ARTIFACT_REGISTRY",
            "BUILD",
            "SERVICE",
            "TRIGGER",
            "SERVICE_ROLLBACK",
            "TRIGGER_ROLLBACK"
          ]
        },
        "message": {
          "description": "Message describing the Stage",
          "type": "string"
        },
        "state": {
          "description": "Current state of the Stage",
          "type": "string",
          "enum": [
            "STATE_UNSPECIFIED",
            "NOT_STARTED",
            "IN_PROGRESS",
            "COMPLETE"
          ]
        },
        "resource": {
          "description": "Resource of the Stage",
          "type": "string"
        },
        "resourceUri": {
          "description": "Link to the current Stage resource",
          "type": "string"
        },
        "stateMessages": {
          "description": "State messages from the current Stage.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/cloudfunctions:v2:GoogleCloudFunctionsV2StateMessage"
          }
        }
      },
      "$id": "#/definitions/cloudfunctions:v2:GoogleCloudFunctionsV2Stage"
    },
    "cloudfunctions:v2:GoogleCloudFunctionsV2alphaLocationMetadata": {
      "description": "Extra GCF specific location information.",
      "type": "object",
      "properties": {
        "environments": {
          "description": "The Cloud Function environments this location supports.",
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "ENVIRONMENT_UNSPECIFIED",
              "GEN_1",
              "GEN_2"
            ]
          }
        }
      },
      "$id": "#/definitions/cloudfunctions:v2:GoogleCloudFunctionsV2alphaLocationMetadata"
    },
    "cloudfunctions:v2:GoogleCloudFunctionsV2betaLocationMetadata": {
      "description": "Extra GCF specific location information.",
      "type": "object",
      "properties": {
        "environments": {
          "description": "The Cloud Function environments this location supports.",
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "ENVIRONMENT_UNSPECIFIED",
              "GEN_1",
              "GEN_2"
            ]
          }
        }
      },
      "$id": "#/definitions/cloudfunctions:v2:GoogleCloudFunctionsV2betaLocationMetadata"
    },
    "cloudfunctions:v2:GoogleCloudFunctionsV2LocationMetadata": {
      "description": "Extra GCF specific location information.",
      "type": "object",
      "properties": {
        "environments": {
          "description": "The Cloud Function environments this location supports.",
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "ENVIRONMENT_UNSPECIFIED",
              "GEN_1",
              "GEN_2"
            ]
          }
        }
      },
      "$id": "#/definitions/cloudfunctions:v2:GoogleCloudFunctionsV2LocationMetadata"
    },
    "run:v2:GoogleLongrunningListOperationsResponse": {
      "description": "The response message for Operations.ListOperations.",
      "type": "object",
      "properties": {
        "operations": {
          "description": "A list of operations that matches the specified filter in the request.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/run:v2:GoogleLongrunningOperation"
          }
        },
        "nextPageToken": {
          "description": "The standard List next-page token.",
          "type": "string"
        }
      },
      "$id": "#/definitions/run:v2:GoogleLongrunningListOperationsResponse"
    },
    "run:v2:GoogleLongrunningOperation": {
      "description": "This resource represents a long-running operation that is the result of a network API call.",
      "type": "object",
      "properties": {
        "name": {
          "description": "The server-assigned name, which is only unique within the same service that originally returns it. If you use the default HTTP mapping, the `name` should be a resource name ending with `operations/{unique_id}`.",
          "type": "string"
        },
        "metadata": {
          "description": "Service-specific metadata associated with the operation. It typically contains progress information and common metadata such as create time. Some services might not provide such metadata. Any method that returns a long-running operation should document the metadata type, if any.",
          "type": "object",
          "additionalProperties": {
            "type": "object",
            "description": "Properties of the object. Contains field @type with type URL."
          }
        },
        "done": {
          "description": "If the value is `false`, it means the operation is still in progress. If `true`, the operation is completed, and either `error` or `response` is available.",
          "type": "boolean"
        },
        "error": {
          "description": "The error result of the operation in case of failure or cancellation.",
          "$ref": "#/definitions/run:v2:GoogleRpcStatus"
        },
        "response": {
          "description": "The normal, successful response of the operation. If the original method returns no data on success, such as `Delete`, the response is `google.protobuf.Empty`. If the original method is standard `Get`/`Create`/`Update`, the response should be the resource. For other methods, the response should have the type `XxxResponse`, where `Xxx` is the original method name. For example, if the original method name is `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`.",
          "type": "object",
          "additionalProperties": {
            "type": "object",
            "description": "Properties of the object. Contains field @type with type URL."
          }
        }
      },
      "$id": "#/definitions/run:v2:GoogleLongrunningOperation"
    },
    "run:v2:GoogleRpcStatus": {
      "description": "The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).",
      "type": "object",
      "properties": {
        "code": {
          "description": "The status code, which should be an enum value of google.rpc.Code.",
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "description": "A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client.",
          "type": "string"
        },
        "details": {
          "description": "A list of messages that carry the error details. There is a common set of message types for APIs to use.",
          "type": "array",
          "items": {
            "type": "object",
            "additionalProperties": {
              "type": "object",
              "description": "Properties of the object. Contains field @type with type URL."
            }
          }
        }
      },
      "$id": "#/definitions/run:v2:GoogleRpcStatus"
    },
    "run:v2:GoogleProtobufEmpty": {
      "description": "A generic empty message that you can re-use to avoid defining duplicated empty messages in your APIs. A typical example is to use it as the request or the response type of an API method. For instance: service Foo { rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty); }",
      "type": "object",
      "properties": {},
      "$id": "#/definitions/run:v2:GoogleProtobufEmpty"
    },
    "run:v2:GoogleLongrunningWaitOperationRequest": {
      "description": "The request message for Operations.WaitOperation.",
      "type": "object",
      "properties": {
        "timeout": {
          "description": "The maximum duration to wait before timing out. If left blank, the wait will be at most the time permitted by the underlying HTTP/RPC protocol. If RPC context deadline is also specified, the shorter one will be used.",
          "type": "string",
          "format": "duration"
        }
      },
      "$id": "#/definitions/run:v2:GoogleLongrunningWaitOperationRequest"
    },
    "run:v2:GoogleCloudRunV2Execution": {
      "description": "Execution represents the configuration of a single execution. A execution an immutable resource that references a container image which is run to completion.",
      "type": "object",
      "properties": {
        "name": {
          "description": "Output only. The unique name of this Execution.",
          "readOnly": true,
          "type": "string"
        },
        "uid": {
          "description": "Output only. Server assigned unique identifier for the Execution. The value is a UUID4 string and guaranteed to remain unchanged until the resource is deleted.",
          "readOnly": true,
          "type": "string"
        },
        "generation": {
          "description": "Output only. A number that monotonically increases every time the user modifies the desired state.",
          "readOnly": true,
          "type": "string",
          "format": "int64"
        },
        "labels": {
          "description": "Output only. Unstructured key value map that can be used to organize and categorize objects. User-provided labels are shared with Google's billing system, so they can be used to filter, or break down billing charges by team, component, environment, state, etc. For more information, visit https://cloud.google.com/resource-manager/docs/creating-managing-labels or https://cloud.google.com/run/docs/configuring/labels",
          "readOnly": true,
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "annotations": {
          "description": "Output only. Unstructured key value map that may be set by external tools to store and arbitrary metadata. They are not queryable and should be preserved when modifying objects.",
          "readOnly": true,
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "createTime": {
          "description": "Output only. Represents time when the execution was acknowledged by the execution controller. It is not guaranteed to be set in happens-before order across separate operations.",
          "readOnly": true,
          "type": "string",
          "format": "date-time"
        },
        "startTime": {
          "description": "Output only. Represents time when the execution started to run. It is not guaranteed to be set in happens-before order across separate operations.",
          "readOnly": true,
          "type": "string",
          "format": "date-time"
        },
        "completionTime": {
          "description": "Output only. Represents time when the execution was completed. It is not guaranteed to be set in happens-before order across separate operations.",
          "readOnly": true,
          "type": "string",
          "format": "date-time"
        },
        "updateTime": {
          "description": "Output only. The last-modified time.",
          "readOnly": true,
          "type": "string",
          "format": "date-time"
        },
        "deleteTime": {
          "description": "Output only. For a deleted resource, the deletion time. It is only populated as a response to a Delete request.",
          "readOnly": true,
          "type": "string",
          "format": "date-time"
        },
        "expireTime": {
          "description": "Output only. For a deleted resource, the time after which it will be permamently deleted. It is only populated as a response to a Delete request.",
          "readOnly": true,
          "type": "string",
          "format": "date-time"
        },
        "launchStage": {
          "description": "The least stable launch stage needed to create this resource, as defined by [Google Cloud Platform Launch Stages](https://cloud.google.com/terms/launch-stages). Cloud Run supports `ALPHA`, `BETA`, and `GA`. Note that this value might not be what was used as input. For example, if ALPHA was provided as input in the parent resource, but only BETA and GA-level features are were, this field will be BETA.",
          "type": "string",
          "enum": [
            "LAUNCH_STAGE_UNSPECIFIED",
            "UNIMPLEMENTED",
            "PRELAUNCH",
            "EARLY_ACCESS",
            "ALPHA",
            "BETA",
            "GA",
            "DEPRECATED"
          ]
        },
        "job": {
          "description": "Output only. The name of the parent Job.",
          "readOnly": true,
          "type": "string"
        },
        "parallelism": {
          "description": "Output only. Specifies the maximum desired number of tasks the execution should run at any given time. Must be <= task_count. The actual number of tasks running in steady state will be less than this number when ((.spec.task_count - .status.successful) < .spec.parallelism), i.e. when the work left to do is less than max parallelism.",
          "readOnly": true,
          "type": "integer",
          "format": "int32"
        },
        "taskCount": {
          "description": "Output only. Specifies the desired number of tasks the execution should run. Setting to 1 means that parallelism is limited to 1 and the success of that task signals the success of the execution.",
          "readOnly": true,
          "type": "integer",
          "format": "int32"
        },
        "template": {
          "description": "Output only. The template used to create tasks for this execution.",
          "readOnly": true,
          "$ref": "#/definitions/run:v2:GoogleCloudRunV2TaskTemplate"
        },
        "reconciling": {
          "description": "Output only. Indicates whether the resource's reconciliation is still in progress. See comments in `Job.reconciling` for additional information on reconciliation process in Cloud Run.",
          "readOnly": true,
          "type": "boolean"
        },
        "conditions": {
          "description": "Output only. The Condition of this Execution, containing its readiness status, and detailed error information in case it did not reach the desired state.",
          "readOnly": true,
          "type": "array",
          "items": {
            "$ref": "#/definitions/run:v2:GoogleCloudRunV2Condition"
          }
        },
        "observedGeneration": {
          "description": "Output only. The generation of this Execution. See comments in `reconciling` for additional information on reconciliation process in Cloud Run.",
          "readOnly": true,
          "type": "string",
          "format": "int64"
        },
        "runningCount": {
          "description": "Output only. The number of actively running tasks.",
          "readOnly": true,
          "type": "integer",
          "format": "int32"
        },
        "succeededCount": {
          "description": "Output only. The number of tasks which reached phase Succeeded.",
          "readOnly": true,
          "type": "integer",
          "format": "int32"
        },
        "failedCount": {
          "description": "Output only. The number of tasks which reached phase Failed.",
          "readOnly": true,
          "type": "integer",
          "format": "int32"
        },
        "cancelledCount": {
          "description": "Output only. The number of tasks which reached phase Cancelled.",
          "readOnly": true,
          "type": "integer",
          "format": "int32"
        },
        "retriedCount": {
          "description": "Output only. The number of tasks which have retried at least once.",
          "readOnly": true,
          "type": "integer",
          "format": "int32"
        },
        "logUri": {
          "description": "Output only. URI where logs for this execution can be found in Cloud Console.",
          "readOnly": true,
          "type": "string"
        },
        "satisfiesPzs": {
          "description": "Output only. Reserved for future use.",
          "readOnly": true,
          "type": "boolean"
        },
        "etag": {
          "description": "Output only. A system-generated fingerprint for this version of the resource. May be used to detect modification conflict during updates.",
          "readOnly": true,
          "type": "string"
        }
      },
      "$id": "#/definitions/run:v2:GoogleCloudRunV2Execution"
    },
    "run:v2:GoogleCloudRunV2TaskTemplate": {
      "description": "TaskTemplate describes the data a task should have when created from a template.",
      "type": "object",
      "properties": {
        "containers": {
          "description": "Holds the single container that defines the unit of execution for this task.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/run:v2:GoogleCloudRunV2Container"
          }
        },
        "volumes": {
          "description": "A list of Volumes to make available to containers.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/run:v2:GoogleCloudRunV2Volume"
          }
        },
        "maxRetries": {
          "description": "Number of retries allowed per Task, before marking this Task failed. Defaults to 3.",
          "type": "integer",
          "format": "int32"
        },
        "timeout": {
          "description": "Max allowed time duration the Task may be active before the system will actively try to mark it failed and kill associated containers. This applies per attempt of a task, meaning each retry can run for the full timeout. Defaults to 600 seconds.",
          "type": "string",
          "format": "duration"
        },
        "serviceAccount": {
          "description": "Email address of the IAM service account associated with the Task of a Job. The service account represents the identity of the running task, and determines what permissions the task has. If not provided, the task will use the project's default service account.",
          "type": "string"
        },
        "executionEnvironment": {
          "description": "The execution environment being used to host this Task.",
          "type": "string",
          "enum": [
            "EXECUTION_ENVIRONMENT_UNSPECIFIED",
            "EXECUTION_ENVIRONMENT_GEN1",
            "EXECUTION_ENVIRONMENT_GEN2"
          ]
        },
        "encryptionKey": {
          "description": "A reference to a customer managed encryption key (CMEK) to use to encrypt this container image. For more information, go to https://cloud.google.com/run/docs/securing/using-cmek",
          "type": "string"
        },
        "vpcAccess": {
          "description": "VPC Access configuration to use for this Task. For more information, visit https://cloud.google.com/run/docs/configuring/connecting-vpc.",
          "$ref": "#/definitions/run:v2:GoogleCloudRunV2VpcAccess"
        }
      },
      "$id": "#/definitions/run:v2:GoogleCloudRunV2TaskTemplate"
    },
    "run:v2:GoogleCloudRunV2Container": {
      "description": "A single application container. This specifies both the container to run, the command to run in the container and the arguments to supply to it. Note that additional arguments can be supplied by the system to the container at runtime.",
      "type": "object",
      "properties": {
        "name": {
          "description": "Name of the container specified as a DNS_LABEL (RFC 1123).",
          "type": "string"
        },
        "image": {
          "description": "Required. Name of the container image in Dockerhub, Google Artifact Registry, or Google Container Registry. If the host is not provided, Dockerhub is assumed.",
          "type": "string"
        },
        "command": {
          "description": "Entrypoint array. Not executed within a shell. The docker image's ENTRYPOINT is used if this is not provided.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "args": {
          "description": "Arguments to the entrypoint. The docker image's CMD is used if this is not provided.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "env": {
          "description": "List of environment variables to set in the container.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/run:v2:GoogleCloudRunV2EnvVar"
          }
        },
        "resources": {
          "description": "Compute Resource requirements by this container.",
          "$ref": "#/definitions/run:v2:GoogleCloudRunV2ResourceRequirements"
        },
        "ports": {
          "description": "List of ports to expose from the container. Only a single port can be specified. The specified ports must be listening on all interfaces (0.0.0.0) within the container to be accessible. If omitted, a port number will be chosen and passed to the container through the PORT environment variable for the container to listen on.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/run:v2:GoogleCloudRunV2ContainerPort"
          }
        },
        "volumeMounts": {
          "description": "Volume to mount into the container's filesystem.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/run:v2:GoogleCloudRunV2VolumeMount"
          }
        },
        "workingDir": {
          "description": "Container's working directory. If not specified, the container runtime's default will be used, which might be configured in the container image.",
          "type": "string"
        },
        "livenessProbe": {
          "description": "Periodic probe of container liveness. Container will be restarted if the probe fails.",
          "$ref": "#/definitions/run:v2:GoogleCloudRunV2Probe"
        },
        "startupProbe": {
          "description": "Startup probe of application within the container. All other probes are disabled if a startup probe is provided, until it succeeds. Container will not be added to service endpoints if the probe fails.",
          "$ref": "#/definitions/run:v2:GoogleCloudRunV2Probe"
        },
        "dependsOn": {
          "description": "Names of the containers that must start before this container.",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "$id": "#/definitions/run:v2:GoogleCloudRunV2Container"
    },
    "run:v2:GoogleCloudRunV2EnvVar": {
      "description": "EnvVar represents an environment variable present in a Container.",
      "type": "object",
      "properties": {
        "name": {
          "description": "Required. Name of the environment variable. Must be a C_IDENTIFIER, and must not exceed 32768 characters.",
          "type": "string"
        },
        "value": {
          "description": "Variable references $(VAR_NAME) are expanded using the previous defined environment variables in the container and any route environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to \"\", and the maximum length is 32768 bytes.",
          "type": "string"
        },
        "valueSource": {
          "description": "Source for the environment variable's value.",
          "$ref": "#/definitions/run:v2:GoogleCloudRunV2EnvVarSource"
        }
      },
      "$id": "#/definitions/run:v2:GoogleCloudRunV2EnvVar"
    },
    "run:v2:GoogleCloudRunV2EnvVarSource": {
      "description": "EnvVarSource represents a source for the value of an EnvVar.",
      "type": "object",
      "properties": {
        "secretKeyRef": {
          "description": "Selects a secret and a specific version from Cloud Secret Manager.",
          "$ref": "#/definitions/run:v2:GoogleCloudRunV2SecretKeySelector"
        }
      },
      "$id": "#/definitions/run:v2:GoogleCloudRunV2EnvVarSource"
    },
    "run:v2:GoogleCloudRunV2SecretKeySelector": {
      "description": "SecretEnvVarSource represents a source for the value of an EnvVar.",
      "type": "object",
      "properties": {
        "secret": {
          "description": "Required. The name of the secret in Cloud Secret Manager. Format: {secret_name} if the secret is in the same project. projects/{project}/secrets/{secret_name} if the secret is in a different project.",
          "type": "string"
        },
        "version": {
          "description": "The Cloud Secret Manager secret version. Can be 'latest' for the latest version, an integer for a specific version, or a version alias.",
          "type": "string"
        }
      },
      "$id": "#/definitions/run:v2:GoogleCloudRunV2SecretKeySelector"
    },
    "run:v2:GoogleCloudRunV2ResourceRequirements": {
      "description": "ResourceRequirements describes the compute resource requirements.",
      "type": "object",
      "properties": {
        "limits": {
          "description": "Only \u00b4memory\u00b4 and 'cpu' are supported. Notes: * The only supported values for CPU are '1', '2', '4', and '8'. Setting 4 CPU requires at least 2Gi of memory. For more information, go to https://cloud.google.com/run/docs/configuring/cpu. * For supported 'memory' values and syntax, go to https://cloud.google.com/run/docs/configuring/memory-limits",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "cpuIdle": {
          "description": "Determines whether CPU should be throttled or not outside of requests.",
          "type": "boolean"
        },
        "startupCpuBoost": {
          "description": "Determines whether CPU should be boosted on startup of a new container instance above the requested CPU threshold, this can help reduce cold-start latency.",
          "type": "boolean"
        }
      },
      "$id": "#/definitions/run:v2:GoogleCloudRunV2ResourceRequirements"
    },
    "run:v2:GoogleCloudRunV2ContainerPort": {
      "description": "ContainerPort represents a network port in a single container.",
      "type": "object",
      "properties": {
        "name": {
          "description": "If specified, used to specify which protocol to use. Allowed values are \"http1\" and \"h2c\".",
          "type": "string"
        },
        "containerPort": {
          "description": "Port number the container listens on. This must be a valid TCP port number, 0 < container_port < 65536.",
          "type": "integer",
          "format": "int32"
        }
      },
      "$id": "#/definitions/run:v2:GoogleCloudRunV2ContainerPort"
    },
    "run:v2:GoogleCloudRunV2VolumeMount": {
      "description": "VolumeMount describes a mounting of a Volume within a container.",
      "type": "object",
      "properties": {
        "name": {
          "description": "Required. This must match the Name of a Volume.",
          "type": "string"
        },
        "mountPath": {
          "description": "Required. Path within the container at which the volume should be mounted. Must not contain ':'. For Cloud SQL volumes, it can be left empty, or must otherwise be `/cloudsql`. All instances defined in the Volume will be available as `/cloudsql/[instance]`. For more information on Cloud SQL volumes, visit https://cloud.google.com/sql/docs/mysql/connect-run",
          "type": "string"
        }
      },
      "$id": "#/definitions/run:v2:GoogleCloudRunV2VolumeMount"
    },
    "run:v2:GoogleCloudRunV2Probe": {
      "description": "Probe describes a health check to be performed against a container to determine whether it is alive or ready to receive traffic.",
      "type": "object",
      "properties": {
        "initialDelaySeconds": {
          "description": "Number of seconds after the container has started before the probe is initiated. Defaults to 0 seconds. Minimum value is 0. Maximum value for liveness probe is 3600. Maximum value for startup probe is 240.",
          "type": "integer",
          "format": "int32"
        },
        "timeoutSeconds": {
          "description": "Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. Maximum value is 3600. Must be smaller than period_seconds.",
          "type": "integer",
          "format": "int32"
        },
        "periodSeconds": {
          "description": "How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1. Maximum value for liveness probe is 3600. Maximum value for startup probe is 240. Must be greater or equal than timeout_seconds.",
          "type": "integer",
          "format": "int32"
        },
        "failureThreshold": {
          "description": "Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.",
          "type": "integer",
          "format": "int32"
        },
        "httpGet": {
          "description": "HTTPGet specifies the http request to perform. Exactly one of httpGet, tcpSocket, or grpc must be specified.",
          "$ref": "#/definitions/run:v2:GoogleCloudRunV2HTTPGetAction"
        },
        "tcpSocket": {
          "description": "TCPSocket specifies an action involving a TCP port. Exactly one of httpGet, tcpSocket, or grpc must be specified.",
          "$ref": "#/definitions/run:v2:GoogleCloudRunV2TCPSocketAction"
        },
        "grpc": {
          "description": "GRPC specifies an action involving a gRPC port. Exactly one of httpGet, tcpSocket, or grpc must be specified.",
          "$ref": "#/definitions/run:v2:GoogleCloudRunV2GRPCAction"
        }
      },
      "$id": "#/definitions/run:v2:GoogleCloudRunV2Probe"
    },
    "run:v2:GoogleCloudRunV2HTTPGetAction": {
      "description": "HTTPGetAction describes an action based on HTTP Get requests.",
      "type": "object",
      "properties": {
        "path": {
          "description": "Path to access on the HTTP server. Defaults to '/'.",
          "type": "string"
        },
        "httpHeaders": {
          "description": "Custom headers to set in the request. HTTP allows repeated headers.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/run:v2:GoogleCloudRunV2HTTPHeader"
          }
        },
        "port": {
          "description": "Port number to access on the container. Must be in the range 1 to 65535. If not specified, defaults to the exposed port of the container, which is the value of container.ports[0].containerPort.",
          "type": "integer",
          "format": "int32"
        }
      },
      "$id": "#/definitions/run:v2:GoogleCloudRunV2HTTPGetAction"
    },
    "run:v2:GoogleCloudRunV2HTTPHeader": {
      "description": "HTTPHeader describes a custom header to be used in HTTP probes",
      "type": "object",
      "properties": {
        "name": {
          "description": "Required. The header field name",
          "type": "string"
        },
        "value": {
          "description": "The header field value",
          "type": "string"
        }
      },
      "$id": "#/definitions/run:v2:GoogleCloudRunV2HTTPHeader"
    },
    "run:v2:GoogleCloudRunV2TCPSocketAction": {
      "description": "TCPSocketAction describes an action based on opening a socket",
      "type": "object",
      "properties": {
        "port": {
          "description": "Port number to access on the container. Must be in the range 1 to 65535. If not specified, defaults to the exposed port of the container, which is the value of container.ports[0].containerPort.",
          "type": "integer",
          "format": "int32"
        }
      },
      "$id": "#/definitions/run:v2:GoogleCloudRunV2TCPSocketAction"
    },
    "run:v2:GoogleCloudRunV2GRPCAction": {
      "description": "GRPCAction describes an action involving a GRPC port.",
      "type": "object",
      "properties": {
        "port": {
          "description": "Port number of the gRPC service. Number must be in the range 1 to 65535. If not specified, defaults to the exposed port of the container, which is the value of container.ports[0].containerPort.",
          "type": "integer",
          "format": "int32"
        },
        "service": {
          "description": "Service is the name of the service to place in the gRPC HealthCheckRequest (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md ). If this is not specified, the default behavior is defined by gRPC.",
          "type": "string"
        }
      },
      "$id": "#/definitions/run:v2:GoogleCloudRunV2GRPCAction"
    },
    "run:v2:GoogleCloudRunV2Volume": {
      "description": "Volume represents a named volume in a container.",
      "type": "object",
      "properties": {
        "name": {
          "description": "Required. Volume's name.",
          "type": "string"
        },
        "secret": {
          "description": "Secret represents a secret that should populate this volume.",
          "$ref": "#/definitions/run:v2:GoogleCloudRunV2SecretVolumeSource"
        },
        "cloudSqlInstance": {
          "description": "For Cloud SQL volumes, contains the specific instances that should be mounted. Visit https://cloud.google.com/sql/docs/mysql/connect-run for more information on how to connect Cloud SQL and Cloud Run.",
          "$ref": "#/definitions/run:v2:GoogleCloudRunV2CloudSqlInstance"
        },
        "emptyDir": {
          "description": "Ephemeral storage used as a shared volume.",
          "$ref": "#/definitions/run:v2:GoogleCloudRunV2EmptyDirVolumeSource"
        }
      },
      "$id": "#/definitions/run:v2:GoogleCloudRunV2Volume"
    },
    "run:v2:GoogleCloudRunV2SecretVolumeSource": {
      "description": "The secret's value will be presented as the content of a file whose name is defined in the item path. If no items are defined, the name of the file is the secret.",
      "type": "object",
      "properties": {
        "secret": {
          "description": "Required. The name of the secret in Cloud Secret Manager. Format: {secret} if the secret is in the same project. projects/{project}/secrets/{secret} if the secret is in a different project.",
          "type": "string"
        },
        "items": {
          "description": "If unspecified, the volume will expose a file whose name is the secret, relative to VolumeMount.mount_path. If specified, the key will be used as the version to fetch from Cloud Secret Manager and the path will be the name of the file exposed in the volume. When items are defined, they must specify a path and a version.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/run:v2:GoogleCloudRunV2VersionToPath"
          }
        },
        "defaultMode": {
          "description": "Integer representation of mode bits to use on created files by default. Must be a value between 0000 and 0777 (octal), defaulting to 0444. Directories within the path are not affected by this setting. Notes * Internally, a umask of 0222 will be applied to any non-zero value. * This is an integer representation of the mode bits. So, the octal integer value should look exactly as the chmod numeric notation with a leading zero. Some examples: for chmod 777 (a=rwx), set to 0777 (octal) or 511 (base-10). For chmod 640 (u=rw,g=r), set to 0640 (octal) or 416 (base-10). For chmod 755 (u=rwx,g=rx,o=rx), set to 0755 (octal) or 493 (base-10). * This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set. This might be in conflict with other options that affect the file mode, like fsGroup, and as a result, other mode bits could be set.",
          "type": "integer",
          "format": "int32"
        }
      },
      "$id": "#/definitions/run:v2:GoogleCloudRunV2SecretVolumeSource"
    },
    "run:v2:GoogleCloudRunV2VersionToPath": {
      "description": "VersionToPath maps a specific version of a secret to a relative file to mount to, relative to VolumeMount's mount_path.",
      "type": "object",
      "properties": {
        "path": {
          "description": "Required. The relative path of the secret in the container.",
          "type": "string"
        },
        "version": {
          "description": "The Cloud Secret Manager secret version. Can be 'latest' for the latest value, or an integer or a secret alias for a specific version.",
          "type": "string"
        },
        "mode": {
          "description": "Integer octal mode bits to use on this file, must be a value between 01 and 0777 (octal). If 0 or not set, the Volume's default mode will be used. Notes * Internally, a umask of 0222 will be applied to any non-zero value. * This is an integer representation of the mode bits. So, the octal integer value should look exactly as the chmod numeric notation with a leading zero. Some examples: for chmod 777 (a=rwx), set to 0777 (octal) or 511 (base-10). For chmod 640 (u=rw,g=r), set to 0640 (octal) or 416 (base-10). For chmod 755 (u=rwx,g=rx,o=rx), set to 0755 (octal) or 493 (base-10). * This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.",
          "type": "integer",
          "format": "int32"
        }
      },
      "$id": "#/definitions/run:v2:GoogleCloudRunV2VersionToPath"
    },
    "run:v2:GoogleCloudRunV2CloudSqlInstance": {
      "description": "Represents a set of Cloud SQL instances. Each one will be available under /cloudsql/[instance]. Visit https://cloud.google.com/sql/docs/mysql/connect-run for more information on how to connect Cloud SQL and Cloud Run.",
      "type": "object",
      "properties": {
        "instances": {
          "description": "The Cloud SQL instance connection names, as can be found in https://console.cloud.google.com/sql/instances. Visit https://cloud.google.com/sql/docs/mysql/connect-run for more information on how to connect Cloud SQL and Cloud Run. Format: {project}:{location}:{instance}",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "$id": "#/definitions/run:v2:GoogleCloudRunV2CloudSqlInstance"
    },
    "run:v2:GoogleCloudRunV2EmptyDirVolumeSource": {
      "description": "In memory (tmpfs) ephemeral storage. It is ephemeral in the sense that when the sandbox is taken down, the data is destroyed with it (it does not persist across sandbox runs).",
      "type": "object",
      "properties": {
        "medium": {
          "description": "The medium on which the data is stored. Acceptable values today is only MEMORY or none. When none, the default will currently be backed by memory but could change over time. +optional",
          "type": "string",
          "enum": [
            "MEDIUM_UNSPECIFIED",
            "MEMORY"
          ]
        },
        "sizeLimit": {
          "description": "Limit on the storage usable by this EmptyDir volume. The size limit is also applicable for memory medium. The maximum usage on memory medium EmptyDir would be the minimum value between the SizeLimit specified here and the sum of memory limits of all containers. The default is nil which means that the limit is undefined. More info: https://cloud.google.com/run/docs/configuring/in-memory-volumes#configure-volume. Info in Kubernetes: https://kubernetes.io/docs/concepts/storage/volumes/#emptydir",
          "type": "string"
        }
      },
      "$id": "#/definitions/run:v2:GoogleCloudRunV2EmptyDirVolumeSource"
    },
    "run:v2:GoogleCloudRunV2VpcAccess": {
      "description": "VPC Access settings. For more information on creating a VPC Connector, visit https://cloud.google.com/vpc/docs/configure-serverless-vpc-access For information on how to configure Cloud Run with an existing VPC Connector, visit https://cloud.google.com/run/docs/configuring/connecting-vpc",
      "type": "object",
      "properties": {
        "connector": {
          "description": "VPC Access connector name. Format: projects/{project}/locations/{location}/connectors/{connector}, where {project} can be project id or number.",
          "type": "string"
        },
        "egress": {
          "description": "Traffic VPC egress settings. If not provided, it defaults to PRIVATE_RANGES_ONLY.",
          "type": "string",
          "enum": [
            "VPC_EGRESS_UNSPECIFIED",
            "ALL_TRAFFIC",
            "PRIVATE_RANGES_ONLY"
          ]
        },
        "networkInterfaces": {
          "description": "VPC network to access to. Currently only single network interface is supported.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/run:v2:GoogleCloudRunV2NetworkInterface"
          }
        }
      },
      "$id": "#/definitions/run:v2:GoogleCloudRunV2VpcAccess"
    },
    "run:v2:GoogleCloudRunV2NetworkInterface": {
      "description": "VPC network settings.",
      "type": "object",
      "properties": {
        "network": {
          "description": "The VPC network name to access to. Defaults to \"default\" network.",
          "type": "string"
        },
        "subnetwork": {
          "description": "The VPC subnetwork name to access to. Defaults to the same vaule of network.",
          "type": "string"
        },
        "tags": {
          "description": "Network tags applied to this VPC network.",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "$id": "#/definitions/run:v2:GoogleCloudRunV2NetworkInterface"
    },
    "run:v2:GoogleCloudRunV2Condition": {
      "description": "Defines a status condition for a resource.",
      "type": "object",
      "properties": {
        "type": {
          "description": "type is used to communicate the status of the reconciliation process. See also: https://github.com/knative/serving/blob/main/docs/spec/errors.md#error-conditions-and-reporting Types common to all resources include: * \"Ready\": True when the Resource is ready.",
          "type": "string"
        },
        "state": {
          "description": "State of the condition.",
          "type": "string",
          "enum": [
            "STATE_UNSPECIFIED",
            "CONDITION_PENDING",
            "CONDITION_RECONCILING",
            "CONDITION_FAILED",
            "CONDITION_SUCCEEDED"
          ]
        },
        "message": {
          "description": "Human readable message indicating details about the current status.",
          "type": "string"
        },
        "lastTransitionTime": {
          "description": "Last time the condition transitioned from one status to another.",
          "type": "string",
          "format": "date-time"
        },
        "severity": {
          "description": "How to interpret failures of this condition, one of Error, Warning, Info",
          "type": "string",
          "enum": [
            "SEVERITY_UNSPECIFIED",
            "ERROR",
            "WARNING",
            "INFO"
          ]
        },
        "reason": {
          "description": "A common (service-level) reason for this condition.",
          "type": "string",
          "enum": [
            "COMMON_REASON_UNDEFINED",
            "UNKNOWN",
            "REVISION_FAILED",
            "PROGRESS_DEADLINE_EXCEEDED",
            "CONTAINER_MISSING",
            "CONTAINER_PERMISSION_DENIED",
            "CONTAINER_IMAGE_UNAUTHORIZED",
            "CONTAINER_IMAGE_AUTHORIZATION_CHECK_FAILED",
            "ENCRYPTION_KEY_PERMISSION_DENIED",
            "ENCRYPTION_KEY_CHECK_FAILED",
            "SECRETS_ACCESS_CHECK_FAILED",
            "WAITING_FOR_OPERATION",
            "IMMEDIATE_RETRY",
            "POSTPONED_RETRY",
            "INTERNAL"
          ]
        },
        "revisionReason": {
          "description": "A reason for the revision condition.",
          "type": "string",
          "enum": [
            "REVISION_REASON_UNDEFINED",
            "PENDING",
            "RESERVE",
            "RETIRED",
            "RETIRING",
            "RECREATING",
            "HEALTH_CHECK_CONTAINER_ERROR",
            "CUSTOMIZED_PATH_RESPONSE_PENDING",
            "MIN_INSTANCES_NOT_PROVISIONED",
            "ACTIVE_REVISION_LIMIT_REACHED",
            "NO_DEPLOYMENT",
            "HEALTH_CHECK_SKIPPED",
            "MIN_INSTANCES_WARMING"
          ]
        },
        "executionReason": {
          "description": "A reason for the execution condition.",
          "type": "string",
          "enum": [
            "EXECUTION_REASON_UNDEFINED",
            "JOB_STATUS_SERVICE_POLLING_ERROR",
            "NON_ZERO_EXIT_CODE",
            "CANCELLED",
            "CANCELLING",
            "DELETED"
          ]
        }
      },
      "$id": "#/definitions/run:v2:GoogleCloudRunV2Condition"
    },
    "run:v2:GoogleCloudRunV2ListExecutionsResponse": {
      "description": "Response message containing a list of Executions.",
      "type": "object",
      "properties": {
        "executions": {
          "description": "The resulting list of Executions.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/run:v2:GoogleCloudRunV2Execution"
          }
        },
        "nextPageToken": {
          "description": "A token indicating there are more items than page_size. Use it in the next ListExecutions request to continue.",
          "type": "string"
        }
      },
      "$id": "#/definitions/run:v2:GoogleCloudRunV2ListExecutionsResponse"
    },
    "run:v2:GoogleCloudRunV2CancelExecutionRequest": {
      "description": "Request message for deleting an Execution.",
      "type": "object",
      "properties": {
        "validateOnly": {
          "description": "Indicates that the request should be validated without actually cancelling any resources.",
          "type": "boolean"
        },
        "etag": {
          "description": "A system-generated fingerprint for this version of the resource. This may be used to detect modification conflict during updates.",
          "type": "string"
        }
      },
      "$id": "#/definitions/run:v2:GoogleCloudRunV2CancelExecutionRequest"
    },
    "run:v2:GoogleCloudRunV2Job": {
      "description": "Job represents the configuration of a single job, which references a container image that is run to completion.",
      "type": "object",
      "properties": {
        "name": {
          "description": "The fully qualified name of this Job. Format: projects/{project}/locations/{location}/jobs/{job}",
          "type": "string"
        },
        "uid": {
          "description": "Output only. Server assigned unique identifier for the Execution. The value is a UUID4 string and guaranteed to remain unchanged until the resource is deleted.",
          "readOnly": true,
          "type": "string"
        },
        "generation": {
          "description": "Output only. A number that monotonically increases every time the user modifies the desired state.",
          "readOnly": true,
          "type": "string",
          "format": "int64"
        },
        "labels": {
          "description": "Unstructured key value map that can be used to organize and categorize objects. User-provided labels are shared with Google's billing system, so they can be used to filter, or break down billing charges by team, component, environment, state, etc. For more information, visit https://cloud.google.com/resource-manager/docs/creating-managing-labels or https://cloud.google.com/run/docs/configuring/labels. Cloud Run API v2 does not support labels with `run.googleapis.com`, `cloud.googleapis.com`, `serving.knative.dev`, or `autoscaling.knative.dev` namespaces, and they will be rejected. All system labels in v1 now have a corresponding field in v2 Job.",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "annotations": {
          "description": "Unstructured key value map that may be set by external tools to store and arbitrary metadata. They are not queryable and should be preserved when modifying objects. Cloud Run API v2 does not support annotations with `run.googleapis.com`, `cloud.googleapis.com`, `serving.knative.dev`, or `autoscaling.knative.dev` namespaces, and they will be rejected on new resources. All system annotations in v1 now have a corresponding field in v2 Job. This field follows Kubernetes annotations' namespacing, limits, and rules.",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "createTime": {
          "description": "Output only. The creation time.",
          "readOnly": true,
          "type": "string",
          "format": "date-time"
        },
        "updateTime": {
          "description": "Output only. The last-modified time.",
          "readOnly": true,
          "type": "string",
          "format": "date-time"
        },
        "deleteTime": {
          "description": "Output only. The deletion time.",
          "readOnly": true,
          "type": "string",
          "format": "date-time"
        },
        "expireTime": {
          "description": "Output only. For a deleted resource, the time after which it will be permamently deleted.",
          "readOnly": true,
          "type": "string",
          "format": "date-time"
        },
        "creator": {
          "description": "Output only. Email address of the authenticated creator.",
          "readOnly": true,
          "type": "string"
        },
        "lastModifier": {
          "description": "Output only. Email address of the last authenticated modifier.",
          "readOnly": true,
          "type": "string"
        },
        "client": {
          "description": "Arbitrary identifier for the API client.",
          "type": "string"
        },
        "clientVersion": {
          "description": "Arbitrary version identifier for the API client.",
          "type": "string"
        },
        "launchStage": {
          "description": "The launch stage as defined by [Google Cloud Platform Launch Stages](https://cloud.google.com/terms/launch-stages). Cloud Run supports `ALPHA`, `BETA`, and `GA`. If no value is specified, GA is assumed. Set the launch stage to a preview stage on input to allow use of preview features in that stage. On read (or output), describes whether the resource uses preview features. For example, if ALPHA is provided as input, but only BETA and GA-level features are used, this field will be BETA on output.",
          "type": "string",
          "enum": [
            "LAUNCH_STAGE_UNSPECIFIED",
            "UNIMPLEMENTED",
            "PRELAUNCH",
            "EARLY_ACCESS",
            "ALPHA",
            "BETA",
            "GA",
            "DEPRECATED"
          ]
        },
        "binaryAuthorization": {
          "description": "Settings for the Binary Authorization feature.",
          "$ref": "#/definitions/run:v2:GoogleCloudRunV2BinaryAuthorization"
        },
        "template": {
          "description": "Required. The template used to create executions for this Job.",
          "$ref": "#/definitions/run:v2:GoogleCloudRunV2ExecutionTemplate"
        },
        "observedGeneration": {
          "description": "Output only. The generation of this Job. See comments in `reconciling` for additional information on reconciliation process in Cloud Run.",
          "readOnly": true,
          "type": "string",
          "format": "int64"
        },
        "terminalCondition": {
          "description": "Output only. The Condition of this Job, containing its readiness status, and detailed error information in case it did not reach the desired state.",
          "readOnly": true,
          "$ref": "#/definitions/run:v2:GoogleCloudRunV2Condition"
        },
        "conditions": {
          "description": "Output only. The Conditions of all other associated sub-resources. They contain additional diagnostics information in case the Job does not reach its desired state. See comments in `reconciling` for additional information on reconciliation process in Cloud Run.",
          "readOnly": true,
          "type": "array",
          "items": {
            "$ref": "#/definitions/run:v2:GoogleCloudRunV2Condition"
          }
        },
        "executionCount": {
          "description": "Output only. Number of executions created for this job.",
          "readOnly": true,
          "type": "integer",
          "format": "int32"
        },
        "latestCreatedExecution": {
          "description": "Output only. Name of the last created execution.",
          "readOnly": true,
          "$ref": "#/definitions/run:v2:GoogleCloudRunV2ExecutionReference"
        },
        "reconciling": {
          "description": "Output only. Returns true if the Job is currently being acted upon by the system to bring it into the desired state. When a new Job is created, or an existing one is updated, Cloud Run will asynchronously perform all necessary steps to bring the Job to the desired state. This process is called reconciliation. While reconciliation is in process, `observed_generation` and `latest_succeeded_execution`, will have transient values that might mismatch the intended state: Once reconciliation is over (and this field is false), there are two possible outcomes: reconciliation succeeded and the state matches the Job, or there was an error, and reconciliation failed. This state can be found in `terminal_condition.state`. If reconciliation succeeded, the following fields will match: `observed_generation` and `generation`, `latest_succeeded_execution` and `latest_created_execution`. If reconciliation failed, `observed_generation` and `latest_succeeded_execution` will have the state of the last succeeded execution or empty for newly created Job. Additional information on the failure can be found in `terminal_condition` and `conditions`.",
          "readOnly": true,
          "type": "boolean"
        },
        "satisfiesPzs": {
          "description": "Output only. Reserved for future use.",
          "readOnly": true,
          "type": "boolean"
        },
        "etag": {
          "description": "Output only. A system-generated fingerprint for this version of the resource. May be used to detect modification conflict during updates.",
          "readOnly": true,
          "type": "string"
        }
      },
      "$id": "#/definitions/run:v2:GoogleCloudRunV2Job"
    },
    "run:v2:GoogleCloudRunV2BinaryAuthorization": {
      "description": "Settings for Binary Authorization feature.",
      "type": "object",
      "properties": {
        "useDefault": {
          "description": "If True, indicates to use the default project's binary authorization policy. If False, binary authorization will be disabled.",
          "type": "boolean"
        },
        "breakglassJustification": {
          "description": "If present, indicates to use Breakglass using this justification. If use_default is False, then it must be empty. For more information on breakglass, see https://cloud.google.com/binary-authorization/docs/using-breakglass",
          "type": "string"
        }
      },
      "$id": "#/definitions/run:v2:GoogleCloudRunV2BinaryAuthorization"
    },
    "run:v2:GoogleCloudRunV2ExecutionTemplate": {
      "description": "ExecutionTemplate describes the data an execution should have when created from a template.",
      "type": "object",
      "properties": {
        "labels": {
          "description": "Unstructured key value map that can be used to organize and categorize objects. User-provided labels are shared with Google's billing system, so they can be used to filter, or break down billing charges by team, component, environment, state, etc. For more information, visit https://cloud.google.com/resource-manager/docs/creating-managing-labels or https://cloud.google.com/run/docs/configuring/labels. Cloud Run API v2 does not support labels with `run.googleapis.com`, `cloud.googleapis.com`, `serving.knative.dev`, or `autoscaling.knative.dev` namespaces, and they will be rejected. All system labels in v1 now have a corresponding field in v2 ExecutionTemplate.",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "annotations": {
          "description": "Unstructured key value map that may be set by external tools to store and arbitrary metadata. They are not queryable and should be preserved when modifying objects. Cloud Run API v2 does not support annotations with `run.googleapis.com`, `cloud.googleapis.com`, `serving.knative.dev`, or `autoscaling.knative.dev` namespaces, and they will be rejected. All system annotations in v1 now have a corresponding field in v2 ExecutionTemplate. This field follows Kubernetes annotations' namespacing, limits, and rules.",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "parallelism": {
          "description": "Specifies the maximum desired number of tasks the execution should run at given time. Must be <= task_count. When the job is run, if this field is 0 or unset, the maximum possible value will be used for that execution. The actual number of tasks running in steady state will be less than this number when there are fewer tasks waiting to be completed remaining, i.e. when the work left to do is less than max parallelism.",
          "type": "integer",
          "format": "int32"
        },
        "taskCount": {
          "description": "Specifies the desired number of tasks the execution should run. Setting to 1 means that parallelism is limited to 1 and the success of that task signals the success of the execution. Defaults to 1.",
          "type": "integer",
          "format": "int32"
        },
        "template": {
          "description": "Required. Describes the task(s) that will be created when executing an execution.",
          "$ref": "#/definitions/run:v2:GoogleCloudRunV2TaskTemplate"
        }
      },
      "$id": "#/definitions/run:v2:GoogleCloudRunV2ExecutionTemplate"
    },
    "run:v2:GoogleCloudRunV2ExecutionReference": {
      "description": "Reference to an Execution. Use /Executions.GetExecution with the given name to get full execution including the latest status.",
      "type": "object",
      "properties": {
        "name": {
          "description": "Name of the execution.",
          "type": "string"
        },
        "createTime": {
          "description": "Creation timestamp of the execution.",
          "type": "string",
          "format": "date-time"
        },
        "completionTime": {
          "description": "Creation timestamp of the execution.",
          "type": "string",
          "format": "date-time"
        }
      },
      "$id": "#/definitions/run:v2:GoogleCloudRunV2ExecutionReference"
    },
    "run:v2:GoogleCloudRunV2ListJobsResponse": {
      "description": "Response message containing a list of Jobs.",
      "type": "object",
      "properties": {
        "jobs": {
          "description": "The resulting list of Jobs.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/run:v2:GoogleCloudRunV2Job"
          }
        },
        "nextPageToken": {
          "description": "A token indicating there are more items than page_size. Use it in the next ListJobs request to continue.",
          "type": "string"
        }
      },
      "$id": "#/definitions/run:v2:GoogleCloudRunV2ListJobsResponse"
    },
    "run:v2:GoogleCloudRunV2RunJobRequest": {
      "description": "Request message to create a new Execution of a Job.",
      "type": "object",
      "properties": {
        "validateOnly": {
          "description": "Indicates that the request should be validated without actually deleting any resources.",
          "type": "boolean"
        },
        "etag": {
          "description": "A system-generated fingerprint for this version of the resource. May be used to detect modification conflict during updates.",
          "type": "string"
        }
      },
      "$id": "#/definitions/run:v2:GoogleCloudRunV2RunJobRequest"
    },
    "run:v2:GoogleIamV1Policy": {
      "description": "An Identity and Access Management (IAM) policy, which specifies access controls for Google Cloud resources. A `Policy` is a collection of `bindings`. A `binding` binds one or more `members`, or principals, to a single `role`. Principals can be user accounts, service accounts, Google groups, and domains (such as G Suite). A `role` is a named list of permissions; each `role` can be an IAM predefined role or a user-created custom role. For some types of Google Cloud resources, a `binding` can also specify a `condition`, which is a logical expression that allows access to a resource only if the expression evaluates to `true`. A condition can add constraints based on attributes of the request, the resource, or both. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies). **JSON example:** ``` { \"bindings\": [ { \"role\": \"roles/resourcemanager.organizationAdmin\", \"members\": [ \"user:mike@example.com\", \"group:admins@example.com\", \"domain:google.com\", \"serviceAccount:my-project-id@appspot.gserviceaccount.com\" ] }, { \"role\": \"roles/resourcemanager.organizationViewer\", \"members\": [ \"user:eve@example.com\" ], \"condition\": { \"title\": \"expirable access\", \"description\": \"Does not grant access after Sep 2020\", \"expression\": \"request.time < timestamp('2020-10-01T00:00:00.000Z')\", } } ], \"etag\": \"BwWWja0YfJA=\", \"version\": 3 } ``` **YAML example:** ``` bindings: - members: - user:mike@example.com - group:admins@example.com - domain:google.com - serviceAccount:my-project-id@appspot.gserviceaccount.com role: roles/resourcemanager.organizationAdmin - members: - user:eve@example.com role: roles/resourcemanager.organizationViewer condition: title: expirable access description: Does not grant access after Sep 2020 expression: request.time < timestamp('2020-10-01T00:00:00.000Z') etag: BwWWja0YfJA= version: 3 ``` For a description of IAM and its features, see the [IAM documentation](https://cloud.google.com/iam/docs/).",
      "type": "object",
      "properties": {
        "version": {
          "description": "Specifies the format of the policy. Valid values are `0`, `1`, and `3`. Requests that specify an invalid value are rejected. Any operation that affects conditional role bindings must specify version `3`. This requirement applies to the following operations: * Getting a policy that includes a conditional role binding * Adding a conditional role binding to a policy * Changing a conditional role binding in a policy * Removing any role binding, with or without a condition, from a policy that includes conditions **Important:** If you use IAM Conditions, you must include the `etag` field whenever you call `setIamPolicy`. If you omit this field, then IAM allows you to overwrite a version `3` policy with a version `1` policy, and all of the conditions in the version `3` policy are lost. If a policy does not include any conditions, operations on that policy may specify any valid version or leave the field unset. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).",
          "type": "integer",
          "format": "int32"
        },
        "bindings": {
          "description": "Associates a list of `members`, or principals, with a `role`. Optionally, may specify a `condition` that determines how and when the `bindings` are applied. Each of the `bindings` must contain at least one principal. The `bindings` in a `Policy` can refer to up to 1,500 principals; up to 250 of these principals can be Google groups. Each occurrence of a principal counts towards these limits. For example, if the `bindings` grant 50 different roles to `user:alice@example.com`, and not to any other principal, then you can add another 1,450 principals to the `bindings` in the `Policy`.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/run:v2:GoogleIamV1Binding"
          }
        },
        "auditConfigs": {
          "description": "Specifies cloud audit logging configuration for this policy.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/run:v2:GoogleIamV1AuditConfig"
          }
        },
        "etag": {
          "description": "`etag` is used for optimistic concurrency control as a way to help prevent simultaneous updates of a policy from overwriting each other. It is strongly suggested that systems make use of the `etag` in the read-modify-write cycle to perform policy updates in order to avoid race conditions: An `etag` is returned in the response to `getIamPolicy`, and systems are expected to put that etag in the request to `setIamPolicy` to ensure that their change will be applied to the same version of the policy. **Important:** If you use IAM Conditions, you must include the `etag` field whenever you call `setIamPolicy`. If you omit this field, then IAM allows you to overwrite a version `3` policy with a version `1` policy, and all of the conditions in the version `3` policy are lost.",
          "type": "string",
          "format": "byte"
        }
      },
      "$id": "#/definitions/run:v2:GoogleIamV1Policy"
    },
    "run:v2:GoogleIamV1Binding": {
      "description": "Associates `members`, or principals, with a `role`.",
      "type": "object",
      "properties": {
        "role": {
          "description": "Role that is assigned to the list of `members`, or principals. For example, `roles/viewer`, `roles/editor`, or `roles/owner`.",
          "type": "string"
        },
        "members": {
          "description": "Specifies the principals requesting access for a Google Cloud resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. Does not include identities that come from external identity providers (IdPs) through identity federation. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a Google service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `serviceAccount:{projectid}.svc.id.goog[{namespace}/{kubernetes-sa}]`: An identifier for a [Kubernetes service account](https://cloud.google.com/kubernetes-engine/docs/how-to/kubernetes-service-accounts). For example, `my-project.svc.id.goog[my-namespace/my-kubernetes-sa]`. * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "condition": {
          "description": "The condition that is associated with this binding. If the condition evaluates to `true`, then this binding applies to the current request. If the condition evaluates to `false`, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the principals in this binding. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).",
          "$ref": "#/definitions/run:v2:GoogleTypeExpr"
        }
      },
      "$id": "#/definitions/run:v2:GoogleIamV1Binding"
    },
    "run:v2:GoogleTypeExpr": {
      "description": "Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: \"Summary size limit\" description: \"Determines if a summary is less than 100 chars\" expression: \"document.summary.size() < 100\" Example (Equality): title: \"Requestor is owner\" description: \"Determines if requestor is the document owner\" expression: \"document.owner == request.auth.claims.email\" Example (Logic): title: \"Public documents\" description: \"Determine whether the document should be publicly visible\" expression: \"document.type != 'private' && document.type != 'internal'\" Example (Data Manipulation): title: \"Notification string\" description: \"Create a notification string with a timestamp.\" expression: \"'New message received at ' + string(document.create_time)\" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information.",
      "type": "object",
      "properties": {
        "expression": {
          "description": "Textual representation of an expression in Common Expression Language syntax.",
          "type": "string"
        },
        "title": {
          "description": "Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.",
          "type": "string"
        },
        "description": {
          "description": "Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.",
          "type": "string"
        },
        "location": {
          "description": "Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.",
          "type": "string"
        }
      },
      "$id": "#/definitions/run:v2:GoogleTypeExpr"
    },
    "run:v2:GoogleIamV1AuditConfig": {
      "description": "Specifies the audit configuration for a service. The configuration determines which permission types are logged, and what identities, if any, are exempted from logging. An AuditConfig must have one or more AuditLogConfigs. If there are AuditConfigs for both `allServices` and a specific service, the union of the two AuditConfigs is used for that service: the log_types specified in each AuditConfig are enabled, and the exempted_members in each AuditLogConfig are exempted. Example Policy with multiple AuditConfigs: { \"audit_configs\": [ { \"service\": \"allServices\", \"audit_log_configs\": [ { \"log_type\": \"DATA_READ\", \"exempted_members\": [ \"user:jose@example.com\" ] }, { \"log_type\": \"DATA_WRITE\" }, { \"log_type\": \"ADMIN_READ\" } ] }, { \"service\": \"sampleservice.googleapis.com\", \"audit_log_configs\": [ { \"log_type\": \"DATA_READ\" }, { \"log_type\": \"DATA_WRITE\", \"exempted_members\": [ \"user:aliya@example.com\" ] } ] } ] } For sampleservice, this policy enables DATA_READ, DATA_WRITE and ADMIN_READ logging. It also exempts `jose@example.com` from DATA_READ logging, and `aliya@example.com` from DATA_WRITE logging.",
      "type": "object",
      "properties": {
        "service": {
          "description": "Specifies a service that will be enabled for audit logging. For example, `storage.googleapis.com`, `cloudsql.googleapis.com`. `allServices` is a special value that covers all services.",
          "type": "string"
        },
        "auditLogConfigs": {
          "description": "The configuration for logging of each type of permission.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/run:v2:GoogleIamV1AuditLogConfig"
          }
        }
      },
      "$id": "#/definitions/run:v2:GoogleIamV1AuditConfig"
    },
    "run:v2:GoogleIamV1AuditLogConfig": {
      "description": "Provides the configuration for logging a type of permissions. Example: { \"audit_log_configs\": [ { \"log_type\": \"DATA_READ\", \"exempted_members\": [ \"user:jose@example.com\" ] }, { \"log_type\": \"DATA_WRITE\" } ] } This enables 'DATA_READ' and 'DATA_WRITE' logging, while exempting jose@example.com from DATA_READ logging.",
      "type": "object",
      "properties": {
        "logType": {
          "description": "The log type that this config enables.",
          "type": "string",
          "enum": [
            "LOG_TYPE_UNSPECIFIED",
            "ADMIN_READ",
            "DATA_WRITE",
            "DATA_READ"
          ]
        },
        "exemptedMembers": {
          "description": "Specifies the identities that do not cause logging for this type of permission. Follows the same format of Binding.members.",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "$id": "#/definitions/run:v2:GoogleIamV1AuditLogConfig"
    },
    "run:v2:GoogleIamV1SetIamPolicyRequest": {
      "description": "Request message for `SetIamPolicy` method.",
      "type": "object",
      "properties": {
        "policy": {
          "description": "REQUIRED: The complete policy to be applied to the `resource`. The size of the policy is limited to a few 10s of KB. An empty policy is a valid policy but certain Google Cloud services (such as Projects) might reject them.",
          "$ref": "#/definitions/run:v2:GoogleIamV1Policy"
        },
        "updateMask": {
          "description": "OPTIONAL: A FieldMask specifying which fields of the policy to modify. Only the fields in the mask will be modified. If no mask is provided, the following default mask is used: `paths: \"bindings, etag\"`",
          "type": "string",
          "format": "google-fieldmask"
        }
      },
      "$id": "#/definitions/run:v2:GoogleIamV1SetIamPolicyRequest"
    },
    "run:v2:GoogleIamV1TestIamPermissionsRequest": {
      "description": "Request message for `TestIamPermissions` method.",
      "type": "object",
      "properties": {
        "permissions": {
          "description": "The set of permissions to check for the `resource`. Permissions with wildcards (such as `*` or `storage.*`) are not allowed. For more information see [IAM Overview](https://cloud.google.com/iam/docs/overview#permissions).",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "$id": "#/definitions/run:v2:GoogleIamV1TestIamPermissionsRequest"
    },
    "run:v2:GoogleIamV1TestIamPermissionsResponse": {
      "description": "Response message for `TestIamPermissions` method.",
      "type": "object",
      "properties": {
        "permissions": {
          "description": "A subset of `TestPermissionsRequest.permissions` that the caller is allowed.",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "$id": "#/definitions/run:v2:GoogleIamV1TestIamPermissionsResponse"
    },
    "run:v2:GoogleCloudRunV2Revision": {
      "description": "A Revision is an immutable snapshot of code and configuration. A Revision references a container image. Revisions are only created by updates to its parent Service.",
      "type": "object",
      "properties": {
        "name": {
          "description": "Output only. The unique name of this Revision.",
          "readOnly": true,
          "type": "string"
        },
        "uid": {
          "description": "Output only. Server assigned unique identifier for the Revision. The value is a UUID4 string and guaranteed to remain unchanged until the resource is deleted.",
          "readOnly": true,
          "type": "string"
        },
        "generation": {
          "description": "Output only. A number that monotonically increases every time the user modifies the desired state.",
          "readOnly": true,
          "type": "string",
          "format": "int64"
        },
        "labels": {
          "description": "Output only. Unstructured key value map that can be used to organize and categorize objects. User-provided labels are shared with Google's billing system, so they can be used to filter, or break down billing charges by team, component, environment, state, etc. For more information, visit https://cloud.google.com/resource-manager/docs/creating-managing-labels or https://cloud.google.com/run/docs/configuring/labels.",
          "readOnly": true,
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "annotations": {
          "description": "Output only. Unstructured key value map that may be set by external tools to store and arbitrary metadata. They are not queryable and should be preserved when modifying objects.",
          "readOnly": true,
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "createTime": {
          "description": "Output only. The creation time.",
          "readOnly": true,
          "type": "string",
          "format": "date-time"
        },
        "updateTime": {
          "description": "Output only. The last-modified time.",
          "readOnly": true,
          "type": "string",
          "format": "date-time"
        },
        "deleteTime": {
          "description": "Output only. For a deleted resource, the deletion time. It is only populated as a response to a Delete request.",
          "readOnly": true,
          "type": "string",
          "format": "date-time"
        },
        "expireTime": {
          "description": "Output only. For a deleted resource, the time after which it will be permamently deleted. It is only populated as a response to a Delete request.",
          "readOnly": true,
          "type": "string",
          "format": "date-time"
        },
        "launchStage": {
          "description": "The least stable launch stage needed to create this resource, as defined by [Google Cloud Platform Launch Stages](https://cloud.google.com/terms/launch-stages). Cloud Run supports `ALPHA`, `BETA`, and `GA`. Note that this value might not be what was used as input. For example, if ALPHA was provided as input in the parent resource, but only BETA and GA-level features are were, this field will be BETA.",
          "type": "string",
          "enum": [
            "LAUNCH_STAGE_UNSPECIFIED",
            "UNIMPLEMENTED",
            "PRELAUNCH",
            "EARLY_ACCESS",
            "ALPHA",
            "BETA",
            "GA",
            "DEPRECATED"
          ]
        },
        "service": {
          "description": "Output only. The name of the parent service.",
          "readOnly": true,
          "type": "string"
        },
        "scaling": {
          "description": "Scaling settings for this revision.",
          "$ref": "#/definitions/run:v2:GoogleCloudRunV2RevisionScaling"
        },
        "vpcAccess": {
          "description": "VPC Access configuration for this Revision. For more information, visit https://cloud.google.com/run/docs/configuring/connecting-vpc.",
          "$ref": "#/definitions/run:v2:GoogleCloudRunV2VpcAccess"
        },
        "maxInstanceRequestConcurrency": {
          "description": "Sets the maximum number of requests that each serving instance can receive.",
          "type": "integer",
          "format": "int32"
        },
        "timeout": {
          "description": "Max allowed time for an instance to respond to a request.",
          "type": "string",
          "format": "duration"
        },
        "serviceAccount": {
          "description": "Email address of the IAM service account associated with the revision of the service. The service account represents the identity of the running revision, and determines what permissions the revision has.",
          "type": "string"
        },
        "containers": {
          "description": "Holds the single container that defines the unit of execution for this Revision.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/run:v2:GoogleCloudRunV2Container"
          }
        },
        "volumes": {
          "description": "A list of Volumes to make available to containers.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/run:v2:GoogleCloudRunV2Volume"
          }
        },
        "executionEnvironment": {
          "description": "The execution environment being used to host this Revision.",
          "type": "string",
          "enum": [
            "EXECUTION_ENVIRONMENT_UNSPECIFIED",
            "EXECUTION_ENVIRONMENT_GEN1",
            "EXECUTION_ENVIRONMENT_GEN2"
          ]
        },
        "encryptionKey": {
          "description": "A reference to a customer managed encryption key (CMEK) to use to encrypt this container image. For more information, go to https://cloud.google.com/run/docs/securing/using-cmek",
          "type": "string"
        },
        "encryptionKeyRevocationAction": {
          "description": "The action to take if the encryption key is revoked.",
          "type": "string",
          "enum": [
            "ENCRYPTION_KEY_REVOCATION_ACTION_UNSPECIFIED",
            "PREVENT_NEW",
            "SHUTDOWN"
          ]
        },
        "encryptionKeyShutdownDuration": {
          "description": "If encryption_key_revocation_action is SHUTDOWN, the duration before shutting down all instances. The minimum increment is 1 hour.",
          "type": "string",
          "format": "duration"
        },
        "reconciling": {
          "description": "Output only. Indicates whether the resource's reconciliation is still in progress. See comments in `Service.reconciling` for additional information on reconciliation process in Cloud Run.",
          "readOnly": true,
          "type": "boolean"
        },
        "conditions": {
          "description": "Output only. The Condition of this Revision, containing its readiness status, and detailed error information in case it did not reach a serving state.",
          "readOnly": true,
          "type": "array",
          "items": {
            "$ref": "#/definitions/run:v2:GoogleCloudRunV2Condition"
          }
        },
        "observedGeneration": {
          "description": "Output only. The generation of this Revision currently serving traffic. See comments in `reconciling` for additional information on reconciliation process in Cloud Run.",
          "readOnly": true,
          "type": "string",
          "format": "int64"
        },
        "logUri": {
          "description": "Output only. The Google Console URI to obtain logs for the Revision.",
          "readOnly": true,
          "type": "string"
        },
        "satisfiesPzs": {
          "description": "Output only. Reserved for future use.",
          "readOnly": true,
          "type": "boolean"
        },
        "sessionAffinity": {
          "description": "Enable session affinity.",
          "type": "boolean"
        },
        "etag": {
          "description": "Output only. A system-generated fingerprint for this version of the resource. May be used to detect modification conflict during updates.",
          "readOnly": true,
          "type": "string"
        }
      },
      "$id": "#/definitions/run:v2:GoogleCloudRunV2Revision"
    },
    "run:v2:GoogleCloudRunV2RevisionScaling": {
      "description": "Settings for revision-level scaling settings.",
      "type": "object",
      "properties": {
        "minInstanceCount": {
          "description": "Minimum number of serving instances that this resource should have.",
          "type": "integer",
          "format": "int32"
        },
        "maxInstanceCount": {
          "description": "Maximum number of serving instances that this resource should have.",
          "type": "integer",
          "format": "int32"
        }
      },
      "$id": "#/definitions/run:v2:GoogleCloudRunV2RevisionScaling"
    },
    "run:v2:GoogleCloudRunV2ListRevisionsResponse": {
      "description": "Response message containing a list of Revisions.",
      "type": "object",
      "properties": {
        "revisions": {
          "description": "The resulting list of Revisions.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/run:v2:GoogleCloudRunV2Revision"
          }
        },
        "nextPageToken": {
          "description": "A token indicating there are more items than page_size. Use it in the next ListRevisions request to continue.",
          "type": "string"
        }
      },
      "$id": "#/definitions/run:v2:GoogleCloudRunV2ListRevisionsResponse"
    },
    "run:v2:GoogleCloudRunV2Service": {
      "description": "Service acts as a top-level container that manages a set of configurations and revision templates which implement a network service. Service exists to provide a singular abstraction which can be access controlled, reasoned about, and which encapsulates software lifecycle decisions such as rollout policy and team resource ownership.",
      "type": "object",
      "properties": {
        "name": {
          "description": "The fully qualified name of this Service. In CreateServiceRequest, this field is ignored, and instead composed from CreateServiceRequest.parent and CreateServiceRequest.service_id. Format: projects/{project}/locations/{location}/services/{service_id}",
          "type": "string"
        },
        "description": {
          "description": "User-provided description of the Service. This field currently has a 512-character limit.",
          "type": "string"
        },
        "uid": {
          "description": "Output only. Server assigned unique identifier for the trigger. The value is a UUID4 string and guaranteed to remain unchanged until the resource is deleted.",
          "readOnly": true,
          "type": "string"
        },
        "generation": {
          "description": "Output only. A number that monotonically increases every time the user modifies the desired state. Please note that unlike v1, this is an int64 value. As with most Google APIs, its JSON representation will be a `string` instead of an `integer`.",
          "readOnly": true,
          "type": "string",
          "format": "int64"
        },
        "labels": {
          "description": "Unstructured key value map that can be used to organize and categorize objects. User-provided labels are shared with Google's billing system, so they can be used to filter, or break down billing charges by team, component, environment, state, etc. For more information, visit https://cloud.google.com/resource-manager/docs/creating-managing-labels or https://cloud.google.com/run/docs/configuring/labels. Cloud Run API v2 does not support labels with `run.googleapis.com`, `cloud.googleapis.com`, `serving.knative.dev`, or `autoscaling.knative.dev` namespaces, and they will be rejected. All system labels in v1 now have a corresponding field in v2 Service.",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "annotations": {
          "description": "Unstructured key value map that may be set by external tools to store and arbitrary metadata. They are not queryable and should be preserved when modifying objects. Cloud Run API v2 does not support annotations with `run.googleapis.com`, `cloud.googleapis.com`, `serving.knative.dev`, or `autoscaling.knative.dev` namespaces, and they will be rejected in new resources. All system annotations in v1 now have a corresponding field in v2 Service. This field follows Kubernetes annotations' namespacing, limits, and rules.",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "createTime": {
          "description": "Output only. The creation time.",
          "readOnly": true,
          "type": "string",
          "format": "date-time"
        },
        "updateTime": {
          "description": "Output only. The last-modified time.",
          "readOnly": true,
          "type": "string",
          "format": "date-time"
        },
        "deleteTime": {
          "description": "Output only. The deletion time.",
          "readOnly": true,
          "type": "string",
          "format": "date-time"
        },
        "expireTime": {
          "description": "Output only. For a deleted resource, the time after which it will be permamently deleted.",
          "readOnly": true,
          "type": "string",
          "format": "date-time"
        },
        "creator": {
          "description": "Output only. Email address of the authenticated creator.",
          "readOnly": true,
          "type": "string"
        },
        "lastModifier": {
          "description": "Output only. Email address of the last authenticated modifier.",
          "readOnly": true,
          "type": "string"
        },
        "client": {
          "description": "Arbitrary identifier for the API client.",
          "type": "string"
        },
        "clientVersion": {
          "description": "Arbitrary version identifier for the API client.",
          "type": "string"
        },
        "ingress": {
          "description": "Provides the ingress settings for this Service. On output, returns the currently observed ingress settings, or INGRESS_TRAFFIC_UNSPECIFIED if no revision is active.",
          "type": "string",
          "enum": [
            "INGRESS_TRAFFIC_UNSPECIFIED",
            "INGRESS_TRAFFIC_ALL",
            "INGRESS_TRAFFIC_INTERNAL_ONLY",
            "INGRESS_TRAFFIC_INTERNAL_LOAD_BALANCER"
          ]
        },
        "launchStage": {
          "description": "The launch stage as defined by [Google Cloud Platform Launch Stages](https://cloud.google.com/terms/launch-stages). Cloud Run supports `ALPHA`, `BETA`, and `GA`. If no value is specified, GA is assumed. Set the launch stage to a preview stage on input to allow use of preview features in that stage. On read (or output), describes whether the resource uses preview features. For example, if ALPHA is provided as input, but only BETA and GA-level features are used, this field will be BETA on output.",
          "type": "string",
          "enum": [
            "LAUNCH_STAGE_UNSPECIFIED",
            "UNIMPLEMENTED",
            "PRELAUNCH",
            "EARLY_ACCESS",
            "ALPHA",
            "BETA",
            "GA",
            "DEPRECATED"
          ]
        },
        "binaryAuthorization": {
          "description": "Settings for the Binary Authorization feature.",
          "$ref": "#/definitions/run:v2:GoogleCloudRunV2BinaryAuthorization"
        },
        "template": {
          "description": "Required. The template used to create revisions for this Service.",
          "$ref": "#/definitions/run:v2:GoogleCloudRunV2RevisionTemplate"
        },
        "traffic": {
          "description": "Specifies how to distribute traffic over a collection of Revisions belonging to the Service. If traffic is empty or not provided, defaults to 100% traffic to the latest `Ready` Revision.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/run:v2:GoogleCloudRunV2TrafficTarget"
          }
        },
        "observedGeneration": {
          "description": "Output only. The generation of this Service currently serving traffic. See comments in `reconciling` for additional information on reconciliation process in Cloud Run. Please note that unlike v1, this is an int64 value. As with most Google APIs, its JSON representation will be a `string` instead of an `integer`.",
          "readOnly": true,
          "type": "string",
          "format": "int64"
        },
        "terminalCondition": {
          "description": "Output only. The Condition of this Service, containing its readiness status, and detailed error information in case it did not reach a serving state. See comments in `reconciling` for additional information on reconciliation process in Cloud Run.",
          "readOnly": true,
          "$ref": "#/definitions/run:v2:GoogleCloudRunV2Condition"
        },
        "conditions": {
          "description": "Output only. The Conditions of all other associated sub-resources. They contain additional diagnostics information in case the Service does not reach its Serving state. See comments in `reconciling` for additional information on reconciliation process in Cloud Run.",
          "readOnly": true,
          "type": "array",
          "items": {
            "$ref": "#/definitions/run:v2:GoogleCloudRunV2Condition"
          }
        },
        "latestReadyRevision": {
          "description": "Output only. Name of the latest revision that is serving traffic. See comments in `reconciling` for additional information on reconciliation process in Cloud Run.",
          "readOnly": true,
          "type": "string"
        },
        "latestCreatedRevision": {
          "description": "Output only. Name of the last created revision. See comments in `reconciling` for additional information on reconciliation process in Cloud Run.",
          "readOnly": true,
          "type": "string"
        },
        "trafficStatuses": {
          "description": "Output only. Detailed status information for corresponding traffic targets. See comments in `reconciling` for additional information on reconciliation process in Cloud Run.",
          "readOnly": true,
          "type": "array",
          "items": {
            "$ref": "#/definitions/run:v2:GoogleCloudRunV2TrafficTargetStatus"
          }
        },
        "uri": {
          "description": "Output only. The main URI in which this Service is serving traffic.",
          "readOnly": true,
          "type": "string"
        },
        "customAudiences": {
          "description": "One or more custom audiences that you want this service to support. Specify each custom audience as the full URL in a string. The custom audiences are encoded in the token and used to authenticate requests. For more information, see https://cloud.google.com/run/docs/configuring/custom-audiences.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "satisfiesPzs": {
          "description": "Output only. Reserved for future use.",
          "readOnly": true,
          "type": "boolean"
        },
        "trafficTagsCleanupThreshold": {
          "description": "Optional. Override the traffic tag threshold limit. Garbage collection will start cleaning up non-serving tagged traffic targets based on creation item. The default value is 2000.",
          "type": "string",
          "format": "int64"
        },
        "reconciling": {
          "description": "Output only. Returns true if the Service is currently being acted upon by the system to bring it into the desired state. When a new Service is created, or an existing one is updated, Cloud Run will asynchronously perform all necessary steps to bring the Service to the desired serving state. This process is called reconciliation. While reconciliation is in process, `observed_generation`, `latest_ready_revison`, `traffic_statuses`, and `uri` will have transient values that might mismatch the intended state: Once reconciliation is over (and this field is false), there are two possible outcomes: reconciliation succeeded and the serving state matches the Service, or there was an error, and reconciliation failed. This state can be found in `terminal_condition.state`. If reconciliation succeeded, the following fields will match: `traffic` and `traffic_statuses`, `observed_generation` and `generation`, `latest_ready_revision` and `latest_created_revision`. If reconciliation failed, `traffic_statuses`, `observed_generation`, and `latest_ready_revision` will have the state of the last serving revision, or empty for newly created Services. Additional information on the failure can be found in `terminal_condition` and `conditions`.",
          "readOnly": true,
          "type": "boolean"
        },
        "etag": {
          "description": "Output only. A system-generated fingerprint for this version of the resource. May be used to detect modification conflict during updates.",
          "readOnly": true,
          "type": "string"
        }
      },
      "$id": "#/definitions/run:v2:GoogleCloudRunV2Service"
    },
    "run:v2:GoogleCloudRunV2RevisionTemplate": {
      "description": "RevisionTemplate describes the data a revision should have when created from a template.",
      "type": "object",
      "properties": {
        "revision": {
          "description": "The unique name for the revision. If this field is omitted, it will be automatically generated based on the Service name.",
          "type": "string"
        },
        "labels": {
          "description": "Unstructured key value map that can be used to organize and categorize objects. User-provided labels are shared with Google's billing system, so they can be used to filter, or break down billing charges by team, component, environment, state, etc. For more information, visit https://cloud.google.com/resource-manager/docs/creating-managing-labels or https://cloud.google.com/run/docs/configuring/labels. Cloud Run API v2 does not support labels with `run.googleapis.com`, `cloud.googleapis.com`, `serving.knative.dev`, or `autoscaling.knative.dev` namespaces, and they will be rejected. All system labels in v1 now have a corresponding field in v2 RevisionTemplate.",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "annotations": {
          "description": "Unstructured key value map that may be set by external tools to store and arbitrary metadata. They are not queryable and should be preserved when modifying objects. Cloud Run API v2 does not support annotations with `run.googleapis.com`, `cloud.googleapis.com`, `serving.knative.dev`, or `autoscaling.knative.dev` namespaces, and they will be rejected. All system annotations in v1 now have a corresponding field in v2 RevisionTemplate. This field follows Kubernetes annotations' namespacing, limits, and rules.",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "scaling": {
          "description": "Scaling settings for this Revision.",
          "$ref": "#/definitions/run:v2:GoogleCloudRunV2RevisionScaling"
        },
        "vpcAccess": {
          "description": "VPC Access configuration to use for this Revision. For more information, visit https://cloud.google.com/run/docs/configuring/connecting-vpc.",
          "$ref": "#/definitions/run:v2:GoogleCloudRunV2VpcAccess"
        },
        "timeout": {
          "description": "Max allowed time for an instance to respond to a request.",
          "type": "string",
          "format": "duration"
        },
        "serviceAccount": {
          "description": "Email address of the IAM service account associated with the revision of the service. The service account represents the identity of the running revision, and determines what permissions the revision has. If not provided, the revision will use the project's default service account.",
          "type": "string"
        },
        "containers": {
          "description": "Holds the single container that defines the unit of execution for this Revision.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/run:v2:GoogleCloudRunV2Container"
          }
        },
        "volumes": {
          "description": "A list of Volumes to make available to containers.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/run:v2:GoogleCloudRunV2Volume"
          }
        },
        "executionEnvironment": {
          "description": "The sandbox environment to host this Revision.",
          "type": "string",
          "enum": [
            "EXECUTION_ENVIRONMENT_UNSPECIFIED",
            "EXECUTION_ENVIRONMENT_GEN1",
            "EXECUTION_ENVIRONMENT_GEN2"
          ]
        },
        "encryptionKey": {
          "description": "A reference to a customer managed encryption key (CMEK) to use to encrypt this container image. For more information, go to https://cloud.google.com/run/docs/securing/using-cmek",
          "type": "string"
        },
        "maxInstanceRequestConcurrency": {
          "description": "Sets the maximum number of requests that each serving instance can receive.",
          "type": "integer",
          "format": "int32"
        },
        "sessionAffinity": {
          "description": "Enable session affinity.",
          "type": "boolean"
        }
      },
      "$id": "#/definitions/run:v2:GoogleCloudRunV2RevisionTemplate"
    },
    "run:v2:GoogleCloudRunV2TrafficTarget": {
      "description": "Holds a single traffic routing entry for the Service. Allocations can be done to a specific Revision name, or pointing to the latest Ready Revision.",
      "type": "object",
      "properties": {
        "type": {
          "description": "The allocation type for this traffic target.",
          "type": "string",
          "enum": [
            "TRAFFIC_TARGET_ALLOCATION_TYPE_UNSPECIFIED",
            "TRAFFIC_TARGET_ALLOCATION_TYPE_LATEST",
            "TRAFFIC_TARGET_ALLOCATION_TYPE_REVISION"
          ]
        },
        "revision": {
          "description": "Revision to which to send this portion of traffic, if traffic allocation is by revision.",
          "type": "string"
        },
        "percent": {
          "description": "Specifies percent of the traffic to this Revision. This defaults to zero if unspecified.",
          "type": "integer",
          "format": "int32"
        },
        "tag": {
          "description": "Indicates a string to be part of the URI to exclusively reference this target.",
          "type": "string"
        }
      },
      "$id": "#/definitions/run:v2:GoogleCloudRunV2TrafficTarget"
    },
    "run:v2:GoogleCloudRunV2TrafficTargetStatus": {
      "description": "Represents the observed state of a single `TrafficTarget` entry.",
      "type": "object",
      "properties": {
        "type": {
          "description": "The allocation type for this traffic target.",
          "type": "string",
          "enum": [
            "TRAFFIC_TARGET_ALLOCATION_TYPE_UNSPECIFIED",
            "TRAFFIC_TARGET_ALLOCATION_TYPE_LATEST",
            "TRAFFIC_TARGET_ALLOCATION_TYPE_REVISION"
          ]
        },
        "revision": {
          "description": "Revision to which this traffic is sent.",
          "type": "string"
        },
        "percent": {
          "description": "Specifies percent of the traffic to this Revision.",
          "type": "integer",
          "format": "int32"
        },
        "tag": {
          "description": "Indicates the string used in the URI to exclusively reference this target.",
          "type": "string"
        },
        "uri": {
          "description": "Displays the target URI.",
          "type": "string"
        }
      },
      "$id": "#/definitions/run:v2:GoogleCloudRunV2TrafficTargetStatus"
    },
    "run:v2:GoogleCloudRunV2ListServicesResponse": {
      "description": "Response message containing a list of Services.",
      "type": "object",
      "properties": {
        "services": {
          "description": "The resulting list of Services.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/run:v2:GoogleCloudRunV2Service"
          }
        },
        "nextPageToken": {
          "description": "A token indicating there are more items than page_size. Use it in the next ListServices request to continue.",
          "type": "string"
        }
      },
      "$id": "#/definitions/run:v2:GoogleCloudRunV2ListServicesResponse"
    },
    "run:v2:GoogleCloudRunV2Task": {
      "description": "Task represents a single run of a container to completion.",
      "type": "object",
      "properties": {
        "name": {
          "description": "Output only. The unique name of this Task.",
          "readOnly": true,
          "type": "string"
        },
        "uid": {
          "description": "Output only. Server assigned unique identifier for the Task. The value is a UUID4 string and guaranteed to remain unchanged until the resource is deleted.",
          "readOnly": true,
          "type": "string"
        },
        "generation": {
          "description": "Output only. A number that monotonically increases every time the user modifies the desired state.",
          "readOnly": true,
          "type": "string",
          "format": "int64"
        },
        "labels": {
          "description": "Output only. Unstructured key value map that can be used to organize and categorize objects. User-provided labels are shared with Google's billing system, so they can be used to filter, or break down billing charges by team, component, environment, state, etc. For more information, visit https://cloud.google.com/resource-manager/docs/creating-managing-labels or https://cloud.google.com/run/docs/configuring/labels",
          "readOnly": true,
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "annotations": {
          "description": "Output only. Unstructured key value map that may be set by external tools to store and arbitrary metadata. They are not queryable and should be preserved when modifying objects.",
          "readOnly": true,
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "createTime": {
          "description": "Output only. Represents time when the task was created by the system. It is not guaranteed to be set in happens-before order across separate operations.",
          "readOnly": true,
          "type": "string",
          "format": "date-time"
        },
        "startTime": {
          "description": "Output only. Represents time when the task started to run. It is not guaranteed to be set in happens-before order across separate operations.",
          "readOnly": true,
          "type": "string",
          "format": "date-time"
        },
        "completionTime": {
          "description": "Output only. Represents time when the Task was completed. It is not guaranteed to be set in happens-before order across separate operations.",
          "readOnly": true,
          "type": "string",
          "format": "date-time"
        },
        "updateTime": {
          "description": "Output only. The last-modified time.",
          "readOnly": true,
          "type": "string",
          "format": "date-time"
        },
        "deleteTime": {
          "description": "Output only. For a deleted resource, the deletion time. It is only populated as a response to a Delete request.",
          "readOnly": true,
          "type": "string",
          "format": "date-time"
        },
        "expireTime": {
          "description": "Output only. For a deleted resource, the time after which it will be permamently deleted. It is only populated as a response to a Delete request.",
          "readOnly": true,
          "type": "string",
          "format": "date-time"
        },
        "job": {
          "description": "Output only. The name of the parent Job.",
          "readOnly": true,
          "type": "string"
        },
        "execution": {
          "description": "Output only. The name of the parent Execution.",
          "readOnly": true,
          "type": "string"
        },
        "containers": {
          "description": "Holds the single container that defines the unit of execution for this task.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/run:v2:GoogleCloudRunV2Container"
          }
        },
        "volumes": {
          "description": "A list of Volumes to make available to containers.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/run:v2:GoogleCloudRunV2Volume"
          }
        },
        "maxRetries": {
          "description": "Number of retries allowed per Task, before marking this Task failed.",
          "type": "integer",
          "format": "int32"
        },
        "timeout": {
          "description": "Max allowed time duration the Task may be active before the system will actively try to mark it failed and kill associated containers. This applies per attempt of a task, meaning each retry can run for the full timeout.",
          "type": "string",
          "format": "duration"
        },
        "serviceAccount": {
          "description": "Email address of the IAM service account associated with the Task of a Job. The service account represents the identity of the running task, and determines what permissions the task has. If not provided, the task will use the project's default service account.",
          "type": "string"
        },
        "executionEnvironment": {
          "description": "The execution environment being used to host this Task.",
          "type": "string",
          "enum": [
            "EXECUTION_ENVIRONMENT_UNSPECIFIED",
            "EXECUTION_ENVIRONMENT_GEN1",
            "EXECUTION_ENVIRONMENT_GEN2"
          ]
        },
        "reconciling": {
          "description": "Output only. Indicates whether the resource's reconciliation is still in progress. See comments in `Job.reconciling` for additional information on reconciliation process in Cloud Run.",
          "readOnly": true,
          "type": "boolean"
        },
        "conditions": {
          "description": "Output only. The Condition of this Task, containing its readiness status, and detailed error information in case it did not reach the desired state.",
          "readOnly": true,
          "type": "array",
          "items": {
            "$ref": "#/definitions/run:v2:GoogleCloudRunV2Condition"
          }
        },
        "observedGeneration": {
          "description": "Output only. The generation of this Task. See comments in `Job.reconciling` for additional information on reconciliation process in Cloud Run.",
          "readOnly": true,
          "type": "string",
          "format": "int64"
        },
        "index": {
          "description": "Output only. Index of the Task, unique per execution, and beginning at 0.",
          "readOnly": true,
          "type": "integer",
          "format": "int32"
        },
        "retried": {
          "description": "Output only. The number of times this Task was retried. Tasks are retried when they fail up to the maxRetries limit.",
          "readOnly": true,
          "type": "integer",
          "format": "int32"
        },
        "lastAttemptResult": {
          "description": "Output only. Result of the last attempt of this Task.",
          "readOnly": true,
          "$ref": "#/definitions/run:v2:GoogleCloudRunV2TaskAttemptResult"
        },
        "encryptionKey": {
          "description": "Output only. A reference to a customer managed encryption key (CMEK) to use to encrypt this container image. For more information, go to https://cloud.google.com/run/docs/securing/using-cmek",
          "readOnly": true,
          "type": "string"
        },
        "vpcAccess": {
          "description": "Output only. VPC Access configuration to use for this Task. For more information, visit https://cloud.google.com/run/docs/configuring/connecting-vpc.",
          "readOnly": true,
          "$ref": "#/definitions/run:v2:GoogleCloudRunV2VpcAccess"
        },
        "logUri": {
          "description": "Output only. URI where logs for this execution can be found in Cloud Console.",
          "readOnly": true,
          "type": "string"
        },
        "satisfiesPzs": {
          "description": "Output only. Reserved for future use.",
          "readOnly": true,
          "type": "boolean"
        },
        "etag": {
          "description": "Output only. A system-generated fingerprint for this version of the resource. May be used to detect modification conflict during updates.",
          "readOnly": true,
          "type": "string"
        }
      },
      "$id": "#/definitions/run:v2:GoogleCloudRunV2Task"
    },
    "run:v2:GoogleCloudRunV2TaskAttemptResult": {
      "description": "Result of a task attempt.",
      "type": "object",
      "properties": {
        "status": {
          "description": "Output only. The status of this attempt. If the status code is OK, then the attempt succeeded.",
          "readOnly": true,
          "$ref": "#/definitions/run:v2:GoogleRpcStatus"
        },
        "exitCode": {
          "description": "Output only. The exit code of this attempt. This may be unset if the container was unable to exit cleanly with a code due to some other failure. See status field for possible failure details.",
          "readOnly": true,
          "type": "integer",
          "format": "int32"
        }
      },
      "$id": "#/definitions/run:v2:GoogleCloudRunV2TaskAttemptResult"
    },
    "run:v2:GoogleCloudRunV2ListTasksResponse": {
      "description": "Response message containing a list of Tasks.",
      "type": "object",
      "properties": {
        "tasks": {
          "description": "The resulting list of Tasks.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/run:v2:GoogleCloudRunV2Task"
          }
        },
        "nextPageToken": {
          "description": "A token indicating there are more items than page_size. Use it in the next ListTasks request to continue.",
          "type": "string"
        }
      },
      "$id": "#/definitions/run:v2:GoogleCloudRunV2ListTasksResponse"
    },
    "cloudbuild:v1:GitLabRepositoryId": {
      "type": "object",
      "properties": {
        "id": {
          "description": "Required. Identifier for the repository. example: \"namespace/project-slug\", namespace is usually the username or group ID",
          "type": "string"
        },
        "webhookId": {
          "description": "Output only. The ID of the webhook that was created for receiving events from this repo. We only create and manage a single webhook for each repo.",
          "readOnly": true,
          "type": "integer",
          "format": "int32"
        }
      },
      "description": "GitLabRepositoryId identifies a specific repository hosted on GitLab.com or GitLabEnterprise",
      "$id": "#/definitions/cloudbuild:v1:GitLabRepositoryId"
    },
    "cloudbuild:v1:BitbucketServerRepository": {
      "description": "BitbucketServerRepository represents a repository hosted on a Bitbucket Server.",
      "properties": {
        "browseUri": {
          "type": "string",
          "description": "Link to the browse repo page on the Bitbucket Server instance."
        },
        "description": {
          "type": "string",
          "description": "Description of the repository."
        },
        "name": {
          "type": "string",
          "description": "The resource name of the repository."
        },
        "repoId": {
          "description": "Identifier for a repository hosted on a Bitbucket Server.",
          "$ref": "#/definitions/cloudbuild:v1:BitbucketServerRepositoryId"
        },
        "displayName": {
          "type": "string",
          "description": "Display name of the repository."
        }
      },
      "type": "object",
      "$id": "#/definitions/cloudbuild:v1:BitbucketServerRepository"
    },
    "cloudbuild:v1:GitRepoSource": {
      "properties": {
        "ref": {
          "type": "string",
          "description": "The branch or tag to use. Must start with \"refs/\" (required)."
        },
        "repository": {
          "type": "string",
          "description": "The connected repository resource name, in the format `projects/*/locations/*/connections/*/repositories/*`. Either `uri` or `repository` can be specified and is required."
        },
        "bitbucketServerConfig": {
          "type": "string",
          "description": "The full resource name of the bitbucket server config. Format: `projects/{project}/locations/{location}/bitbucketServerConfigs/{id}`."
        },
        "githubEnterpriseConfig": {
          "description": "The full resource name of the github enterprise config. Format: `projects/{project}/locations/{location}/githubEnterpriseConfigs/{id}`. `projects/{project}/githubEnterpriseConfigs/{id}`.",
          "type": "string"
        },
        "uri": {
          "description": "The URI of the repo (e.g. https://github.com/user/repo.git). Either `uri` or `repository` can be specified and is required.",
          "type": "string"
        },
        "repoType": {
          "description": "See RepoType below.",
          "type": "string",
          "enum": [
            "UNKNOWN",
            "CLOUD_SOURCE_REPOSITORIES",
            "GITHUB",
            "BITBUCKET_SERVER",
            "GITLAB"
          ]
        }
      },
      "type": "object",
      "description": "GitRepoSource describes a repo and ref of a code repository.",
      "$id": "#/definitions/cloudbuild:v1:GitRepoSource"
    },
    "cloudbuild:v1:UploadedNpmPackage": {
      "properties": {
        "fileHashes": {
          "description": "Hash types and values of the npm package.",
          "$ref": "#/definitions/cloudbuild:v1:FileHashes"
        },
        "uri": {
          "description": "URI of the uploaded npm package.",
          "type": "string"
        },
        "pushTiming": {
          "description": "Output only. Stores timing information for pushing the specified artifact.",
          "$ref": "#/definitions/cloudbuild:v1:TimeSpan",
          "readOnly": true
        }
      },
      "description": "An npm package uploaded to Artifact Registry using the NpmPackage directive.",
      "type": "object",
      "$id": "#/definitions/cloudbuild:v1:UploadedNpmPackage"
    },
    "cloudbuild:v1:Empty": {
      "description": "A generic empty message that you can re-use to avoid defining duplicated empty messages in your APIs. A typical example is to use it as the request or the response type of an API method. For instance: service Foo { rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty); }",
      "properties": {},
      "type": "object",
      "$id": "#/definitions/cloudbuild:v1:Empty"
    },
    "cloudbuild:v1:CreateGitLabConnectedRepositoryRequest": {
      "type": "object",
      "description": "Request to connect a repository from a connected GitLab host.",
      "properties": {
        "parent": {
          "description": "Required. The name of the `GitLabConfig` that adds connected repository. Format: `projects/{project}/locations/{location}/gitLabConfigs/{config}`",
          "type": "string"
        },
        "gitlabConnectedRepository": {
          "description": "Required. The GitLab repository to connect.",
          "$ref": "#/definitions/cloudbuild:v1:GitLabConnectedRepository"
        }
      },
      "$id": "#/definitions/cloudbuild:v1:CreateGitLabConnectedRepositoryRequest"
    },
    "cloudbuild:v1:ArtifactObjects": {
      "description": "Files in the workspace to upload to Cloud Storage upon successful completion of all build steps.",
      "properties": {
        "location": {
          "description": "Cloud Storage bucket and optional object path, in the form \"gs://bucket/path/to/somewhere/\". (see [Bucket Name Requirements](https://cloud.google.com/storage/docs/bucket-naming#requirements)). Files in the workspace matching any path pattern will be uploaded to Cloud Storage with this location as a prefix.",
          "type": "string"
        },
        "paths": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "description": "Path globs used to match files in the build's workspace."
        },
        "timing": {
          "$ref": "#/definitions/cloudbuild:v1:TimeSpan",
          "readOnly": true,
          "description": "Output only. Stores timing information for pushing all artifact objects."
        }
      },
      "type": "object",
      "$id": "#/definitions/cloudbuild:v1:ArtifactObjects"
    },
    "cloudbuild:v1:ApprovalResult": {
      "description": "ApprovalResult describes the decision and associated metadata of a manual approval of a build.",
      "properties": {
        "url": {
          "type": "string",
          "description": "Optional. An optional URL tied to this manual approval result. This field is essentially the same as comment, except that it will be rendered by the UI differently. An example use case is a link to an external job that approved this Build."
        },
        "comment": {
          "type": "string",
          "description": "Optional. An optional comment for this manual approval result."
        },
        "approvalTime": {
          "format": "date-time",
          "type": "string",
          "description": "Output only. The time when the approval decision was made.",
          "readOnly": true
        },
        "decision": {
          "enum": [
            "DECISION_UNSPECIFIED",
            "APPROVED",
            "REJECTED"
          ],
          "type": "string",
          "description": "Required. The decision of this manual approval."
        },
        "approverAccount": {
          "description": "Output only. Email of the user that called the ApproveBuild API to approve or reject a build at the time that the API was called.",
          "type": "string",
          "readOnly": true
        }
      },
      "type": "object",
      "$id": "#/definitions/cloudbuild:v1:ApprovalResult"
    },
    "cloudbuild:v1:PubsubConfig": {
      "properties": {
        "subscription": {
          "description": "Output only. Name of the subscription. Format is `projects/{project}/subscriptions/{subscription}`.",
          "readOnly": true,
          "type": "string"
        },
        "topic": {
          "type": "string",
          "description": "The name of the topic from which this subscription is receiving messages. Format is `projects/{project}/topics/{topic}`."
        },
        "serviceAccountEmail": {
          "type": "string",
          "description": "Service account that will make the push request."
        },
        "state": {
          "enum": [
            "STATE_UNSPECIFIED",
            "OK",
            "SUBSCRIPTION_DELETED",
            "TOPIC_DELETED",
            "SUBSCRIPTION_MISCONFIGURED"
          ],
          "type": "string",
          "description": "Potential issues with the underlying Pub/Sub subscription configuration. Only populated on get requests."
        }
      },
      "description": "PubsubConfig describes the configuration of a trigger that creates a build whenever a Pub/Sub message is published.",
      "type": "object",
      "$id": "#/definitions/cloudbuild:v1:PubsubConfig"
    },
    "cloudbuild:v1:PoolOption": {
      "type": "object",
      "properties": {
        "name": {
          "description": "The `WorkerPool` resource to execute the build on. You must have `cloudbuild.workerpools.use` on the project hosting the WorkerPool. Format projects/{project}/locations/{location}/workerPools/{workerPoolId}",
          "type": "string"
        }
      },
      "description": "Details about how a build should be executed on a `WorkerPool`. See [running builds in a private pool](https://cloud.google.com/build/docs/private-pools/run-builds-in-private-pool) for more information.",
      "$id": "#/definitions/cloudbuild:v1:PoolOption"
    },
    "cloudbuild:v1:InlineSecret": {
      "description": "Pairs a set of secret environment variables mapped to encrypted values with the Cloud KMS key to use to decrypt the value.",
      "type": "object",
      "properties": {
        "envMap": {
          "additionalProperties": {
            "type": "string",
            "format": "byte"
          },
          "description": "Map of environment variable name to its encrypted value. Secret environment variables must be unique across all of a build's secrets, and must be used by at least one build step. Values can be at most 64 KB in size. There can be at most 100 secret values across all of a build's secrets.",
          "type": "object"
        },
        "kmsKeyName": {
          "type": "string",
          "description": "Resource name of Cloud KMS crypto key to decrypt the encrypted value. In format: projects/*/locations/*/keyRings/*/cryptoKeys/*"
        }
      },
      "$id": "#/definitions/cloudbuild:v1:InlineSecret"
    },
    "cloudbuild:v1:GitFileSource": {
      "description": "GitFileSource describes a file within a (possibly remote) code repository.",
      "type": "object",
      "properties": {
        "path": {
          "description": "The path of the file, with the repo root as the root of the path.",
          "type": "string"
        },
        "bitbucketServerConfig": {
          "type": "string",
          "description": "The full resource name of the bitbucket server config. Format: `projects/{project}/locations/{location}/bitbucketServerConfigs/{id}`."
        },
        "githubEnterpriseConfig": {
          "description": "The full resource name of the github enterprise config. Format: `projects/{project}/locations/{location}/githubEnterpriseConfigs/{id}`. `projects/{project}/githubEnterpriseConfigs/{id}`.",
          "type": "string"
        },
        "repoType": {
          "type": "string",
          "enum": [
            "UNKNOWN",
            "CLOUD_SOURCE_REPOSITORIES",
            "GITHUB",
            "BITBUCKET_SERVER",
            "GITLAB"
          ],
          "description": "See RepoType above."
        },
        "revision": {
          "type": "string",
          "description": "The branch, tag, arbitrary ref, or SHA version of the repo to use when resolving the filename (optional). This field respects the same syntax/resolution as described here: https://git-scm.com/docs/gitrevisions If unspecified, the revision from which the trigger invocation originated is assumed to be the revision from which to read the specified path."
        },
        "uri": {
          "description": "The URI of the repo. Either uri or repository can be specified. If unspecified, the repo from which the trigger invocation originated is assumed to be the repo from which to read the specified path.",
          "type": "string"
        },
        "repository": {
          "description": "The fully qualified resource name of the Repos API repository. Either URI or repository can be specified. If unspecified, the repo from which the trigger invocation originated is assumed to be the repo from which to read the specified path.",
          "type": "string"
        }
      },
      "$id": "#/definitions/cloudbuild:v1:GitFileSource"
    },
    "cloudbuild:v1:CreateWorkerPoolOperationMetadata": {
      "description": "Metadata for the `CreateWorkerPool` operation.",
      "type": "object",
      "properties": {
        "completeTime": {
          "format": "date-time",
          "type": "string",
          "description": "Time the operation was completed."
        },
        "workerPool": {
          "description": "The resource name of the `WorkerPool` to create. Format: `projects/{project}/locations/{location}/workerPools/{worker_pool}`.",
          "type": "string"
        },
        "createTime": {
          "description": "Time the operation was created.",
          "format": "date-time",
          "type": "string"
        }
      },
      "$id": "#/definitions/cloudbuild:v1:CreateWorkerPoolOperationMetadata"
    },
    "cloudbuild:v1:RemoveGitLabConnectedRepositoryRequest": {
      "properties": {
        "connectedRepository": {
          "description": "The connected repository to remove.",
          "$ref": "#/definitions/cloudbuild:v1:GitLabRepositoryId"
        }
      },
      "type": "object",
      "description": "RPC request object accepted by RemoveGitLabConnectedRepository RPC method.",
      "$id": "#/definitions/cloudbuild:v1:RemoveGitLabConnectedRepositoryRequest"
    },
    "cloudbuild:v1:DeleteWorkerPoolOperationMetadata": {
      "description": "Metadata for the `DeleteWorkerPool` operation.",
      "properties": {
        "workerPool": {
          "description": "The resource name of the `WorkerPool` being deleted. Format: `projects/{project}/locations/{location}/workerPools/{worker_pool}`.",
          "type": "string"
        },
        "completeTime": {
          "description": "Time the operation was completed.",
          "type": "string",
          "format": "date-time"
        },
        "createTime": {
          "format": "date-time",
          "description": "Time the operation was created.",
          "type": "string"
        }
      },
      "type": "object",
      "$id": "#/definitions/cloudbuild:v1:DeleteWorkerPoolOperationMetadata"
    },
    "cloudbuild:v1:RetryBuildRequest": {
      "type": "object",
      "properties": {
        "id": {
          "description": "Required. Build ID of the original build.",
          "type": "string"
        },
        "projectId": {
          "type": "string",
          "description": "Required. ID of the project."
        },
        "name": {
          "type": "string",
          "description": "The name of the `Build` to retry. Format: `projects/{project}/locations/{location}/builds/{build}`"
        }
      },
      "description": "Specifies a build to retry.",
      "$id": "#/definitions/cloudbuild:v1:RetryBuildRequest"
    },
    "cloudbuild:v1:GitLabEnterpriseConfig": {
      "description": "GitLabEnterpriseConfig represents the configuration for a GitLabEnterprise integration.",
      "properties": {
        "sslCa": {
          "type": "string",
          "description": "The SSL certificate to use in requests to GitLab Enterprise instances."
        },
        "serviceDirectoryConfig": {
          "$ref": "#/definitions/cloudbuild:v1:ServiceDirectoryConfig",
          "description": "The Service Directory configuration to be used when reaching out to the GitLab Enterprise instance."
        },
        "hostUri": {
          "type": "string",
          "description": "Immutable. The URI of the GitlabEnterprise host."
        }
      },
      "type": "object",
      "$id": "#/definitions/cloudbuild:v1:GitLabEnterpriseConfig"
    },
    "cloudbuild:v1:BatchCreateGitLabConnectedRepositoriesResponseMetadata": {
      "properties": {
        "createTime": {
          "description": "Time the operation was created.",
          "format": "date-time",
          "type": "string"
        },
        "config": {
          "type": "string",
          "description": "The name of the `GitLabConfig` that added connected repositories. Format: `projects/{project}/locations/{location}/gitLabConfigs/{config}`"
        },
        "completeTime": {
          "format": "date-time",
          "type": "string",
          "description": "Time the operation was completed."
        }
      },
      "description": "Metadata for `BatchCreateGitLabConnectedRepositories` operation.",
      "type": "object",
      "$id": "#/definitions/cloudbuild:v1:BatchCreateGitLabConnectedRepositoriesResponseMetadata"
    },
    "cloudbuild:v1:DeleteGitLabConfigOperationMetadata": {
      "type": "object",
      "properties": {
        "gitlabConfig": {
          "type": "string",
          "description": "The resource name of the GitLabConfig to be created. Format: `projects/{project}/locations/{location}/gitlabConfigs/{id}`."
        },
        "completeTime": {
          "description": "Time the operation was completed.",
          "type": "string",
          "format": "date-time"
        },
        "createTime": {
          "format": "date-time",
          "type": "string",
          "description": "Time the operation was created."
        }
      },
      "description": "Metadata for `DeleteGitLabConfig` operation.",
      "$id": "#/definitions/cloudbuild:v1:DeleteGitLabConfigOperationMetadata"
    },
    "cloudbuild:v1:StorageSource": {
      "properties": {
        "generation": {
          "format": "int64",
          "description": "Cloud Storage generation for the object. If the generation is omitted, the latest generation will be used.",
          "type": "string"
        },
        "bucket": {
          "description": "Cloud Storage bucket containing the source (see [Bucket Name Requirements](https://cloud.google.com/storage/docs/bucket-naming#requirements)).",
          "type": "string"
        },
        "object": {
          "description": "Cloud Storage object containing the source. This object must be a zipped (`.zip`) or gzipped archive file (`.tar.gz`) containing source to build.",
          "type": "string"
        }
      },
      "description": "Location of the source in an archive file in Cloud Storage.",
      "type": "object",
      "$id": "#/definitions/cloudbuild:v1:StorageSource"
    },
    "cloudbuild:v1:Status": {
      "description": "The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).",
      "properties": {
        "details": {
          "type": "array",
          "description": "A list of messages that carry the error details. There is a common set of message types for APIs to use.",
          "items": {
            "type": "object",
            "additionalProperties": {
              "type": "object",
              "description": "Properties of the object. Contains field @type with type URL."
            }
          }
        },
        "code": {
          "type": "integer",
          "format": "int32",
          "description": "The status code, which should be an enum value of google.rpc.Code."
        },
        "message": {
          "type": "string",
          "description": "A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client."
        }
      },
      "type": "object",
      "$id": "#/definitions/cloudbuild:v1:Status"
    },
    "cloudbuild:v1:MavenArtifact": {
      "properties": {
        "repository": {
          "description": "Artifact Registry repository, in the form \"https://$REGION-maven.pkg.dev/$PROJECT/$REPOSITORY\" Artifact in the workspace specified by path will be uploaded to Artifact Registry with this location as a prefix.",
          "type": "string"
        },
        "groupId": {
          "description": "Maven `groupId` value used when uploading the artifact to Artifact Registry.",
          "type": "string"
        },
        "artifactId": {
          "description": "Maven `artifactId` value used when uploading the artifact to Artifact Registry.",
          "type": "string"
        },
        "path": {
          "description": "Path to an artifact in the build's workspace to be uploaded to Artifact Registry. This can be either an absolute path, e.g. /workspace/my-app/target/my-app-1.0.SNAPSHOT.jar or a relative path from /workspace, e.g. my-app/target/my-app-1.0.SNAPSHOT.jar.",
          "type": "string"
        },
        "version": {
          "description": "Maven `version` value used when uploading the artifact to Artifact Registry.",
          "type": "string"
        }
      },
      "type": "object",
      "description": "A Maven artifact to upload to Artifact Registry upon successful completion of all build steps.",
      "$id": "#/definitions/cloudbuild:v1:MavenArtifact"
    },
    "cloudbuild:v1:RepositoryEventConfig": {
      "type": "object",
      "properties": {
        "repositoryType": {
          "description": "Output only. The type of the SCM vendor the repository points to.",
          "type": "string",
          "readOnly": true,
          "enum": [
            "REPOSITORY_TYPE_UNSPECIFIED",
            "GITHUB",
            "GITHUB_ENTERPRISE",
            "GITLAB_ENTERPRISE"
          ]
        },
        "repository": {
          "description": "The resource name of the Repo API resource.",
          "type": "string"
        },
        "push": {
          "$ref": "#/definitions/cloudbuild:v1:PushFilter",
          "description": "Filter to match changes in refs like branches, tags."
        },
        "pullRequest": {
          "description": "Filter to match changes in pull requests.",
          "$ref": "#/definitions/cloudbuild:v1:PullRequestFilter"
        }
      },
      "description": "The configuration of a trigger that creates a build whenever an event from Repo API is received.",
      "$id": "#/definitions/cloudbuild:v1:RepositoryEventConfig"
    },
    "cloudbuild:v1:ProcessAppManifestCallbackOperationMetadata": {
      "type": "object",
      "description": "Metadata for `ProcessAppManifestCallback` operation.",
      "properties": {
        "githubEnterpriseConfig": {
          "type": "string",
          "description": "The resource name of the GitHubEnterprise to be created. Format: `projects/{project}/locations/{location}/githubEnterpriseConfigs/{id}`."
        },
        "createTime": {
          "format": "date-time",
          "description": "Time the operation was created.",
          "type": "string"
        },
        "completeTime": {
          "type": "string",
          "description": "Time the operation was completed.",
          "format": "date-time"
        }
      },
      "$id": "#/definitions/cloudbuild:v1:ProcessAppManifestCallbackOperationMetadata"
    },
    "cloudbuild:v1:GitHubEventsConfig": {
      "type": "object",
      "description": "GitHubEventsConfig describes the configuration of a trigger that creates a build whenever a GitHub event is received.",
      "properties": {
        "owner": {
          "type": "string",
          "description": "Owner of the repository. For example: The owner for https://github.com/googlecloudplatform/cloud-builders is \"googlecloudplatform\"."
        },
        "installationId": {
          "type": "string",
          "format": "int64",
          "description": "The installationID that emits the GitHub event.",
          "deprecated": true
        },
        "pullRequest": {
          "description": "filter to match changes in pull requests.",
          "$ref": "#/definitions/cloudbuild:v1:PullRequestFilter"
        },
        "name": {
          "description": "Name of the repository. For example: The name for https://github.com/googlecloudplatform/cloud-builders is \"cloud-builders\".",
          "type": "string"
        },
        "enterpriseConfigResourceName": {
          "description": "Optional. The resource name of the github enterprise config that should be applied to this installation. For example: \"projects/{$project_id}/locations/{$location_id}/githubEnterpriseConfigs/{$config_id}\"",
          "type": "string"
        },
        "push": {
          "description": "filter to match changes in refs like branches, tags.",
          "$ref": "#/definitions/cloudbuild:v1:PushFilter"
        }
      },
      "$id": "#/definitions/cloudbuild:v1:GitHubEventsConfig"
    },
    "cloudbuild:v1:WebhookConfig": {
      "type": "object",
      "description": "WebhookConfig describes the configuration of a trigger that creates a build whenever a webhook is sent to a trigger's webhook URL.",
      "properties": {
        "state": {
          "description": "Potential issues with the underlying Pub/Sub subscription configuration. Only populated on get requests.",
          "enum": [
            "STATE_UNSPECIFIED",
            "OK",
            "SECRET_DELETED"
          ],
          "type": "string"
        },
        "secret": {
          "description": "Required. Resource name for the secret required as a URL parameter.",
          "type": "string"
        }
      },
      "$id": "#/definitions/cloudbuild:v1:WebhookConfig"
    },
    "cloudbuild:v1:ListGitLabRepositoriesResponse": {
      "properties": {
        "nextPageToken": {
          "type": "string",
          "description": "A token that can be sent as `page_token` to retrieve the next page. If this field is omitted, there are no subsequent pages."
        },
        "gitlabRepositories": {
          "description": "List of GitLab repositories",
          "type": "array",
          "items": {
            "$ref": "#/definitions/cloudbuild:v1:GitLabRepository"
          }
        }
      },
      "description": "RPC response object returned by the ListGitLabRepositories RPC method.",
      "type": "object",
      "$id": "#/definitions/cloudbuild:v1:ListGitLabRepositoriesResponse"
    },
    "cloudbuild:v1:Artifacts": {
      "description": "Artifacts produced by a build that should be uploaded upon successful completion of all build steps.",
      "type": "object",
      "properties": {
        "mavenArtifacts": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/cloudbuild:v1:MavenArtifact"
          },
          "description": "A list of Maven artifacts to be uploaded to Artifact Registry upon successful completion of all build steps. Artifacts in the workspace matching specified paths globs will be uploaded to the specified Artifact Registry repository using the builder service account's credentials. If any artifacts fail to be pushed, the build is marked FAILURE."
        },
        "pythonPackages": {
          "description": "A list of Python packages to be uploaded to Artifact Registry upon successful completion of all build steps. The build service account credentials will be used to perform the upload. If any objects fail to be pushed, the build is marked FAILURE.",
          "items": {
            "$ref": "#/definitions/cloudbuild:v1:PythonPackage"
          },
          "type": "array"
        },
        "objects": {
          "$ref": "#/definitions/cloudbuild:v1:ArtifactObjects",
          "description": "A list of objects to be uploaded to Cloud Storage upon successful completion of all build steps. Files in the workspace matching specified paths globs will be uploaded to the specified Cloud Storage location using the builder service account's credentials. The location and generation of the uploaded objects will be stored in the Build resource's results field. If any objects fail to be pushed, the build is marked FAILURE."
        },
        "npmPackages": {
          "description": "A list of npm packages to be uploaded to Artifact Registry upon successful completion of all build steps. Npm packages in the specified paths will be uploaded to the specified Artifact Registry repository using the builder service account's credentials. If any packages fail to be pushed, the build is marked FAILURE.",
          "items": {
            "$ref": "#/definitions/cloudbuild:v1:NpmPackage"
          },
          "type": "array"
        },
        "images": {
          "description": "A list of images to be pushed upon the successful completion of all build steps. The images will be pushed using the builder service account's credentials. The digests of the pushed images will be stored in the Build resource's results field. If any of the images fail to be pushed, the build is marked FAILURE.",
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "$id": "#/definitions/cloudbuild:v1:Artifacts"
    },
    "cloudbuild:v1:CreateGitLabConfigOperationMetadata": {
      "type": "object",
      "description": "Metadata for `CreateGitLabConfig` operation.",
      "properties": {
        "createTime": {
          "description": "Time the operation was created.",
          "format": "date-time",
          "type": "string"
        },
        "completeTime": {
          "type": "string",
          "description": "Time the operation was completed.",
          "format": "date-time"
        },
        "gitlabConfig": {
          "type": "string",
          "description": "The resource name of the GitLabConfig to be created. Format: `projects/{project}/locations/{location}/gitlabConfigs/{id}`."
        }
      },
      "$id": "#/definitions/cloudbuild:v1:CreateGitLabConfigOperationMetadata"
    },
    "cloudbuild:v1:GitLabSecrets": {
      "description": "GitLabSecrets represents the secrets in Secret Manager for a GitLab integration.",
      "properties": {
        "readAccessTokenVersion": {
          "description": "Required. The resource name for the read access token\u2019s secret version",
          "type": "string"
        },
        "apiKeyVersion": {
          "description": "Required. Immutable. API Key that will be attached to webhook requests from GitLab to Cloud Build.",
          "type": "string"
        },
        "webhookSecretVersion": {
          "type": "string",
          "description": "Required. Immutable. The resource name for the webhook secret\u2019s secret version. Once this field has been set, it cannot be changed. If you need to change it, please create another GitLabConfig."
        },
        "apiAccessTokenVersion": {
          "type": "string",
          "description": "Required. The resource name for the api access token\u2019s secret version"
        }
      },
      "type": "object",
      "$id": "#/definitions/cloudbuild:v1:GitLabSecrets"
    },
    "cloudbuild:v1:BatchCreateBitbucketServerConnectedRepositoriesResponseMetadata": {
      "description": "Metadata for `BatchCreateBitbucketServerConnectedRepositories` operation.",
      "type": "object",
      "properties": {
        "createTime": {
          "type": "string",
          "format": "date-time",
          "description": "Time the operation was created."
        },
        "completeTime": {
          "description": "Time the operation was completed.",
          "type": "string",
          "format": "date-time"
        },
        "config": {
          "type": "string",
          "description": "The name of the `BitbucketServerConfig` that added connected repositories. Format: `projects/{project}/locations/{location}/bitbucketServerConfigs/{config}`"
        }
      },
      "$id": "#/definitions/cloudbuild:v1:BatchCreateBitbucketServerConnectedRepositoriesResponseMetadata"
    },
    "cloudbuild:v1:StorageSourceManifest": {
      "description": "Location of the source manifest in Cloud Storage. This feature is in Preview; see description [here](https://github.com/GoogleCloudPlatform/cloud-builders/tree/master/gcs-fetcher).",
      "type": "object",
      "properties": {
        "bucket": {
          "type": "string",
          "description": "Cloud Storage bucket containing the source manifest (see [Bucket Name Requirements](https://cloud.google.com/storage/docs/bucket-naming#requirements))."
        },
        "generation": {
          "description": "Cloud Storage generation for the object. If the generation is omitted, the latest generation will be used.",
          "format": "int64",
          "type": "string"
        },
        "object": {
          "description": "Cloud Storage object containing the source manifest. This object must be a JSON file.",
          "type": "string"
        }
      },
      "$id": "#/definitions/cloudbuild:v1:StorageSourceManifest"
    },
    "cloudbuild:v1:BuildStep": {
      "description": "A step in the build pipeline.",
      "properties": {
        "volumes": {
          "items": {
            "$ref": "#/definitions/cloudbuild:v1:Volume"
          },
          "description": "List of volumes to mount into the build step. Each volume is created as an empty volume prior to execution of the build step. Upon completion of the build, volumes and their contents are discarded. Using a named volume in only one step is not valid as it is indicative of a build request with an incorrect configuration.",
          "type": "array"
        },
        "name": {
          "description": "Required. The name of the container image that will run this particular build step. If the image is available in the host's Docker daemon's cache, it will be run directly. If not, the host will attempt to pull the image first, using the builder service account's credentials if necessary. The Docker daemon's cache will already have the latest versions of all of the officially supported build steps ([https://github.com/GoogleCloudPlatform/cloud-builders](https://github.com/GoogleCloudPlatform/cloud-builders)). The Docker daemon will also have cached many of the layers for some popular images, like \"ubuntu\", \"debian\", but they will be refreshed at the time you attempt to use them. If you built an image in a previous build step, it will be stored in the host's Docker daemon's cache and is available to use as the name for a later build step.",
          "type": "string"
        },
        "allowExitCodes": {
          "type": "array",
          "items": {
            "type": "integer",
            "format": "int32"
          },
          "description": "Allow this build step to fail without failing the entire build if and only if the exit code is one of the specified codes. If allow_failure is also specified, this field will take precedence."
        },
        "allowFailure": {
          "description": "Allow this build step to fail without failing the entire build. If false, the entire build will fail if this step fails. Otherwise, the build will succeed, but this step will still have a failure status. Error information will be reported in the failure_detail field.",
          "type": "boolean"
        },
        "env": {
          "description": "A list of environment variable definitions to be used when running a step. The elements are of the form \"KEY=VALUE\" for the environment variable \"KEY\" being given the value \"VALUE\".",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "exitCode": {
          "type": "integer",
          "readOnly": true,
          "format": "int32",
          "description": "Output only. Return code from running the step."
        },
        "pullTiming": {
          "description": "Output only. Stores timing information for pulling this build step's builder image only.",
          "readOnly": true,
          "$ref": "#/definitions/cloudbuild:v1:TimeSpan"
        },
        "waitFor": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "The ID(s) of the step(s) that this build step depends on. This build step will not start until all the build steps in `wait_for` have completed successfully. If `wait_for` is empty, this build step will start when all previous build steps in the `Build.Steps` list have completed successfully."
        },
        "secretEnv": {
          "items": {
            "type": "string"
          },
          "description": "A list of environment variables which are encrypted using a Cloud Key Management Service crypto key. These values must be specified in the build's `Secret`.",
          "type": "array"
        },
        "dir": {
          "type": "string",
          "description": "Working directory to use when running this step's container. If this value is a relative path, it is relative to the build's working directory. If this value is absolute, it may be outside the build's working directory, in which case the contents of the path may not be persisted across build step executions, unless a `volume` for that path is specified. If the build specifies a `RepoSource` with `dir` and a step with a `dir`, which specifies an absolute path, the `RepoSource` `dir` is ignored for the step's execution."
        },
        "args": {
          "items": {
            "type": "string"
          },
          "description": "A list of arguments that will be presented to the step when it is started. If the image used to run the step's container has an entrypoint, the `args` are used as arguments to that entrypoint. If the image does not define an entrypoint, the first element in args is used as the entrypoint, and the remainder will be used as arguments.",
          "type": "array"
        },
        "entrypoint": {
          "description": "Entrypoint to be used instead of the build step image's default entrypoint. If unset, the image's default entrypoint is used.",
          "type": "string"
        },
        "timeout": {
          "description": "Time limit for executing this build step. If not defined, the step has no time limit and will be allowed to continue to run until either it completes or the build itself times out.",
          "format": "duration",
          "type": "string"
        },
        "id": {
          "type": "string",
          "description": "Unique identifier for this build step, used in `wait_for` to reference this build step as a dependency."
        },
        "status": {
          "readOnly": true,
          "type": "string",
          "enum": [
            "STATUS_UNKNOWN",
            "PENDING",
            "QUEUED",
            "WORKING",
            "SUCCESS",
            "FAILURE",
            "INTERNAL_ERROR",
            "TIMEOUT",
            "CANCELLED",
            "EXPIRED"
          ],
          "description": "Output only. Status of the build step. At this time, build step status is only updated on build completion; step status is not updated in real-time as the build progresses."
        },
        "timing": {
          "$ref": "#/definitions/cloudbuild:v1:TimeSpan",
          "description": "Output only. Stores timing information for executing this build step.",
          "readOnly": true
        },
        "automapSubstitutions": {
          "description": "Option to include built-in and custom substitutions as env variables for this build step. This option will override the global option in BuildOption.",
          "type": "boolean"
        },
        "script": {
          "description": "A shell script to be executed in the step. When script is provided, the user cannot specify the entrypoint or args.",
          "type": "string"
        }
      },
      "type": "object",
      "$id": "#/definitions/cloudbuild:v1:BuildStep"
    },
    "cloudbuild:v1:ReceiveTriggerWebhookResponse": {
      "type": "object",
      "description": "ReceiveTriggerWebhookResponse [Experimental] is the response object for the ReceiveTriggerWebhook method.",
      "properties": {},
      "$id": "#/definitions/cloudbuild:v1:ReceiveTriggerWebhookResponse"
    },
    "cloudbuild:v1:BitbucketServerConnectedRepository": {
      "properties": {
        "parent": {
          "description": "The name of the `BitbucketServerConfig` that added connected repository. Format: `projects/{project}/locations/{location}/bitbucketServerConfigs/{config}`",
          "type": "string"
        },
        "repo": {
          "description": "The Bitbucket Server repositories to connect.",
          "$ref": "#/definitions/cloudbuild:v1:BitbucketServerRepositoryId"
        },
        "status": {
          "readOnly": true,
          "description": "Output only. The status of the repo connection request.",
          "$ref": "#/definitions/cloudbuild:v1:Status"
        }
      },
      "description": "/ BitbucketServerConnectedRepository represents a connected Bitbucket Server / repository.",
      "type": "object",
      "$id": "#/definitions/cloudbuild:v1:BitbucketServerConnectedRepository"
    },
    "cloudbuild:v1:HttpBody": {
      "description": "Message that represents an arbitrary HTTP body. It should only be used for payload formats that can't be represented as JSON, such as raw binary or an HTML page. This message can be used both in streaming and non-streaming API methods in the request as well as the response. It can be used as a top-level request field, which is convenient if one wants to extract parameters from either the URL or HTTP template into the request fields and also want access to the raw HTTP body. Example: message GetResourceRequest { // A unique request id. string request_id = 1; // The raw HTTP body is bound to this field. google.api.HttpBody http_body = 2; } service ResourceService { rpc GetResource(GetResourceRequest) returns (google.api.HttpBody); rpc UpdateResource(google.api.HttpBody) returns (google.protobuf.Empty); } Example with streaming methods: service CaldavService { rpc GetCalendar(stream google.api.HttpBody) returns (stream google.api.HttpBody); rpc UpdateCalendar(stream google.api.HttpBody) returns (stream google.api.HttpBody); } Use of this type only changes how the request and response bodies are handled, all other features will continue to work unchanged.",
      "type": "object",
      "properties": {
        "data": {
          "type": "string",
          "format": "byte",
          "description": "The HTTP request/response body as raw binary."
        },
        "extensions": {
          "type": "array",
          "description": "Application specific response metadata. Must be set in the first response for streaming APIs.",
          "items": {
            "additionalProperties": {
              "description": "Properties of the object. Contains field @type with type URL.",
              "type": "object"
            },
            "type": "object"
          }
        },
        "contentType": {
          "type": "string",
          "description": "The HTTP Content-Type header value specifying the content type of the body."
        }
      },
      "$id": "#/definitions/cloudbuild:v1:HttpBody"
    },
    "cloudbuild:v1:Warning": {
      "type": "object",
      "description": "A non-fatal problem encountered during the execution of the build.",
      "properties": {
        "text": {
          "type": "string",
          "description": "Explanation of the warning generated."
        },
        "priority": {
          "enum": [
            "PRIORITY_UNSPECIFIED",
            "INFO",
            "WARNING",
            "ALERT"
          ],
          "description": "The priority for this warning.",
          "type": "string"
        }
      },
      "$id": "#/definitions/cloudbuild:v1:Warning"
    },
    "cloudbuild:v1:GitSource": {
      "properties": {
        "url": {
          "type": "string",
          "description": "Location of the Git repo to build. This will be used as a `git remote`, see https://git-scm.com/docs/git-remote."
        },
        "revision": {
          "description": "The revision to fetch from the Git repository such as a branch, a tag, a commit SHA, or any Git ref. Cloud Build uses `git fetch` to fetch the revision from the Git repository; therefore make sure that the string you provide for `revision` is parsable by the command. For information on string values accepted by `git fetch`, see https://git-scm.com/docs/gitrevisions#_specifying_revisions. For information on `git fetch`, see https://git-scm.com/docs/git-fetch.",
          "type": "string"
        },
        "dir": {
          "description": "Directory, relative to the source root, in which to run the build. This must be a relative path. If a step's `dir` is specified and is an absolute path, this value is ignored for that step's execution.",
          "type": "string"
        }
      },
      "type": "object",
      "description": "Location of the source in any accessible Git repository.",
      "$id": "#/definitions/cloudbuild:v1:GitSource"
    },
    "cloudbuild:v1:SecretManagerSecret": {
      "properties": {
        "env": {
          "description": "Environment variable name to associate with the secret. Secret environment variables must be unique across all of a build's secrets, and must be used by at least one build step.",
          "type": "string"
        },
        "versionName": {
          "description": "Resource name of the SecretVersion. In format: projects/*/secrets/*/versions/*",
          "type": "string"
        }
      },
      "description": "Pairs a secret environment variable with a SecretVersion in Secret Manager.",
      "type": "object",
      "$id": "#/definitions/cloudbuild:v1:SecretManagerSecret"
    },
    "cloudbuild:v1:Volume": {
      "description": "Volume describes a Docker container volume which is mounted into build steps in order to persist files across build step execution.",
      "properties": {
        "name": {
          "description": "Name of the volume to mount. Volume names must be unique per build step and must be valid names for Docker volumes. Each named volume must be used by at least two build steps.",
          "type": "string"
        },
        "path": {
          "description": "Path at which to mount the volume. Paths must be absolute and cannot conflict with other volume paths on the same build step or with certain reserved volume paths.",
          "type": "string"
        }
      },
      "type": "object",
      "$id": "#/definitions/cloudbuild:v1:Volume"
    },
    "cloudbuild:v1:GitHubEnterpriseConfig": {
      "type": "object",
      "description": "GitHubEnterpriseConfig represents a configuration for a GitHub Enterprise server.",
      "properties": {
        "displayName": {
          "type": "string",
          "description": "Name to display for this config."
        },
        "hostUrl": {
          "type": "string",
          "description": "The URL of the github enterprise host the configuration is for."
        },
        "name": {
          "description": "Optional. The full resource name for the GitHubEnterpriseConfig For example: \"projects/{$project_id}/locations/{$location_id}/githubEnterpriseConfigs/{$config_id}\"",
          "type": "string"
        },
        "peeredNetwork": {
          "description": "Optional. The network to be used when reaching out to the GitHub Enterprise server. The VPC network must be enabled for private service connection. This should be set if the GitHub Enterprise server is hosted on-premises and not reachable by public internet. If this field is left empty, no network peering will occur and calls to the GitHub Enterprise server will be made over the public internet. Must be in the format `projects/{project}/global/networks/{network}`, where {project} is a project number or id and {network} is the name of a VPC network in the project.",
          "type": "string"
        },
        "webhookKey": {
          "type": "string",
          "description": "The key that should be attached to webhook calls to the ReceiveWebhook endpoint."
        },
        "secrets": {
          "$ref": "#/definitions/cloudbuild:v1:GitHubEnterpriseSecrets",
          "description": "Names of secrets in Secret Manager."
        },
        "sslCa": {
          "description": "Optional. SSL certificate to use for requests to GitHub Enterprise.",
          "type": "string"
        },
        "createTime": {
          "description": "Output only. Time when the installation was associated with the project.",
          "readOnly": true,
          "format": "date-time",
          "type": "string"
        },
        "appId": {
          "type": "string",
          "format": "int64",
          "description": "Required. The GitHub app id of the Cloud Build app on the GitHub Enterprise server."
        }
      },
      "$id": "#/definitions/cloudbuild:v1:GitHubEnterpriseConfig"
    },
    "cloudbuild:v1:ApproveBuildRequest": {
      "properties": {
        "approvalResult": {
          "description": "Approval decision and metadata.",
          "$ref": "#/definitions/cloudbuild:v1:ApprovalResult"
        }
      },
      "type": "object",
      "description": "Request to approve or reject a pending build.",
      "$id": "#/definitions/cloudbuild:v1:ApproveBuildRequest"
    },
    "cloudbuild:v1:FailureInfo": {
      "description": "A fatal problem encountered during the execution of the build.",
      "properties": {
        "type": {
          "enum": [
            "FAILURE_TYPE_UNSPECIFIED",
            "PUSH_FAILED",
            "PUSH_IMAGE_NOT_FOUND",
            "PUSH_NOT_AUTHORIZED",
            "LOGGING_FAILURE",
            "USER_BUILD_STEP",
            "FETCH_SOURCE_FAILED"
          ],
          "type": "string",
          "description": "The name of the failure."
        },
        "detail": {
          "description": "Explains the failure issue in more detail using hard-coded text.",
          "type": "string"
        }
      },
      "type": "object",
      "$id": "#/definitions/cloudbuild:v1:FailureInfo"
    },
    "cloudbuild:v1:WorkerConfig": {
      "properties": {
        "machineType": {
          "description": "Machine type of a worker, such as `e2-medium`. See [Worker pool config file](https://cloud.google.com/build/docs/private-pools/worker-pool-config-file-schema). If left blank, Cloud Build will use a sensible default.",
          "type": "string"
        },
        "diskSizeGb": {
          "type": "string",
          "description": "Size of the disk attached to the worker, in GB. See [Worker pool config file](https://cloud.google.com/build/docs/private-pools/worker-pool-config-file-schema). Specify a value of up to 2000. If `0` is specified, Cloud Build will use a standard disk size.",
          "format": "int64"
        }
      },
      "type": "object",
      "description": "Defines the configuration to be used for creating workers in the pool.",
      "$id": "#/definitions/cloudbuild:v1:WorkerConfig"
    },
    "cloudbuild:v1:CreateGitHubEnterpriseConfigOperationMetadata": {
      "description": "Metadata for `CreateGithubEnterpriseConfig` operation.",
      "properties": {
        "githubEnterpriseConfig": {
          "type": "string",
          "description": "The resource name of the GitHubEnterprise to be created. Format: `projects/{project}/locations/{location}/githubEnterpriseConfigs/{id}`."
        },
        "completeTime": {
          "format": "date-time",
          "type": "string",
          "description": "Time the operation was completed."
        },
        "createTime": {
          "format": "date-time",
          "type": "string",
          "description": "Time the operation was created."
        }
      },
      "type": "object",
      "$id": "#/definitions/cloudbuild:v1:CreateGitHubEnterpriseConfigOperationMetadata"
    },
    "cloudbuild:v1:Source": {
      "description": "Location of the source in a supported storage service.",
      "type": "object",
      "properties": {
        "connectedRepository": {
          "$ref": "#/definitions/cloudbuild:v1:ConnectedRepository",
          "description": "Optional. If provided, get the source from this 2nd-gen Google Cloud Build repository resource."
        },
        "storageSourceManifest": {
          "$ref": "#/definitions/cloudbuild:v1:StorageSourceManifest",
          "description": "If provided, get the source from this manifest in Cloud Storage. This feature is in Preview; see description [here](https://github.com/GoogleCloudPlatform/cloud-builders/tree/master/gcs-fetcher)."
        },
        "gitSource": {
          "$ref": "#/definitions/cloudbuild:v1:GitSource",
          "description": "If provided, get the source from this Git repository."
        },
        "storageSource": {
          "description": "If provided, get the source from this location in Cloud Storage.",
          "$ref": "#/definitions/cloudbuild:v1:StorageSource"
        },
        "repoSource": {
          "$ref": "#/definitions/cloudbuild:v1:RepoSource",
          "description": "If provided, get the source from this location in a Cloud Source Repository."
        }
      },
      "$id": "#/definitions/cloudbuild:v1:Source"
    },
    "cloudbuild:v1:BuiltImage": {
      "properties": {
        "pushTiming": {
          "description": "Output only. Stores timing information for pushing the specified image.",
          "$ref": "#/definitions/cloudbuild:v1:TimeSpan",
          "readOnly": true
        },
        "digest": {
          "description": "Docker Registry 2.0 digest.",
          "type": "string"
        },
        "name": {
          "type": "string",
          "description": "Name used to push the container image to Google Container Registry, as presented to `docker push`."
        }
      },
      "description": "An image built by the pipeline.",
      "type": "object",
      "$id": "#/definitions/cloudbuild:v1:BuiltImage"
    },
    "cloudbuild:v1:NpmPackage": {
      "description": "Npm package to upload to Artifact Registry upon successful completion of all build steps.",
      "type": "object",
      "properties": {
        "packagePath": {
          "description": "Path to the package.json. e.g. workspace/path/to/package",
          "type": "string"
        },
        "repository": {
          "type": "string",
          "description": "Artifact Registry repository, in the form \"https://$REGION-npm.pkg.dev/$PROJECT/$REPOSITORY\" Npm package in the workspace specified by path will be zipped and uploaded to Artifact Registry with this location as a prefix."
        }
      },
      "$id": "#/definitions/cloudbuild:v1:NpmPackage"
    },
    "cloudbuild:v1:ArtifactResult": {
      "description": "An artifact that was uploaded during a build. This is a single record in the artifact manifest JSON file.",
      "properties": {
        "fileHash": {
          "items": {
            "$ref": "#/definitions/cloudbuild:v1:FileHashes"
          },
          "type": "array",
          "description": "The file hash of the artifact."
        },
        "location": {
          "type": "string",
          "description": "The path of an artifact in a Cloud Storage bucket, with the generation number. For example, `gs://mybucket/path/to/output.jar#generation`."
        }
      },
      "type": "object",
      "$id": "#/definitions/cloudbuild:v1:ArtifactResult"
    },
    "cloudbuild:v1:CreateBitbucketServerConnectedRepositoryRequest": {
      "description": "Request to connect a repository from a connected Bitbucket Server host.",
      "type": "object",
      "properties": {
        "bitbucketServerConnectedRepository": {
          "description": "Required. The Bitbucket Server repository to connect.",
          "$ref": "#/definitions/cloudbuild:v1:BitbucketServerConnectedRepository"
        },
        "parent": {
          "description": "Required. The name of the `BitbucketServerConfig` that added connected repository. Format: `projects/{project}/locations/{location}/bitbucketServerConfigs/{config}`",
          "type": "string"
        }
      },
      "$id": "#/definitions/cloudbuild:v1:CreateBitbucketServerConnectedRepositoryRequest"
    },
    "cloudbuild:v1:Build": {
      "description": "A build resource in the Cloud Build API. At a high level, a `Build` describes where to find source code, how to build it (for example, the builder image to run on the source), and where to store the built artifacts. Fields can include the following variables, which will be expanded when the build is created: - $PROJECT_ID: the project ID of the build. - $PROJECT_NUMBER: the project number of the build. - $LOCATION: the location/region of the build. - $BUILD_ID: the autogenerated ID of the build. - $REPO_NAME: the source repository name specified by RepoSource. - $BRANCH_NAME: the branch name specified by RepoSource. - $TAG_NAME: the tag name specified by RepoSource. - $REVISION_ID or $COMMIT_SHA: the commit SHA specified by RepoSource or resolved from the specified branch or tag. - $SHORT_SHA: first 7 characters of $REVISION_ID or $COMMIT_SHA.",
      "properties": {
        "statusDetail": {
          "description": "Output only. Customer-readable message about the current status.",
          "readOnly": true,
          "type": "string"
        },
        "createTime": {
          "format": "date-time",
          "description": "Output only. Time at which the request to create the build was received.",
          "type": "string",
          "readOnly": true
        },
        "logsBucket": {
          "description": "Cloud Storage bucket where logs should be written (see [Bucket Name Requirements](https://cloud.google.com/storage/docs/bucket-naming#requirements)). Logs file names will be of the format `${logs_bucket}/log-${build_id}.txt`.",
          "type": "string"
        },
        "source": {
          "$ref": "#/definitions/cloudbuild:v1:Source",
          "description": "The location of the source files to build."
        },
        "availableSecrets": {
          "description": "Secrets and secret environment variables.",
          "$ref": "#/definitions/cloudbuild:v1:Secrets"
        },
        "results": {
          "description": "Output only. Results of the build.",
          "$ref": "#/definitions/cloudbuild:v1:Results",
          "readOnly": true
        },
        "name": {
          "readOnly": true,
          "description": "Output only. The 'Build' name with format: `projects/{project}/locations/{location}/builds/{build}`, where {build} is a unique identifier generated by the service.",
          "type": "string"
        },
        "timeout": {
          "description": "Amount of time that this build should be allowed to run, to second granularity. If this amount of time elapses, work on the build will cease and the build status will be `TIMEOUT`. `timeout` starts ticking from `startTime`. Default time is 60 minutes.",
          "format": "duration",
          "type": "string"
        },
        "id": {
          "type": "string",
          "description": "Output only. Unique identifier of the build.",
          "readOnly": true
        },
        "images": {
          "items": {
            "type": "string"
          },
          "description": "A list of images to be pushed upon the successful completion of all build steps. The images are pushed using the builder service account's credentials. The digests of the pushed images will be stored in the `Build` resource's results field. If any of the images fail to be pushed, the build status is marked `FAILURE`.",
          "type": "array"
        },
        "buildTriggerId": {
          "description": "Output only. The ID of the `BuildTrigger` that triggered this build, if it was triggered automatically.",
          "type": "string",
          "readOnly": true
        },
        "options": {
          "$ref": "#/definitions/cloudbuild:v1:BuildOptions",
          "description": "Special options for this build."
        },
        "failureInfo": {
          "description": "Output only. Contains information about the build when status=FAILURE.",
          "readOnly": true,
          "$ref": "#/definitions/cloudbuild:v1:FailureInfo"
        },
        "startTime": {
          "type": "string",
          "format": "date-time",
          "description": "Output only. Time at which execution of the build was started.",
          "readOnly": true
        },
        "status": {
          "type": "string",
          "readOnly": true,
          "description": "Output only. Status of the build.",
          "enum": [
            "STATUS_UNKNOWN",
            "PENDING",
            "QUEUED",
            "WORKING",
            "SUCCESS",
            "FAILURE",
            "INTERNAL_ERROR",
            "TIMEOUT",
            "CANCELLED",
            "EXPIRED"
          ]
        },
        "artifacts": {
          "$ref": "#/definitions/cloudbuild:v1:Artifacts",
          "description": "Artifacts produced by the build that should be uploaded upon successful completion of all build steps."
        },
        "sourceProvenance": {
          "readOnly": true,
          "description": "Output only. A permanent fixed identifier for source.",
          "$ref": "#/definitions/cloudbuild:v1:SourceProvenance"
        },
        "secrets": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/cloudbuild:v1:Secret"
          },
          "description": "Secrets to decrypt using Cloud Key Management Service. Note: Secret Manager is the recommended technique for managing sensitive data with Cloud Build. Use `available_secrets` to configure builds to access secrets from Secret Manager. For instructions, see: https://cloud.google.com/cloud-build/docs/securing-builds/use-secrets"
        },
        "tags": {
          "description": "Tags for annotation of a `Build`. These are not docker tags.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "steps": {
          "description": "Required. The operations to be performed on the workspace.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/cloudbuild:v1:BuildStep"
          }
        },
        "substitutions": {
          "description": "Substitutions data for `Build` resource.",
          "additionalProperties": {
            "type": "string"
          },
          "type": "object"
        },
        "queueTtl": {
          "format": "duration",
          "type": "string",
          "description": "TTL in queue for this build. If provided and the build is enqueued longer than this value, the build will expire and the build status will be `EXPIRED`. The TTL starts ticking from create_time."
        },
        "finishTime": {
          "description": "Output only. Time at which execution of the build was finished. The difference between finish_time and start_time is the duration of the build's execution.",
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "projectId": {
          "type": "string",
          "readOnly": true,
          "description": "Output only. ID of the project."
        },
        "logUrl": {
          "description": "Output only. URL to logs for this build in Google Cloud Console.",
          "readOnly": true,
          "type": "string"
        },
        "serviceAccount": {
          "type": "string",
          "description": "IAM service account whose credentials will be used at build runtime. Must be of the format `projects/{PROJECT_ID}/serviceAccounts/{ACCOUNT}`. ACCOUNT can be email address or uniqueId of the service account. "
        },
        "approval": {
          "$ref": "#/definitions/cloudbuild:v1:BuildApproval",
          "description": "Output only. Describes this build's approval configuration, status, and result.",
          "readOnly": true
        },
        "warnings": {
          "description": "Output only. Non-fatal problems encountered during the execution of the build.",
          "items": {
            "$ref": "#/definitions/cloudbuild:v1:Warning"
          },
          "readOnly": true,
          "type": "array"
        },
        "timing": {
          "additionalProperties": {
            "$ref": "#/definitions/cloudbuild:v1:TimeSpan"
          },
          "readOnly": true,
          "type": "object",
          "description": "Output only. Stores timing information for phases of the build. Valid keys are: * BUILD: time to execute all build steps. * PUSH: time to push all artifacts including docker images and non docker artifacts. * FETCHSOURCE: time to fetch source. * SETUPBUILD: time to set up build. If the build does not specify source or images, these keys will not be included."
        }
      },
      "type": "object",
      "$id": "#/definitions/cloudbuild:v1:Build"
    },
    "cloudbuild:v1:ListBitbucketServerConfigsResponse": {
      "type": "object",
      "description": "RPC response object returned by ListBitbucketServerConfigs RPC method.",
      "properties": {
        "bitbucketServerConfigs": {
          "items": {
            "$ref": "#/definitions/cloudbuild:v1:BitbucketServerConfig"
          },
          "description": "A list of BitbucketServerConfigs",
          "type": "array"
        },
        "nextPageToken": {
          "type": "string",
          "description": "A token that can be sent as `page_token` to retrieve the next page. If this field is omitted, there are no subsequent pages."
        }
      },
      "$id": "#/definitions/cloudbuild:v1:ListBitbucketServerConfigsResponse"
    },
    "cloudbuild:v1:SourceProvenance": {
      "type": "object",
      "properties": {
        "resolvedRepoSource": {
          "description": "A copy of the build's `source.repo_source`, if exists, with any revisions resolved.",
          "$ref": "#/definitions/cloudbuild:v1:RepoSource"
        },
        "resolvedStorageSource": {
          "$ref": "#/definitions/cloudbuild:v1:StorageSource",
          "description": "A copy of the build's `source.storage_source`, if exists, with any generations resolved."
        },
        "resolvedStorageSourceManifest": {
          "$ref": "#/definitions/cloudbuild:v1:StorageSourceManifest",
          "description": "A copy of the build's `source.storage_source_manifest`, if exists, with any revisions resolved. This feature is in Preview."
        },
        "fileHashes": {
          "description": "Output only. Hash(es) of the build source, which can be used to verify that the original source integrity was maintained in the build. Note that `FileHashes` will only be populated if `BuildOptions` has requested a `SourceProvenanceHash`. The keys to this map are file paths used as build source and the values contain the hash values for those files. If the build source came in a single package such as a gzipped tarfile (`.tar.gz`), the `FileHash` will be for the single path to that file.",
          "readOnly": true,
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/cloudbuild:v1:FileHashes"
          }
        }
      },
      "description": "Provenance of the source. Ways to find the original source, or verify that some source was used for this build.",
      "$id": "#/definitions/cloudbuild:v1:SourceProvenance"
    },
    "cloudbuild:v1:BuildTrigger": {
      "properties": {
        "approvalConfig": {
          "$ref": "#/definitions/cloudbuild:v1:ApprovalConfig",
          "description": "Configuration for manual approval to start a build invocation of this BuildTrigger."
        },
        "bitbucketServerTriggerConfig": {
          "description": "BitbucketServerTriggerConfig describes the configuration of a trigger that creates a build whenever a Bitbucket Server event is received.",
          "$ref": "#/definitions/cloudbuild:v1:BitbucketServerTriggerConfig"
        },
        "eventType": {
          "description": "EventType allows the user to explicitly set the type of event to which this BuildTrigger should respond. This field will be validated against the rest of the configuration if it is set.",
          "enum": [
            "EVENT_TYPE_UNSPECIFIED",
            "REPO",
            "WEBHOOK",
            "PUBSUB",
            "MANUAL"
          ],
          "type": "string"
        },
        "autodetect": {
          "description": "Autodetect build configuration. The following precedence is used (case insensitive): 1. cloudbuild.yaml 2. cloudbuild.yml 3. cloudbuild.json 4. Dockerfile Currently only available for GitHub App Triggers.",
          "type": "boolean"
        },
        "includeBuildLogs": {
          "enum": [
            "INCLUDE_BUILD_LOGS_UNSPECIFIED",
            "INCLUDE_BUILD_LOGS_WITH_STATUS"
          ],
          "type": "string",
          "description": "If set to INCLUDE_BUILD_LOGS_WITH_STATUS, log url will be shown on GitHub page when build status is final. Setting this field to INCLUDE_BUILD_LOGS_WITH_STATUS for non GitHub triggers results in INVALID_ARGUMENT error."
        },
        "filter": {
          "type": "string",
          "description": "A Common Expression Language string."
        },
        "repositoryEventConfig": {
          "$ref": "#/definitions/cloudbuild:v1:RepositoryEventConfig",
          "description": "The configuration of a trigger that creates a build whenever an event from Repo API is received."
        },
        "gitFileSource": {
          "$ref": "#/definitions/cloudbuild:v1:GitFileSource",
          "description": "The file source describing the local or remote Build template."
        },
        "filename": {
          "type": "string",
          "description": "Path, from the source root, to the build configuration file (i.e. cloudbuild.yaml)."
        },
        "name": {
          "description": "User-assigned name of the trigger. Must be unique within the project. Trigger names must meet the following requirements: + They must contain only alphanumeric characters and dashes. + They can be 1-64 characters long. + They must begin and end with an alphanumeric character.",
          "type": "string"
        },
        "ignoredFiles": {
          "type": "array",
          "description": "ignored_files and included_files are file glob matches using https://golang.org/pkg/path/filepath/#Match extended with support for \"**\". If ignored_files and changed files are both empty, then they are not used to determine whether or not to trigger a build. If ignored_files is not empty, then we ignore any files that match any of the ignored_file globs. If the change has no files that are outside of the ignored_files globs, then we do not trigger a build.",
          "items": {
            "type": "string"
          }
        },
        "build": {
          "description": "Contents of the build template.",
          "$ref": "#/definitions/cloudbuild:v1:Build"
        },
        "id": {
          "type": "string",
          "description": "Output only. Unique identifier of the trigger.",
          "readOnly": true
        },
        "serviceAccount": {
          "type": "string",
          "description": "The service account used for all user-controlled operations including UpdateBuildTrigger, RunBuildTrigger, CreateBuild, and CancelBuild. If no service account is set, then the standard Cloud Build service account ([PROJECT_NUM]@system.gserviceaccount.com) will be used instead. Format: `projects/{PROJECT_ID}/serviceAccounts/{ACCOUNT_ID_OR_EMAIL}`"
        },
        "tags": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Tags for annotation of a `BuildTrigger`"
        },
        "github": {
          "$ref": "#/definitions/cloudbuild:v1:GitHubEventsConfig",
          "description": "GitHubEventsConfig describes the configuration of a trigger that creates a build whenever a GitHub event is received. Mutually exclusive with `trigger_template`."
        },
        "pubsubConfig": {
          "description": "PubsubConfig describes the configuration of a trigger that creates a build whenever a Pub/Sub message is published.",
          "$ref": "#/definitions/cloudbuild:v1:PubsubConfig"
        },
        "sourceToBuild": {
          "$ref": "#/definitions/cloudbuild:v1:GitRepoSource",
          "description": "The repo and ref of the repository from which to build. This field is used only for those triggers that do not respond to SCM events. Triggers that respond to such events build source at whatever commit caused the event. This field is currently only used by Webhook, Pub/Sub, Manual, and Cron triggers."
        },
        "resourceName": {
          "description": "The `Trigger` name with format: `projects/{project}/locations/{location}/triggers/{trigger}`, where {trigger} is a unique identifier generated by the service.",
          "type": "string"
        },
        "substitutions": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "Substitutions for Build resource. The keys must match the following regular expression: `^_[A-Z0-9_]+$`.",
          "type": "object"
        },
        "includedFiles": {
          "items": {
            "type": "string"
          },
          "description": "If any of the files altered in the commit pass the ignored_files filter and included_files is empty, then as far as this filter is concerned, we should trigger the build. If any of the files altered in the commit pass the ignored_files filter and included_files is not empty, then we make sure that at least one of those files matches a included_files glob. If not, then we do not trigger a build.",
          "type": "array"
        },
        "triggerTemplate": {
          "description": "Template describing the types of source changes to trigger a build. Branch and tag names in trigger templates are interpreted as regular expressions. Any branch or tag change that matches that regular expression will trigger a build. Mutually exclusive with `github`.",
          "$ref": "#/definitions/cloudbuild:v1:RepoSource"
        },
        "webhookConfig": {
          "description": "WebhookConfig describes the configuration of a trigger that creates a build whenever a webhook is sent to a trigger's webhook URL.",
          "$ref": "#/definitions/cloudbuild:v1:WebhookConfig"
        },
        "description": {
          "type": "string",
          "description": "Human-readable description of this trigger."
        },
        "disabled": {
          "description": "If true, the trigger will never automatically execute a build.",
          "type": "boolean"
        },
        "gitlabEnterpriseEventsConfig": {
          "description": "GitLabEnterpriseEventsConfig describes the configuration of a trigger that creates a build whenever a GitLab Enterprise event is received.",
          "$ref": "#/definitions/cloudbuild:v1:GitLabEventsConfig"
        },
        "createTime": {
          "description": "Output only. Time when the trigger was created.",
          "readOnly": true,
          "type": "string",
          "format": "date-time"
        }
      },
      "description": "Configuration for an automated build in response to source repository changes.",
      "type": "object",
      "$id": "#/definitions/cloudbuild:v1:BuildTrigger"
    },
    "cloudbuild:v1:UploadedPythonPackage": {
      "type": "object",
      "properties": {
        "uri": {
          "description": "URI of the uploaded artifact.",
          "type": "string"
        },
        "fileHashes": {
          "description": "Hash types and values of the Python Artifact.",
          "$ref": "#/definitions/cloudbuild:v1:FileHashes"
        },
        "pushTiming": {
          "$ref": "#/definitions/cloudbuild:v1:TimeSpan",
          "description": "Output only. Stores timing information for pushing the specified artifact.",
          "readOnly": true
        }
      },
      "description": "Artifact uploaded using the PythonPackage directive.",
      "$id": "#/definitions/cloudbuild:v1:UploadedPythonPackage"
    },
    "cloudbuild:v1:ListGithubEnterpriseConfigsResponse": {
      "description": "RPC response object returned by ListGithubEnterpriseConfigs RPC method.",
      "properties": {
        "configs": {
          "description": "A list of GitHubEnterpriseConfigs",
          "items": {
            "$ref": "#/definitions/cloudbuild:v1:GitHubEnterpriseConfig"
          },
          "type": "array"
        }
      },
      "type": "object",
      "$id": "#/definitions/cloudbuild:v1:ListGithubEnterpriseConfigsResponse"
    },
    "cloudbuild:v1:UpdateGitHubEnterpriseConfigOperationMetadata": {
      "properties": {
        "githubEnterpriseConfig": {
          "type": "string",
          "description": "The resource name of the GitHubEnterprise to be updated. Format: `projects/{project}/locations/{location}/githubEnterpriseConfigs/{id}`."
        },
        "createTime": {
          "format": "date-time",
          "description": "Time the operation was created.",
          "type": "string"
        },
        "completeTime": {
          "type": "string",
          "description": "Time the operation was completed.",
          "format": "date-time"
        }
      },
      "type": "object",
      "description": "Metadata for `UpdateGitHubEnterpriseConfig` operation.",
      "$id": "#/definitions/cloudbuild:v1:UpdateGitHubEnterpriseConfigOperationMetadata"
    },
    "cloudbuild:v1:BatchCreateBitbucketServerConnectedRepositoriesRequest": {
      "type": "object",
      "properties": {
        "requests": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/cloudbuild:v1:CreateBitbucketServerConnectedRepositoryRequest"
          },
          "description": "Required. Requests to connect Bitbucket Server repositories."
        }
      },
      "description": "RPC request object accepted by BatchCreateBitbucketServerConnectedRepositories RPC method.",
      "$id": "#/definitions/cloudbuild:v1:BatchCreateBitbucketServerConnectedRepositoriesRequest"
    },
    "cloudbuild:v1:Operation": {
      "properties": {
        "name": {
          "description": "The server-assigned name, which is only unique within the same service that originally returns it. If you use the default HTTP mapping, the `name` should be a resource name ending with `operations/{unique_id}`.",
          "type": "string"
        },
        "response": {
          "type": "object",
          "description": "The normal, successful response of the operation. If the original method returns no data on success, such as `Delete`, the response is `google.protobuf.Empty`. If the original method is standard `Get`/`Create`/`Update`, the response should be the resource. For other methods, the response should have the type `XxxResponse`, where `Xxx` is the original method name. For example, if the original method name is `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`.",
          "additionalProperties": {
            "description": "Properties of the object. Contains field @type with type URL.",
            "type": "object"
          }
        },
        "done": {
          "description": "If the value is `false`, it means the operation is still in progress. If `true`, the operation is completed, and either `error` or `response` is available.",
          "type": "boolean"
        },
        "metadata": {
          "type": "object",
          "description": "Service-specific metadata associated with the operation. It typically contains progress information and common metadata such as create time. Some services might not provide such metadata. Any method that returns a long-running operation should document the metadata type, if any.",
          "additionalProperties": {
            "description": "Properties of the object. Contains field @type with type URL.",
            "type": "object"
          }
        },
        "error": {
          "$ref": "#/definitions/cloudbuild:v1:Status",
          "description": "The error result of the operation in case of failure or cancellation."
        }
      },
      "type": "object",
      "description": "This resource represents a long-running operation that is the result of a network API call.",
      "$id": "#/definitions/cloudbuild:v1:Operation"
    },
    "cloudbuild:v1:BitbucketServerSecrets": {
      "properties": {
        "adminAccessTokenVersionName": {
          "type": "string",
          "description": "Required. The resource name for the admin access token's secret version."
        },
        "webhookSecretVersionName": {
          "description": "Required. Immutable. The resource name for the webhook secret's secret version. Once this field has been set, it cannot be changed. If you need to change it, please create another BitbucketServerConfig.",
          "type": "string"
        },
        "readAccessTokenVersionName": {
          "description": "Required. The resource name for the read access token's secret version.",
          "type": "string"
        }
      },
      "description": "BitbucketServerSecrets represents the secrets in Secret Manager for a Bitbucket Server.",
      "type": "object",
      "$id": "#/definitions/cloudbuild:v1:BitbucketServerSecrets"
    },
    "cloudbuild:v1:BitbucketServerTriggerConfig": {
      "description": "BitbucketServerTriggerConfig describes the configuration of a trigger that creates a build whenever a Bitbucket Server event is received.",
      "properties": {
        "bitbucketServerConfigResource": {
          "description": "Required. The Bitbucket server config resource that this trigger config maps to.",
          "type": "string"
        },
        "projectKey": {
          "description": "Required. Key of the project that the repo is in. For example: The key for https://mybitbucket.server/projects/TEST/repos/test-repo is \"TEST\".",
          "type": "string"
        },
        "pullRequest": {
          "description": "Filter to match changes in pull requests.",
          "$ref": "#/definitions/cloudbuild:v1:PullRequestFilter"
        },
        "bitbucketServerConfig": {
          "readOnly": true,
          "$ref": "#/definitions/cloudbuild:v1:BitbucketServerConfig",
          "description": "Output only. The BitbucketServerConfig specified in the bitbucket_server_config_resource field."
        },
        "repoSlug": {
          "description": "Required. Slug of the repository. A repository slug is a URL-friendly version of a repository name, automatically generated by Bitbucket for use in the URL. For example, if the repository name is 'test repo', in the URL it would become 'test-repo' as in https://mybitbucket.server/projects/TEST/repos/test-repo.",
          "type": "string"
        },
        "push": {
          "$ref": "#/definitions/cloudbuild:v1:PushFilter",
          "description": "Filter to match changes in refs like branches, tags."
        }
      },
      "type": "object",
      "$id": "#/definitions/cloudbuild:v1:BitbucketServerTriggerConfig"
    },
    "cloudbuild:v1:ConnectedRepository": {
      "description": "Location of the source in a 2nd-gen Google Cloud Build repository resource.",
      "properties": {
        "revision": {
          "type": "string",
          "description": "The revision to fetch from the Git repository such as a branch, a tag, a commit SHA, or any Git ref."
        },
        "repository": {
          "type": "string",
          "description": "Required. Name of the Google Cloud Build repository, formatted as `projects/*/locations/*/connections/*/repositories/*`."
        },
        "dir": {
          "description": "Directory, relative to the source root, in which to run the build.",
          "type": "string"
        }
      },
      "type": "object",
      "$id": "#/definitions/cloudbuild:v1:ConnectedRepository"
    },
    "cloudbuild:v1:PushFilter": {
      "description": "Push contains filter properties for matching GitHub git pushes.",
      "type": "object",
      "properties": {
        "branch": {
          "type": "string",
          "description": "Regexes matching branches to build. The syntax of the regular expressions accepted is the syntax accepted by RE2 and described at https://github.com/google/re2/wiki/Syntax"
        },
        "invertRegex": {
          "type": "boolean",
          "description": "When true, only trigger a build if the revision regex does NOT match the git_ref regex."
        },
        "tag": {
          "type": "string",
          "description": "Regexes matching tags to build. The syntax of the regular expressions accepted is the syntax accepted by RE2 and described at https://github.com/google/re2/wiki/Syntax"
        }
      },
      "$id": "#/definitions/cloudbuild:v1:PushFilter"
    },
    "cloudbuild:v1:FileHashes": {
      "description": "Container message for hashes of byte content of files, used in SourceProvenance messages to verify integrity of source input to the build.",
      "properties": {
        "fileHash": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/cloudbuild:v1:Hash"
          },
          "description": "Collection of file hashes."
        }
      },
      "type": "object",
      "$id": "#/definitions/cloudbuild:v1:FileHashes"
    },
    "cloudbuild:v1:CancelOperationRequest": {
      "properties": {},
      "description": "The request message for Operations.CancelOperation.",
      "type": "object",
      "$id": "#/definitions/cloudbuild:v1:CancelOperationRequest"
    },
    "cloudbuild:v1:Hash": {
      "description": "Container message for hash values.",
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "NONE",
            "SHA256",
            "MD5",
            "SHA512"
          ],
          "description": "The type of hash that was performed."
        },
        "value": {
          "description": "The hash value.",
          "format": "byte",
          "type": "string"
        }
      },
      "$id": "#/definitions/cloudbuild:v1:Hash"
    },
    "cloudbuild:v1:ApprovalConfig": {
      "properties": {
        "approvalRequired": {
          "description": "Whether or not approval is needed. If this is set on a build, it will become pending when created, and will need to be explicitly approved to start.",
          "type": "boolean"
        }
      },
      "description": "ApprovalConfig describes configuration for manual approval of a build.",
      "type": "object",
      "$id": "#/definitions/cloudbuild:v1:ApprovalConfig"
    },
    "cloudbuild:v1:GitLabRepository": {
      "properties": {
        "displayName": {
          "description": "Display name of the repository",
          "type": "string"
        },
        "name": {
          "description": "The resource name of the repository",
          "type": "string"
        },
        "description": {
          "type": "string",
          "description": "Description of the repository"
        },
        "repositoryId": {
          "description": "Identifier for a repository",
          "$ref": "#/definitions/cloudbuild:v1:GitLabRepositoryId"
        },
        "browseUri": {
          "description": "Link to the browse repo page on the GitLab instance",
          "type": "string"
        }
      },
      "type": "object",
      "description": "Proto Representing a GitLabRepository",
      "$id": "#/definitions/cloudbuild:v1:GitLabRepository"
    },
    "cloudbuild:v1:ServiceDirectoryConfig": {
      "type": "object",
      "properties": {
        "service": {
          "description": "The Service Directory service name. Format: projects/{project}/locations/{location}/namespaces/{namespace}/services/{service}.",
          "type": "string"
        }
      },
      "description": "ServiceDirectoryConfig represents Service Directory configuration for a SCM host connection.",
      "$id": "#/definitions/cloudbuild:v1:ServiceDirectoryConfig"
    },
    "cloudbuild:v1:DeleteBitbucketServerConfigOperationMetadata": {
      "properties": {
        "bitbucketServerConfig": {
          "type": "string",
          "description": "The resource name of the BitbucketServerConfig to be deleted. Format: `projects/{project}/locations/{location}/bitbucketServerConfigs/{id}`."
        },
        "createTime": {
          "format": "date-time",
          "type": "string",
          "description": "Time the operation was created."
        },
        "completeTime": {
          "description": "Time the operation was completed.",
          "type": "string",
          "format": "date-time"
        }
      },
      "type": "object",
      "description": "Metadata for `DeleteBitbucketServerConfig` operation.",
      "$id": "#/definitions/cloudbuild:v1:DeleteBitbucketServerConfigOperationMetadata"
    },
    "cloudbuild:v1:PrivatePoolV1Config": {
      "properties": {
        "networkConfig": {
          "$ref": "#/definitions/cloudbuild:v1:NetworkConfig",
          "description": "Network configuration for the pool."
        },
        "workerConfig": {
          "$ref": "#/definitions/cloudbuild:v1:WorkerConfig",
          "description": "Machine configuration for the workers in the pool."
        }
      },
      "description": "Configuration for a V1 `PrivatePool`.",
      "type": "object",
      "$id": "#/definitions/cloudbuild:v1:PrivatePoolV1Config"
    },
    "cloudbuild:v1:RunBuildTriggerRequest": {
      "type": "object",
      "description": "Specifies a build trigger to run and the source to use.",
      "properties": {
        "source": {
          "description": "Source to build against this trigger. Branch and tag names cannot consist of regular expressions.",
          "$ref": "#/definitions/cloudbuild:v1:RepoSource"
        },
        "triggerId": {
          "description": "Required. ID of the trigger.",
          "type": "string"
        },
        "projectId": {
          "description": "Required. ID of the project.",
          "type": "string"
        }
      },
      "$id": "#/definitions/cloudbuild:v1:RunBuildTriggerRequest"
    },
    "cloudbuild:v1:RepoSource": {
      "type": "object",
      "properties": {
        "dir": {
          "description": "Directory, relative to the source root, in which to run the build. This must be a relative path. If a step's `dir` is specified and is an absolute path, this value is ignored for that step's execution.",
          "type": "string"
        },
        "substitutions": {
          "additionalProperties": {
            "type": "string"
          },
          "type": "object",
          "description": "Substitutions to use in a triggered build. Should only be used with RunBuildTrigger"
        },
        "branchName": {
          "description": "Regex matching branches to build. The syntax of the regular expressions accepted is the syntax accepted by RE2 and described at https://github.com/google/re2/wiki/Syntax",
          "type": "string"
        },
        "repoName": {
          "description": "Name of the Cloud Source Repository.",
          "type": "string"
        },
        "commitSha": {
          "description": "Explicit commit SHA to build.",
          "type": "string"
        },
        "tagName": {
          "description": "Regex matching tags to build. The syntax of the regular expressions accepted is the syntax accepted by RE2 and described at https://github.com/google/re2/wiki/Syntax",
          "type": "string"
        },
        "invertRegex": {
          "type": "boolean",
          "description": "Only trigger a build if the revision regex does NOT match the revision regex."
        },
        "projectId": {
          "type": "string",
          "description": "ID of the project that owns the Cloud Source Repository. If omitted, the project ID requesting the build is assumed."
        }
      },
      "description": "Location of the source in a Google Cloud Source Repository.",
      "$id": "#/definitions/cloudbuild:v1:RepoSource"
    },
    "cloudbuild:v1:BuildOptions": {
      "type": "object",
      "properties": {
        "defaultLogsBucketBehavior": {
          "type": "string",
          "description": "Optional. Option to specify how default logs buckets are setup.",
          "enum": [
            "DEFAULT_LOGS_BUCKET_BEHAVIOR_UNSPECIFIED",
            "REGIONAL_USER_OWNED_BUCKET"
          ]
        },
        "logStreamingOption": {
          "type": "string",
          "description": "Option to define build log streaming behavior to Cloud Storage.",
          "enum": [
            "STREAM_DEFAULT",
            "STREAM_ON",
            "STREAM_OFF"
          ]
        },
        "diskSizeGb": {
          "type": "string",
          "description": "Requested disk size for the VM that runs the build. Note that this is *NOT* \"disk free\"; some of the space will be used by the operating system and build utilities. Also note that this is the minimum disk size that will be allocated for the build -- the build may run with a larger disk than requested. At present, the maximum disk size is 2000GB; builds that request more than the maximum are rejected with an error.",
          "format": "int64"
        },
        "secretEnv": {
          "description": "A list of global environment variables, which are encrypted using a Cloud Key Management Service crypto key. These values must be specified in the build's `Secret`. These variables will be available to all build steps in this build.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "workerPool": {
          "description": "This field deprecated; please use `pool.name` instead.",
          "type": "string",
          "deprecated": true
        },
        "requestedVerifyOption": {
          "description": "Requested verifiability options.",
          "type": "string",
          "enum": [
            "NOT_VERIFIED",
            "VERIFIED"
          ]
        },
        "sourceProvenanceHash": {
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "NONE",
              "SHA256",
              "MD5",
              "SHA512"
            ]
          },
          "description": "Requested hash for SourceProvenance."
        },
        "env": {
          "description": "A list of global environment variable definitions that will exist for all build steps in this build. If a variable is defined in both globally and in a build step, the variable will use the build step value. The elements are of the form \"KEY=VALUE\" for the environment variable \"KEY\" being given the value \"VALUE\".",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "volumes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/cloudbuild:v1:Volume"
          },
          "description": "Global list of volumes to mount for ALL build steps Each volume is created as an empty volume prior to starting the build process. Upon completion of the build, volumes and their contents are discarded. Global volume names and paths cannot conflict with the volumes defined a build step. Using a global volume in a build with only one step is not valid as it is indicative of a build request with an incorrect configuration."
        },
        "pool": {
          "$ref": "#/definitions/cloudbuild:v1:PoolOption",
          "description": "Optional. Specification for execution on a `WorkerPool`. See [running builds in a private pool](https://cloud.google.com/build/docs/private-pools/run-builds-in-private-pool) for more information."
        },
        "substitutionOption": {
          "enum": [
            "MUST_MATCH",
            "ALLOW_LOOSE"
          ],
          "type": "string",
          "description": "Option to specify behavior when there is an error in the substitution checks. NOTE: this is always set to ALLOW_LOOSE for triggered builds and cannot be overridden in the build configuration file."
        },
        "dynamicSubstitutions": {
          "description": "Option to specify whether or not to apply bash style string operations to the substitutions. NOTE: this is always enabled for triggered builds and cannot be overridden in the build configuration file.",
          "type": "boolean"
        },
        "logging": {
          "description": "Option to specify the logging mode, which determines if and where build logs are stored.",
          "enum": [
            "LOGGING_UNSPECIFIED",
            "LEGACY",
            "GCS_ONLY",
            "STACKDRIVER_ONLY",
            "CLOUD_LOGGING_ONLY",
            "NONE"
          ],
          "type": "string"
        },
        "automapSubstitutions": {
          "type": "boolean",
          "description": "Option to include built-in and custom substitutions as env variables for all build steps."
        },
        "machineType": {
          "type": "string",
          "enum": [
            "UNSPECIFIED",
            "N1_HIGHCPU_8",
            "N1_HIGHCPU_32",
            "E2_HIGHCPU_8",
            "E2_HIGHCPU_32",
            "E2_MEDIUM"
          ],
          "description": "Compute Engine machine type on which to run the build."
        }
      },
      "description": "Optional arguments to enable specific features of builds.",
      "$id": "#/definitions/cloudbuild:v1:BuildOptions"
    },
    "cloudbuild:v1:Results": {
      "properties": {
        "artifactTiming": {
          "description": "Time to push all non-container artifacts to Cloud Storage.",
          "$ref": "#/definitions/cloudbuild:v1:TimeSpan"
        },
        "numArtifacts": {
          "description": "Number of non-container artifacts uploaded to Cloud Storage. Only populated when artifacts are uploaded to Cloud Storage.",
          "type": "string",
          "format": "int64"
        },
        "npmPackages": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/cloudbuild:v1:UploadedNpmPackage"
          },
          "description": "Npm packages uploaded to Artifact Registry at the end of the build."
        },
        "artifactManifest": {
          "type": "string",
          "description": "Path to the artifact manifest for non-container artifacts uploaded to Cloud Storage. Only populated when artifacts are uploaded to Cloud Storage."
        },
        "buildStepImages": {
          "description": "List of build step digests, in the order corresponding to build step indices.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "mavenArtifacts": {
          "items": {
            "$ref": "#/definitions/cloudbuild:v1:UploadedMavenArtifact"
          },
          "type": "array",
          "description": "Maven artifacts uploaded to Artifact Registry at the end of the build."
        },
        "images": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/cloudbuild:v1:BuiltImage"
          },
          "description": "Container images that were built as a part of the build."
        },
        "pythonPackages": {
          "items": {
            "$ref": "#/definitions/cloudbuild:v1:UploadedPythonPackage"
          },
          "description": "Python artifacts uploaded to Artifact Registry at the end of the build.",
          "type": "array"
        },
        "buildStepOutputs": {
          "description": "List of build step outputs, produced by builder images, in the order corresponding to build step indices. [Cloud Builders](https://cloud.google.com/cloud-build/docs/cloud-builders) can produce this output by writing to `$BUILDER_OUTPUT/output`. Only the first 4KB of data is stored.",
          "type": "array",
          "items": {
            "type": "string",
            "format": "byte"
          }
        }
      },
      "type": "object",
      "description": "Artifacts created by the build pipeline.",
      "$id": "#/definitions/cloudbuild:v1:Results"
    },
    "cloudbuild:v1:BuildApproval": {
      "properties": {
        "config": {
          "$ref": "#/definitions/cloudbuild:v1:ApprovalConfig",
          "description": "Output only. Configuration for manual approval of this build.",
          "readOnly": true
        },
        "result": {
          "$ref": "#/definitions/cloudbuild:v1:ApprovalResult",
          "readOnly": true,
          "description": "Output only. Result of manual approval for this Build."
        },
        "state": {
          "description": "Output only. The state of this build's approval.",
          "readOnly": true,
          "type": "string",
          "enum": [
            "STATE_UNSPECIFIED",
            "PENDING",
            "APPROVED",
            "REJECTED",
            "CANCELLED"
          ]
        }
      },
      "type": "object",
      "description": "BuildApproval describes a build's approval configuration, state, and result.",
      "$id": "#/definitions/cloudbuild:v1:BuildApproval"
    },
    "cloudbuild:v1:WorkerPool": {
      "properties": {
        "etag": {
          "readOnly": true,
          "type": "string",
          "description": "Output only. Checksum computed by the server. May be sent on update and delete requests to ensure that the client has an up-to-date value before proceeding."
        },
        "displayName": {
          "description": "A user-specified, human-readable name for the `WorkerPool`. If provided, this value must be 1-63 characters.",
          "type": "string"
        },
        "deleteTime": {
          "type": "string",
          "description": "Output only. Time at which the request to delete the `WorkerPool` was received.",
          "readOnly": true,
          "format": "date-time"
        },
        "name": {
          "description": "Output only. The resource name of the `WorkerPool`, with format `projects/{project}/locations/{location}/workerPools/{worker_pool}`. The value of `{worker_pool}` is provided by `worker_pool_id` in `CreateWorkerPool` request and the value of `{location}` is determined by the endpoint accessed.",
          "type": "string",
          "readOnly": true
        },
        "privatePoolV1Config": {
          "description": "Legacy Private Pool configuration.",
          "$ref": "#/definitions/cloudbuild:v1:PrivatePoolV1Config"
        },
        "annotations": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "description": "User specified annotations. See https://google.aip.dev/128#annotations for more details such as format and size limitations."
        },
        "createTime": {
          "description": "Output only. Time at which the request to create the `WorkerPool` was received.",
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "uid": {
          "type": "string",
          "readOnly": true,
          "description": "Output only. A unique identifier for the `WorkerPool`."
        },
        "updateTime": {
          "type": "string",
          "format": "date-time",
          "readOnly": true,
          "description": "Output only. Time at which the request to update the `WorkerPool` was received."
        },
        "state": {
          "type": "string",
          "enum": [
            "STATE_UNSPECIFIED",
            "CREATING",
            "RUNNING",
            "DELETING",
            "DELETED",
            "UPDATING"
          ],
          "readOnly": true,
          "description": "Output only. `WorkerPool` state."
        }
      },
      "description": "Configuration for a `WorkerPool`. Cloud Build owns and maintains a pool of workers for general use and have no access to a project's private network. By default, builds submitted to Cloud Build will use a worker from this pool. If your build needs access to resources on a private network, create and use a `WorkerPool` to run your builds. Private `WorkerPool`s give your builds access to any single VPC network that you administer, including any on-prem resources connected to that VPC network. For an overview of private pools, see [Private pools overview](https://cloud.google.com/build/docs/private-pools/private-pools-overview).",
      "type": "object",
      "$id": "#/definitions/cloudbuild:v1:WorkerPool"
    },
    "cloudbuild:v1:UpdateGitLabConfigOperationMetadata": {
      "description": "Metadata for `UpdateGitLabConfig` operation.",
      "properties": {
        "createTime": {
          "format": "date-time",
          "description": "Time the operation was created.",
          "type": "string"
        },
        "completeTime": {
          "type": "string",
          "format": "date-time",
          "description": "Time the operation was completed."
        },
        "gitlabConfig": {
          "description": "The resource name of the GitLabConfig to be created. Format: `projects/{project}/locations/{location}/gitlabConfigs/{id}`.",
          "type": "string"
        }
      },
      "type": "object",
      "$id": "#/definitions/cloudbuild:v1:UpdateGitLabConfigOperationMetadata"
    },
    "cloudbuild:v1:UploadedMavenArtifact": {
      "properties": {
        "fileHashes": {
          "description": "Hash types and values of the Maven Artifact.",
          "$ref": "#/definitions/cloudbuild:v1:FileHashes"
        },
        "pushTiming": {
          "$ref": "#/definitions/cloudbuild:v1:TimeSpan",
          "description": "Output only. Stores timing information for pushing the specified artifact.",
          "readOnly": true
        },
        "uri": {
          "description": "URI of the uploaded artifact.",
          "type": "string"
        }
      },
      "description": "A Maven artifact uploaded using the MavenArtifact directive.",
      "type": "object",
      "$id": "#/definitions/cloudbuild:v1:UploadedMavenArtifact"
    },
    "cloudbuild:v1:Secrets": {
      "properties": {
        "secretManager": {
          "items": {
            "$ref": "#/definitions/cloudbuild:v1:SecretManagerSecret"
          },
          "description": "Secrets in Secret Manager and associated secret environment variable.",
          "type": "array"
        },
        "inline": {
          "description": "Secrets encrypted with KMS key and the associated secret environment variable.",
          "items": {
            "$ref": "#/definitions/cloudbuild:v1:InlineSecret"
          },
          "type": "array"
        }
      },
      "type": "object",
      "description": "Secrets and secret environment variables.",
      "$id": "#/definitions/cloudbuild:v1:Secrets"
    },
    "cloudbuild:v1:UpdateWorkerPoolOperationMetadata": {
      "properties": {
        "completeTime": {
          "type": "string",
          "format": "date-time",
          "description": "Time the operation was completed."
        },
        "createTime": {
          "type": "string",
          "format": "date-time",
          "description": "Time the operation was created."
        },
        "workerPool": {
          "description": "The resource name of the `WorkerPool` being updated. Format: `projects/{project}/locations/{location}/workerPools/{worker_pool}`.",
          "type": "string"
        }
      },
      "type": "object",
      "description": "Metadata for the `UpdateWorkerPool` operation.",
      "$id": "#/definitions/cloudbuild:v1:UpdateWorkerPoolOperationMetadata"
    },
    "cloudbuild:v1:ListGitLabConfigsResponse": {
      "description": "RPC response object returned by ListGitLabConfigs RPC method.",
      "type": "object",
      "properties": {
        "gitlabConfigs": {
          "type": "array",
          "description": "A list of GitLabConfigs",
          "items": {
            "$ref": "#/definitions/cloudbuild:v1:GitLabConfig"
          }
        },
        "nextPageToken": {
          "description": "A token that can be sent as `page_token` to retrieve the next page If this field is omitted, there are no subsequent pages.",
          "type": "string"
        }
      },
      "$id": "#/definitions/cloudbuild:v1:ListGitLabConfigsResponse"
    },
    "cloudbuild:v1:UpdateBitbucketServerConfigOperationMetadata": {
      "type": "object",
      "properties": {
        "completeTime": {
          "type": "string",
          "description": "Time the operation was completed.",
          "format": "date-time"
        },
        "createTime": {
          "format": "date-time",
          "description": "Time the operation was created.",
          "type": "string"
        },
        "bitbucketServerConfig": {
          "description": "The resource name of the BitbucketServerConfig to be updated. Format: `projects/{project}/locations/{location}/bitbucketServerConfigs/{id}`.",
          "type": "string"
        }
      },
      "description": "Metadata for `UpdateBitbucketServerConfig` operation.",
      "$id": "#/definitions/cloudbuild:v1:UpdateBitbucketServerConfigOperationMetadata"
    },
    "cloudbuild:v1:GitLabEventsConfig": {
      "description": "GitLabEventsConfig describes the configuration of a trigger that creates a build whenever a GitLab event is received.",
      "type": "object",
      "properties": {
        "gitlabConfigResource": {
          "type": "string",
          "description": "The GitLab config resource that this trigger config maps to."
        },
        "push": {
          "$ref": "#/definitions/cloudbuild:v1:PushFilter",
          "description": "Filter to match changes in refs like branches, tags."
        },
        "projectNamespace": {
          "type": "string",
          "description": "Namespace of the GitLab project."
        },
        "pullRequest": {
          "$ref": "#/definitions/cloudbuild:v1:PullRequestFilter",
          "description": "Filter to match changes in pull requests."
        },
        "gitlabConfig": {
          "$ref": "#/definitions/cloudbuild:v1:GitLabConfig",
          "description": "Output only. The GitLabConfig specified in the gitlab_config_resource field.",
          "readOnly": true
        }
      },
      "$id": "#/definitions/cloudbuild:v1:GitLabEventsConfig"
    },
    "cloudbuild:v1:OperationMetadata": {
      "type": "object",
      "description": "Represents the metadata of the long-running operation.",
      "properties": {
        "apiVersion": {
          "type": "string",
          "description": "Output only. API version used to start the operation.",
          "readOnly": true
        },
        "verb": {
          "description": "Output only. Name of the verb executed by the operation.",
          "type": "string",
          "readOnly": true
        },
        "cancelRequested": {
          "readOnly": true,
          "description": "Output only. Identifies whether the user has requested cancellation of the operation. Operations that have been cancelled successfully have Operation.error value with a google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`.",
          "type": "boolean"
        },
        "endTime": {
          "format": "date-time",
          "description": "Output only. The time the operation finished running.",
          "readOnly": true,
          "type": "string"
        },
        "statusDetail": {
          "readOnly": true,
          "description": "Output only. Human-readable status of the operation, if any.",
          "type": "string"
        },
        "target": {
          "description": "Output only. Server-defined resource path for the target of the operation.",
          "readOnly": true,
          "type": "string"
        },
        "createTime": {
          "format": "date-time",
          "description": "Output only. The time the operation was created.",
          "readOnly": true,
          "type": "string"
        }
      },
      "$id": "#/definitions/cloudbuild:v1:OperationMetadata"
    },
    "cloudbuild:v1:DeleteGitHubEnterpriseConfigOperationMetadata": {
      "properties": {
        "completeTime": {
          "description": "Time the operation was completed.",
          "format": "date-time",
          "type": "string"
        },
        "createTime": {
          "type": "string",
          "format": "date-time",
          "description": "Time the operation was created."
        },
        "githubEnterpriseConfig": {
          "type": "string",
          "description": "The resource name of the GitHubEnterprise to be deleted. Format: `projects/{project}/locations/{location}/githubEnterpriseConfigs/{id}`."
        }
      },
      "description": "Metadata for `DeleteGitHubEnterpriseConfig` operation.",
      "type": "object",
      "$id": "#/definitions/cloudbuild:v1:DeleteGitHubEnterpriseConfigOperationMetadata"
    },
    "cloudbuild:v1:BuildOperationMetadata": {
      "properties": {
        "build": {
          "description": "The build that the operation is tracking.",
          "$ref": "#/definitions/cloudbuild:v1:Build"
        }
      },
      "type": "object",
      "description": "Metadata for build operations.",
      "$id": "#/definitions/cloudbuild:v1:BuildOperationMetadata"
    },
    "cloudbuild:v1:ListBuildsResponse": {
      "properties": {
        "nextPageToken": {
          "description": "Token to receive the next page of results. This will be absent if the end of the response list has been reached.",
          "type": "string"
        },
        "builds": {
          "items": {
            "$ref": "#/definitions/cloudbuild:v1:Build"
          },
          "type": "array",
          "description": "Builds will be sorted by `create_time`, descending."
        }
      },
      "description": "Response including listed builds.",
      "type": "object",
      "$id": "#/definitions/cloudbuild:v1:ListBuildsResponse"
    },
    "cloudbuild:v1:ListBitbucketServerRepositoriesResponse": {
      "properties": {
        "bitbucketServerRepositories": {
          "items": {
            "$ref": "#/definitions/cloudbuild:v1:BitbucketServerRepository"
          },
          "description": "List of Bitbucket Server repositories.",
          "type": "array"
        },
        "nextPageToken": {
          "type": "string",
          "description": "A token that can be sent as `page_token` to retrieve the next page. If this field is omitted, there are no subsequent pages."
        }
      },
      "description": "RPC response object returned by the ListBitbucketServerRepositories RPC method.",
      "type": "object",
      "$id": "#/definitions/cloudbuild:v1:ListBitbucketServerRepositoriesResponse"
    },
    "cloudbuild:v1:BatchCreateGitLabConnectedRepositoriesResponse": {
      "type": "object",
      "description": "Response of BatchCreateGitLabConnectedRepositories RPC method.",
      "properties": {
        "gitlabConnectedRepositories": {
          "items": {
            "$ref": "#/definitions/cloudbuild:v1:GitLabConnectedRepository"
          },
          "type": "array",
          "description": "The GitLab connected repository requests' responses."
        }
      },
      "$id": "#/definitions/cloudbuild:v1:BatchCreateGitLabConnectedRepositoriesResponse"
    },
    "cloudbuild:v1:BatchCreateBitbucketServerConnectedRepositoriesResponse": {
      "type": "object",
      "description": "Response of BatchCreateBitbucketServerConnectedRepositories RPC method including all successfully connected Bitbucket Server repositories.",
      "properties": {
        "bitbucketServerConnectedRepositories": {
          "description": "The connected Bitbucket Server repositories.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/cloudbuild:v1:BitbucketServerConnectedRepository"
          }
        }
      },
      "$id": "#/definitions/cloudbuild:v1:BatchCreateBitbucketServerConnectedRepositoriesResponse"
    },
    "cloudbuild:v1:GitLabConfig": {
      "type": "object",
      "description": "GitLabConfig represents the configuration for a GitLab integration.",
      "properties": {
        "createTime": {
          "readOnly": true,
          "description": "Output only. Time when the config was created.",
          "type": "string",
          "format": "date-time"
        },
        "secrets": {
          "description": "Required. Secret Manager secrets needed by the config.",
          "$ref": "#/definitions/cloudbuild:v1:GitLabSecrets"
        },
        "enterpriseConfig": {
          "description": "Optional. GitLabEnterprise config.",
          "$ref": "#/definitions/cloudbuild:v1:GitLabEnterpriseConfig"
        },
        "name": {
          "description": "The resource name for the config.",
          "type": "string"
        },
        "connectedRepositories": {
          "type": "array",
          "description": "Connected GitLab.com or GitLabEnterprise repositories for this config.",
          "items": {
            "$ref": "#/definitions/cloudbuild:v1:GitLabRepositoryId"
          }
        },
        "webhookKey": {
          "type": "string",
          "description": "Output only. UUID included in webhook requests. The UUID is used to look up the corresponding config.",
          "readOnly": true
        },
        "username": {
          "description": "Username of the GitLab.com or GitLab Enterprise account Cloud Build will use.",
          "type": "string"
        }
      },
      "$id": "#/definitions/cloudbuild:v1:GitLabConfig"
    },
    "cloudbuild:v1:RemoveBitbucketServerConnectedRepositoryRequest": {
      "type": "object",
      "properties": {
        "connectedRepository": {
          "$ref": "#/definitions/cloudbuild:v1:BitbucketServerRepositoryId",
          "description": "The connected repository to remove."
        }
      },
      "description": "RPC request object accepted by RemoveBitbucketServerConnectedRepository RPC method.",
      "$id": "#/definitions/cloudbuild:v1:RemoveBitbucketServerConnectedRepositoryRequest"
    },
    "cloudbuild:v1:GitHubEnterpriseSecrets": {
      "properties": {
        "oauthSecretName": {
          "deprecated": true,
          "type": "string",
          "description": "The resource name for the OAuth secret in Secret Manager."
        },
        "oauthSecretVersionName": {
          "description": "The resource name for the OAuth secret secret version in Secret Manager.",
          "type": "string"
        },
        "webhookSecretVersionName": {
          "description": "The resource name for the webhook secret secret version in Secret Manager.",
          "type": "string"
        },
        "oauthClientIdVersionName": {
          "description": "The resource name for the OAuth client ID secret version in Secret Manager.",
          "type": "string"
        },
        "privateKeyName": {
          "type": "string",
          "description": "The resource name for the private key secret.",
          "deprecated": true
        },
        "privateKeyVersionName": {
          "type": "string",
          "description": "The resource name for the private key secret version."
        },
        "webhookSecretName": {
          "deprecated": true,
          "type": "string",
          "description": "The resource name for the webhook secret in Secret Manager."
        },
        "oauthClientIdName": {
          "deprecated": true,
          "type": "string",
          "description": "The resource name for the OAuth client ID secret in Secret Manager."
        }
      },
      "description": "GitHubEnterpriseSecrets represents the names of all necessary secrets in Secret Manager for a GitHub Enterprise server. Format is: projects//secrets/.",
      "type": "object",
      "$id": "#/definitions/cloudbuild:v1:GitHubEnterpriseSecrets"
    },
    "cloudbuild:v1:BitbucketServerConfig": {
      "type": "object",
      "description": "BitbucketServerConfig represents the configuration for a Bitbucket Server.",
      "properties": {
        "name": {
          "description": "The resource name for the config.",
          "type": "string"
        },
        "peeredNetwork": {
          "description": "Optional. The network to be used when reaching out to the Bitbucket Server instance. The VPC network must be enabled for private service connection. This should be set if the Bitbucket Server instance is hosted on-premises and not reachable by public internet. If this field is left empty, no network peering will occur and calls to the Bitbucket Server instance will be made over the public internet. Must be in the format `projects/{project}/global/networks/{network}`, where {project} is a project number or id and {network} is the name of a VPC network in the project.",
          "type": "string"
        },
        "hostUri": {
          "description": "Required. Immutable. The URI of the Bitbucket Server host. Once this field has been set, it cannot be changed. If you need to change it, please create another BitbucketServerConfig.",
          "type": "string"
        },
        "webhookKey": {
          "description": "Output only. UUID included in webhook requests. The UUID is used to look up the corresponding config.",
          "type": "string",
          "readOnly": true
        },
        "createTime": {
          "type": "string",
          "format": "date-time",
          "description": "Time when the config was created."
        },
        "connectedRepositories": {
          "description": "Output only. Connected Bitbucket Server repositories for this config.",
          "type": "array",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/cloudbuild:v1:BitbucketServerRepositoryId"
          }
        },
        "sslCa": {
          "type": "string",
          "description": "Optional. SSL certificate to use for requests to Bitbucket Server. The format should be PEM format but the extension can be one of .pem, .cer, or .crt."
        },
        "apiKey": {
          "type": "string",
          "description": "Required. Immutable. API Key that will be attached to webhook. Once this field has been set, it cannot be changed. If you need to change it, please create another BitbucketServerConfig."
        },
        "secrets": {
          "$ref": "#/definitions/cloudbuild:v1:BitbucketServerSecrets",
          "description": "Required. Secret Manager secrets needed by the config."
        },
        "username": {
          "description": "Username of the account Cloud Build will use on Bitbucket Server.",
          "type": "string"
        }
      },
      "$id": "#/definitions/cloudbuild:v1:BitbucketServerConfig"
    },
    "cloudbuild:v1:BitbucketServerRepositoryId": {
      "description": "BitbucketServerRepositoryId identifies a specific repository hosted on a Bitbucket Server.",
      "properties": {
        "webhookId": {
          "readOnly": true,
          "description": "Output only. The ID of the webhook that was created for receiving events from this repo. We only create and manage a single webhook for each repo.",
          "type": "integer",
          "format": "int32"
        },
        "projectKey": {
          "type": "string",
          "description": "Required. Identifier for the project storing the repository."
        },
        "repoSlug": {
          "type": "string",
          "description": "Required. Identifier for the repository."
        }
      },
      "type": "object",
      "$id": "#/definitions/cloudbuild:v1:BitbucketServerRepositoryId"
    },
    "cloudbuild:v1:ListWorkerPoolsResponse": {
      "description": "Response containing existing `WorkerPools`.",
      "properties": {
        "workerPools": {
          "description": "`WorkerPools` for the specified project.",
          "items": {
            "$ref": "#/definitions/cloudbuild:v1:WorkerPool"
          },
          "type": "array"
        },
        "nextPageToken": {
          "description": "Continuation token used to page through large result sets. Provide this value in a subsequent ListWorkerPoolsRequest to return the next page of results.",
          "type": "string"
        }
      },
      "type": "object",
      "$id": "#/definitions/cloudbuild:v1:ListWorkerPoolsResponse"
    },
    "cloudbuild:v1:PythonPackage": {
      "properties": {
        "paths": {
          "items": {
            "type": "string"
          },
          "description": "Path globs used to match files in the build's workspace. For Python/ Twine, this is usually `dist/*`, and sometimes additionally an `.asc` file.",
          "type": "array"
        },
        "repository": {
          "type": "string",
          "description": "Artifact Registry repository, in the form \"https://$REGION-python.pkg.dev/$PROJECT/$REPOSITORY\" Files in the workspace matching any path pattern will be uploaded to Artifact Registry with this location as a prefix."
        }
      },
      "description": "Python package to upload to Artifact Registry upon successful completion of all build steps. A package can encapsulate multiple objects to be uploaded to a single repository.",
      "type": "object",
      "$id": "#/definitions/cloudbuild:v1:PythonPackage"
    },
    "cloudbuild:v1:TimeSpan": {
      "type": "object",
      "properties": {
        "startTime": {
          "format": "date-time",
          "description": "Start of time span.",
          "type": "string"
        },
        "endTime": {
          "format": "date-time",
          "description": "End of time span.",
          "type": "string"
        }
      },
      "description": "Start and end times for a build execution phase.",
      "$id": "#/definitions/cloudbuild:v1:TimeSpan"
    },
    "cloudbuild:v1:CancelBuildRequest": {
      "description": "Request to cancel an ongoing build.",
      "type": "object",
      "properties": {
        "name": {
          "description": "The name of the `Build` to cancel. Format: `projects/{project}/locations/{location}/builds/{build}`",
          "type": "string"
        },
        "projectId": {
          "description": "Required. ID of the project.",
          "type": "string"
        },
        "id": {
          "type": "string",
          "description": "Required. ID of the build."
        }
      },
      "$id": "#/definitions/cloudbuild:v1:CancelBuildRequest"
    },
    "cloudbuild:v1:ListBuildTriggersResponse": {
      "properties": {
        "triggers": {
          "type": "array",
          "description": "`BuildTriggers` for the project, sorted by `create_time` descending.",
          "items": {
            "$ref": "#/definitions/cloudbuild:v1:BuildTrigger"
          }
        },
        "nextPageToken": {
          "type": "string",
          "description": "Token to receive the next page of results."
        }
      },
      "type": "object",
      "description": "Response containing existing `BuildTriggers`.",
      "$id": "#/definitions/cloudbuild:v1:ListBuildTriggersResponse"
    },
    "cloudbuild:v1:NetworkConfig": {
      "properties": {
        "peeredNetworkIpRange": {
          "type": "string",
          "description": "Immutable. Subnet IP range within the peered network. This is specified in CIDR notation with a slash and the subnet prefix size. You can optionally specify an IP address before the subnet prefix value. e.g. `192.168.0.0/29` would specify an IP range starting at 192.168.0.0 with a prefix size of 29 bits. `/16` would specify a prefix size of 16 bits, with an automatically determined IP within the peered VPC. If unspecified, a value of `/24` will be used."
        },
        "egressOption": {
          "description": "Option to configure network egress for the workers.",
          "enum": [
            "EGRESS_OPTION_UNSPECIFIED",
            "NO_PUBLIC_EGRESS",
            "PUBLIC_EGRESS"
          ],
          "type": "string"
        },
        "peeredNetwork": {
          "type": "string",
          "description": "Required. Immutable. The network definition that the workers are peered to. If this section is left empty, the workers will be peered to `WorkerPool.project_id` on the service producer network. Must be in the format `projects/{project}/global/networks/{network}`, where `{project}` is a project number, such as `12345`, and `{network}` is the name of a VPC network in the project. See [Understanding network configuration options](https://cloud.google.com/build/docs/private-pools/set-up-private-pool-environment)"
        }
      },
      "type": "object",
      "description": "Defines the network configuration for the pool.",
      "$id": "#/definitions/cloudbuild:v1:NetworkConfig"
    },
    "cloudbuild:v1:PullRequestFilter": {
      "type": "object",
      "description": "PullRequestFilter contains filter properties for matching GitHub Pull Requests.",
      "properties": {
        "branch": {
          "type": "string",
          "description": "Regex of branches to match. The syntax of the regular expressions accepted is the syntax accepted by RE2 and described at https://github.com/google/re2/wiki/Syntax"
        },
        "commentControl": {
          "description": "Configure builds to run whether a repository owner or collaborator need to comment `/gcbrun`.",
          "enum": [
            "COMMENTS_DISABLED",
            "COMMENTS_ENABLED",
            "COMMENTS_ENABLED_FOR_EXTERNAL_CONTRIBUTORS_ONLY"
          ],
          "type": "string"
        },
        "invertRegex": {
          "type": "boolean",
          "description": "If true, branches that do NOT match the git_ref will trigger a build."
        }
      },
      "$id": "#/definitions/cloudbuild:v1:PullRequestFilter"
    },
    "cloudbuild:v1:GitLabConnectedRepository": {
      "type": "object",
      "description": "GitLabConnectedRepository represents a GitLab connected repository request response.",
      "properties": {
        "repo": {
          "description": "The GitLab repositories to connect.",
          "$ref": "#/definitions/cloudbuild:v1:GitLabRepositoryId"
        },
        "status": {
          "description": "Output only. The status of the repo connection request.",
          "readOnly": true,
          "$ref": "#/definitions/cloudbuild:v1:Status"
        },
        "parent": {
          "type": "string",
          "description": "The name of the `GitLabConfig` that added connected repository. Format: `projects/{project}/locations/{location}/gitLabConfigs/{config}`"
        }
      },
      "$id": "#/definitions/cloudbuild:v1:GitLabConnectedRepository"
    },
    "cloudbuild:v1:BatchCreateGitLabConnectedRepositoriesRequest": {
      "description": "RPC request object accepted by BatchCreateGitLabConnectedRepositories RPC method.",
      "type": "object",
      "properties": {
        "requests": {
          "type": "array",
          "description": "Required. Requests to connect GitLab repositories.",
          "items": {
            "$ref": "#/definitions/cloudbuild:v1:CreateGitLabConnectedRepositoryRequest"
          }
        }
      },
      "$id": "#/definitions/cloudbuild:v1:BatchCreateGitLabConnectedRepositoriesRequest"
    },
    "cloudbuild:v1:Secret": {
      "properties": {
        "kmsKeyName": {
          "description": "Cloud KMS key name to use to decrypt these envs.",
          "type": "string"
        },
        "secretEnv": {
          "additionalProperties": {
            "format": "byte",
            "type": "string"
          },
          "type": "object",
          "description": "Map of environment variable name to its encrypted value. Secret environment variables must be unique across all of a build's secrets, and must be used by at least one build step. Values can be at most 64 KB in size. There can be at most 100 secret values across all of a build's secrets."
        }
      },
      "type": "object",
      "description": "Pairs a set of secret environment variables containing encrypted values with the Cloud KMS key to use to decrypt the value. Note: Use `kmsKeyName` with `available_secrets` instead of using `kmsKeyName` with `secret`. For instructions see: https://cloud.google.com/cloud-build/docs/securing-builds/use-encrypted-credentials.",
      "$id": "#/definitions/cloudbuild:v1:Secret"
    },
    "cloudbuild:v1:CreateBitbucketServerConfigOperationMetadata": {
      "description": "Metadata for `CreateBitbucketServerConfig` operation.",
      "properties": {
        "completeTime": {
          "format": "date-time",
          "type": "string",
          "description": "Time the operation was completed."
        },
        "bitbucketServerConfig": {
          "description": "The resource name of the BitbucketServerConfig to be created. Format: `projects/{project}/locations/{location}/bitbucketServerConfigs/{id}`.",
          "type": "string"
        },
        "createTime": {
          "format": "date-time",
          "type": "string",
          "description": "Time the operation was created."
        }
      },
      "type": "object",
      "$id": "#/definitions/cloudbuild:v1:CreateBitbucketServerConfigOperationMetadata"
    },
    "apigateway:v1:ApigatewayListApiConfigsResponse": {
      "type": "object",
      "description": "Response message for ApiGatewayService.ListApiConfigs",
      "properties": {
        "unreachableLocations": {
          "items": {
            "type": "string"
          },
          "description": "Locations that could not be reached.",
          "type": "array"
        },
        "nextPageToken": {
          "type": "string",
          "description": "Next page token."
        },
        "apiConfigs": {
          "items": {
            "$ref": "#/definitions/apigateway:v1:ApigatewayApiConfig"
          },
          "type": "array",
          "description": "API Configs."
        }
      },
      "$id": "#/definitions/apigateway:v1:ApigatewayListApiConfigsResponse"
    },
    "apigateway:v1:ApigatewayBinding": {
      "properties": {
        "members": {
          "items": {
            "type": "string"
          },
          "description": "Specifies the principals requesting access for a Google Cloud resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. Does not include identities that come from external identity providers (IdPs) through identity federation. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a Google service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `serviceAccount:{projectid}.svc.id.goog[{namespace}/{kubernetes-sa}]`: An identifier for a [Kubernetes service account](https://cloud.google.com/kubernetes-engine/docs/how-to/kubernetes-service-accounts). For example, `my-project.svc.id.goog[my-namespace/my-kubernetes-sa]`. * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding.",
          "type": "array"
        },
        "condition": {
          "description": "The condition that is associated with this binding. If the condition evaluates to `true`, then this binding applies to the current request. If the condition evaluates to `false`, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the principals in this binding. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).",
          "$ref": "#/definitions/apigateway:v1:ApigatewayExpr"
        },
        "role": {
          "type": "string",
          "description": "Role that is assigned to the list of `members`, or principals. For example, `roles/viewer`, `roles/editor`, or `roles/owner`."
        }
      },
      "description": "Associates `members`, or principals, with a `role`.",
      "type": "object",
      "$id": "#/definitions/apigateway:v1:ApigatewayBinding"
    },
    "apigateway:v1:ApigatewayOperation": {
      "properties": {
        "done": {
          "type": "boolean",
          "description": "If the value is `false`, it means the operation is still in progress. If `true`, the operation is completed, and either `error` or `response` is available."
        },
        "response": {
          "type": "object",
          "description": "The normal, successful response of the operation. If the original method returns no data on success, such as `Delete`, the response is `google.protobuf.Empty`. If the original method is standard `Get`/`Create`/`Update`, the response should be the resource. For other methods, the response should have the type `XxxResponse`, where `Xxx` is the original method name. For example, if the original method name is `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`.",
          "additionalProperties": {
            "description": "Properties of the object. Contains field @type with type URL.",
            "type": "object"
          }
        },
        "name": {
          "description": "The server-assigned name, which is only unique within the same service that originally returns it. If you use the default HTTP mapping, the `name` should be a resource name ending with `operations/{unique_id}`.",
          "type": "string"
        },
        "error": {
          "$ref": "#/definitions/apigateway:v1:ApigatewayStatus",
          "description": "The error result of the operation in case of failure or cancellation."
        },
        "metadata": {
          "type": "object",
          "description": "Service-specific metadata associated with the operation. It typically contains progress information and common metadata such as create time. Some services might not provide such metadata. Any method that returns a long-running operation should document the metadata type, if any.",
          "additionalProperties": {
            "type": "object",
            "description": "Properties of the object. Contains field @type with type URL."
          }
        }
      },
      "description": "This resource represents a long-running operation that is the result of a network API call.",
      "type": "object",
      "$id": "#/definitions/apigateway:v1:ApigatewayOperation"
    },
    "apigateway:v1:ApigatewayApiConfigGrpcServiceDefinition": {
      "description": "A gRPC service definition.",
      "type": "object",
      "properties": {
        "fileDescriptorSet": {
          "$ref": "#/definitions/apigateway:v1:ApigatewayApiConfigFile",
          "description": "Input only. File descriptor set, generated by protoc. To generate, use protoc with imports and source info included. For an example test.proto file, the following command would put the value in a new file named out.pb. $ protoc --include_imports --include_source_info test.proto -o out.pb"
        },
        "source": {
          "description": "Optional. Uncompiled proto files associated with the descriptor set, used for display purposes (server-side compilation is not supported). These should match the inputs to 'protoc' command used to generate file_descriptor_set.",
          "items": {
            "$ref": "#/definitions/apigateway:v1:ApigatewayApiConfigFile"
          },
          "type": "array"
        }
      },
      "$id": "#/definitions/apigateway:v1:ApigatewayApiConfigGrpcServiceDefinition"
    },
    "apigateway:v1:ApigatewayExpr": {
      "properties": {
        "description": {
          "description": "Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.",
          "type": "string"
        },
        "expression": {
          "type": "string",
          "description": "Textual representation of an expression in Common Expression Language syntax."
        },
        "title": {
          "description": "Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.",
          "type": "string"
        },
        "location": {
          "description": "Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.",
          "type": "string"
        }
      },
      "type": "object",
      "description": "Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: \"Summary size limit\" description: \"Determines if a summary is less than 100 chars\" expression: \"document.summary.size() < 100\" Example (Equality): title: \"Requestor is owner\" description: \"Determines if requestor is the document owner\" expression: \"document.owner == request.auth.claims.email\" Example (Logic): title: \"Public documents\" description: \"Determine whether the document should be publicly visible\" expression: \"document.type != 'private' && document.type != 'internal'\" Example (Data Manipulation): title: \"Notification string\" description: \"Create a notification string with a timestamp.\" expression: \"'New message received at ' + string(document.create_time)\" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information.",
      "$id": "#/definitions/apigateway:v1:ApigatewayExpr"
    },
    "apigateway:v1:ApigatewayAuditLogConfig": {
      "description": "Provides the configuration for logging a type of permissions. Example: { \"audit_log_configs\": [ { \"log_type\": \"DATA_READ\", \"exempted_members\": [ \"user:jose@example.com\" ] }, { \"log_type\": \"DATA_WRITE\" } ] } This enables 'DATA_READ' and 'DATA_WRITE' logging, while exempting jose@example.com from DATA_READ logging.",
      "properties": {
        "exemptedMembers": {
          "type": "array",
          "description": "Specifies the identities that do not cause logging for this type of permission. Follows the same format of Binding.members.",
          "items": {
            "type": "string"
          }
        },
        "logType": {
          "enum": [
            "LOG_TYPE_UNSPECIFIED",
            "ADMIN_READ",
            "DATA_WRITE",
            "DATA_READ"
          ],
          "description": "The log type that this config enables.",
          "type": "string"
        }
      },
      "type": "object",
      "$id": "#/definitions/apigateway:v1:ApigatewayAuditLogConfig"
    },
    "apigateway:v1:ApigatewayPolicy": {
      "description": "An Identity and Access Management (IAM) policy, which specifies access controls for Google Cloud resources. A `Policy` is a collection of `bindings`. A `binding` binds one or more `members`, or principals, to a single `role`. Principals can be user accounts, service accounts, Google groups, and domains (such as G Suite). A `role` is a named list of permissions; each `role` can be an IAM predefined role or a user-created custom role. For some types of Google Cloud resources, a `binding` can also specify a `condition`, which is a logical expression that allows access to a resource only if the expression evaluates to `true`. A condition can add constraints based on attributes of the request, the resource, or both. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies). **JSON example:** ``` { \"bindings\": [ { \"role\": \"roles/resourcemanager.organizationAdmin\", \"members\": [ \"user:mike@example.com\", \"group:admins@example.com\", \"domain:google.com\", \"serviceAccount:my-project-id@appspot.gserviceaccount.com\" ] }, { \"role\": \"roles/resourcemanager.organizationViewer\", \"members\": [ \"user:eve@example.com\" ], \"condition\": { \"title\": \"expirable access\", \"description\": \"Does not grant access after Sep 2020\", \"expression\": \"request.time < timestamp('2020-10-01T00:00:00.000Z')\", } } ], \"etag\": \"BwWWja0YfJA=\", \"version\": 3 } ``` **YAML example:** ``` bindings: - members: - user:mike@example.com - group:admins@example.com - domain:google.com - serviceAccount:my-project-id@appspot.gserviceaccount.com role: roles/resourcemanager.organizationAdmin - members: - user:eve@example.com role: roles/resourcemanager.organizationViewer condition: title: expirable access description: Does not grant access after Sep 2020 expression: request.time < timestamp('2020-10-01T00:00:00.000Z') etag: BwWWja0YfJA= version: 3 ``` For a description of IAM and its features, see the [IAM documentation](https://cloud.google.com/iam/docs/).",
      "type": "object",
      "properties": {
        "version": {
          "format": "int32",
          "type": "integer",
          "description": "Specifies the format of the policy. Valid values are `0`, `1`, and `3`. Requests that specify an invalid value are rejected. Any operation that affects conditional role bindings must specify version `3`. This requirement applies to the following operations: * Getting a policy that includes a conditional role binding * Adding a conditional role binding to a policy * Changing a conditional role binding in a policy * Removing any role binding, with or without a condition, from a policy that includes conditions **Important:** If you use IAM Conditions, you must include the `etag` field whenever you call `setIamPolicy`. If you omit this field, then IAM allows you to overwrite a version `3` policy with a version `1` policy, and all of the conditions in the version `3` policy are lost. If a policy does not include any conditions, operations on that policy may specify any valid version or leave the field unset. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies)."
        },
        "auditConfigs": {
          "type": "array",
          "description": "Specifies cloud audit logging configuration for this policy.",
          "items": {
            "$ref": "#/definitions/apigateway:v1:ApigatewayAuditConfig"
          }
        },
        "etag": {
          "type": "string",
          "description": "`etag` is used for optimistic concurrency control as a way to help prevent simultaneous updates of a policy from overwriting each other. It is strongly suggested that systems make use of the `etag` in the read-modify-write cycle to perform policy updates in order to avoid race conditions: An `etag` is returned in the response to `getIamPolicy`, and systems are expected to put that etag in the request to `setIamPolicy` to ensure that their change will be applied to the same version of the policy. **Important:** If you use IAM Conditions, you must include the `etag` field whenever you call `setIamPolicy`. If you omit this field, then IAM allows you to overwrite a version `3` policy with a version `1` policy, and all of the conditions in the version `3` policy are lost.",
          "format": "byte"
        },
        "bindings": {
          "description": "Associates a list of `members`, or principals, with a `role`. Optionally, may specify a `condition` that determines how and when the `bindings` are applied. Each of the `bindings` must contain at least one principal. The `bindings` in a `Policy` can refer to up to 1,500 principals; up to 250 of these principals can be Google groups. Each occurrence of a principal counts towards these limits. For example, if the `bindings` grant 50 different roles to `user:alice@example.com`, and not to any other principal, then you can add another 1,450 principals to the `bindings` in the `Policy`.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/apigateway:v1:ApigatewayBinding"
          }
        }
      },
      "$id": "#/definitions/apigateway:v1:ApigatewayPolicy"
    },
    "apigateway:v1:ApigatewayApi": {
      "properties": {
        "managedService": {
          "type": "string",
          "description": "Optional. Immutable. The name of a Google Managed Service ( https://cloud.google.com/service-infrastructure/docs/glossary#managed). If not specified, a new Service will automatically be created in the same project as this API."
        },
        "labels": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "description": "Optional. Resource labels to represent user-provided metadata. Refer to cloud documentation on labels for more details. https://cloud.google.com/compute/docs/labeling-resources"
        },
        "displayName": {
          "description": "Optional. Display name.",
          "type": "string"
        },
        "createTime": {
          "description": "Output only. Created time.",
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "state": {
          "readOnly": true,
          "description": "Output only. State of the API.",
          "type": "string",
          "enum": [
            "STATE_UNSPECIFIED",
            "CREATING",
            "ACTIVE",
            "FAILED",
            "DELETING",
            "UPDATING"
          ]
        },
        "updateTime": {
          "description": "Output only. Updated time.",
          "readOnly": true,
          "type": "string",
          "format": "date-time"
        },
        "name": {
          "type": "string",
          "readOnly": true,
          "description": "Output only. Resource name of the API. Format: projects/{project}/locations/global/apis/{api}"
        }
      },
      "type": "object",
      "description": "An API that can be served by one or more Gateways.",
      "$id": "#/definitions/apigateway:v1:ApigatewayApi"
    },
    "apigateway:v1:ApigatewayTestIamPermissionsResponse": {
      "description": "Response message for `TestIamPermissions` method.",
      "type": "object",
      "properties": {
        "permissions": {
          "description": "A subset of `TestPermissionsRequest.permissions` that the caller is allowed.",
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "$id": "#/definitions/apigateway:v1:ApigatewayTestIamPermissionsResponse"
    },
    "apigateway:v1:ApigatewaySetIamPolicyRequest": {
      "properties": {
        "updateMask": {
          "type": "string",
          "format": "google-fieldmask",
          "description": "OPTIONAL: A FieldMask specifying which fields of the policy to modify. Only the fields in the mask will be modified. If no mask is provided, the following default mask is used: `paths: \"bindings, etag\"`"
        },
        "policy": {
          "description": "REQUIRED: The complete policy to be applied to the `resource`. The size of the policy is limited to a few 10s of KB. An empty policy is a valid policy but certain Google Cloud services (such as Projects) might reject them.",
          "$ref": "#/definitions/apigateway:v1:ApigatewayPolicy"
        }
      },
      "description": "Request message for `SetIamPolicy` method.",
      "type": "object",
      "$id": "#/definitions/apigateway:v1:ApigatewaySetIamPolicyRequest"
    },
    "apigateway:v1:ApigatewayListOperationsResponse": {
      "description": "The response message for Operations.ListOperations.",
      "type": "object",
      "properties": {
        "operations": {
          "description": "A list of operations that matches the specified filter in the request.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/apigateway:v1:ApigatewayOperation"
          }
        },
        "nextPageToken": {
          "type": "string",
          "description": "The standard List next-page token."
        }
      },
      "$id": "#/definitions/apigateway:v1:ApigatewayListOperationsResponse"
    },
    "apigateway:v1:ApigatewayLocation": {
      "description": "A resource that represents a Google Cloud location.",
      "properties": {
        "metadata": {
          "description": "Service-specific metadata. For example the available capacity at the given location.",
          "additionalProperties": {
            "description": "Properties of the object. Contains field @type with type URL.",
            "type": "object"
          },
          "type": "object"
        },
        "displayName": {
          "description": "The friendly name for this location, typically a nearby city name. For example, \"Tokyo\".",
          "type": "string"
        },
        "locationId": {
          "description": "The canonical id for this location. For example: `\"us-east1\"`.",
          "type": "string"
        },
        "labels": {
          "description": "Cross-service attributes for the location. For example {\"cloud.googleapis.com/region\": \"us-east1\"}",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "name": {
          "description": "Resource name for the location, which may vary between implementations. For example: `\"projects/example-project/locations/us-east1\"`",
          "type": "string"
        }
      },
      "type": "object",
      "$id": "#/definitions/apigateway:v1:ApigatewayLocation"
    },
    "apigateway:v1:ApigatewayStatus": {
      "type": "object",
      "description": "The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).",
      "properties": {
        "message": {
          "description": "A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client.",
          "type": "string"
        },
        "code": {
          "type": "integer",
          "format": "int32",
          "description": "The status code, which should be an enum value of google.rpc.Code."
        },
        "details": {
          "items": {
            "type": "object",
            "additionalProperties": {
              "description": "Properties of the object. Contains field @type with type URL.",
              "type": "object"
            }
          },
          "type": "array",
          "description": "A list of messages that carry the error details. There is a common set of message types for APIs to use."
        }
      },
      "$id": "#/definitions/apigateway:v1:ApigatewayStatus"
    },
    "apigateway:v1:ApigatewayListLocationsResponse": {
      "properties": {
        "locations": {
          "items": {
            "$ref": "#/definitions/apigateway:v1:ApigatewayLocation"
          },
          "type": "array",
          "description": "A list of locations that matches the specified filter in the request."
        },
        "nextPageToken": {
          "description": "The standard List next-page token.",
          "type": "string"
        }
      },
      "type": "object",
      "description": "The response message for Locations.ListLocations.",
      "$id": "#/definitions/apigateway:v1:ApigatewayListLocationsResponse"
    },
    "apigateway:v1:ApigatewayTestIamPermissionsRequest": {
      "properties": {
        "permissions": {
          "description": "The set of permissions to check for the `resource`. Permissions with wildcards (such as `*` or `storage.*`) are not allowed. For more information see [IAM Overview](https://cloud.google.com/iam/docs/overview#permissions).",
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "type": "object",
      "description": "Request message for `TestIamPermissions` method.",
      "$id": "#/definitions/apigateway:v1:ApigatewayTestIamPermissionsRequest"
    },
    "apigateway:v1:ApigatewayListGatewaysResponse": {
      "description": "Response message for ApiGatewayService.ListGateways",
      "properties": {
        "nextPageToken": {
          "description": "Next page token.",
          "type": "string"
        },
        "unreachableLocations": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "description": "Locations that could not be reached."
        },
        "gateways": {
          "items": {
            "$ref": "#/definitions/apigateway:v1:ApigatewayGateway"
          },
          "description": "Gateways.",
          "type": "array"
        }
      },
      "type": "object",
      "$id": "#/definitions/apigateway:v1:ApigatewayListGatewaysResponse"
    },
    "apigateway:v1:ApigatewayApiConfigOpenApiDocument": {
      "description": "An OpenAPI Specification Document describing an API.",
      "properties": {
        "document": {
          "$ref": "#/definitions/apigateway:v1:ApigatewayApiConfigFile",
          "description": "The OpenAPI Specification document file."
        }
      },
      "type": "object",
      "$id": "#/definitions/apigateway:v1:ApigatewayApiConfigOpenApiDocument"
    },
    "apigateway:v1:ApigatewayCancelOperationRequest": {
      "properties": {},
      "description": "The request message for Operations.CancelOperation.",
      "type": "object",
      "$id": "#/definitions/apigateway:v1:ApigatewayCancelOperationRequest"
    },
    "apigateway:v1:ApigatewayApiConfig": {
      "description": "An API Configuration is a combination of settings for both the Managed Service and Gateways serving this API Config.",
      "type": "object",
      "properties": {
        "displayName": {
          "description": "Optional. Display name.",
          "type": "string"
        },
        "updateTime": {
          "readOnly": true,
          "format": "date-time",
          "type": "string",
          "description": "Output only. Updated time."
        },
        "managedServiceConfigs": {
          "type": "array",
          "description": "Optional. Service Configuration files. At least one must be included when using gRPC service definitions. See https://cloud.google.com/endpoints/docs/grpc/grpc-service-config#service_configuration_overview for the expected file contents. If multiple files are specified, the files are merged with the following rules: * All singular scalar fields are merged using \"last one wins\" semantics in the order of the files uploaded. * Repeated fields are concatenated. * Singular embedded messages are merged using these rules for nested fields.",
          "items": {
            "$ref": "#/definitions/apigateway:v1:ApigatewayApiConfigFile"
          }
        },
        "gatewayServiceAccount": {
          "type": "string",
          "description": "Immutable. The Google Cloud IAM Service Account that Gateways serving this config should use to authenticate to other services. This may either be the Service Account's email (`{ACCOUNT_ID}@{PROJECT}.iam.gserviceaccount.com`) or its full resource name (`projects/{PROJECT}/accounts/{UNIQUE_ID}`). This is most often used when the service is a GCP resource such as a Cloud Run Service or an IAP-secured service."
        },
        "state": {
          "description": "Output only. State of the API Config.",
          "readOnly": true,
          "enum": [
            "STATE_UNSPECIFIED",
            "CREATING",
            "ACTIVE",
            "FAILED",
            "DELETING",
            "UPDATING",
            "ACTIVATING"
          ],
          "type": "string"
        },
        "createTime": {
          "format": "date-time",
          "type": "string",
          "description": "Output only. Created time.",
          "readOnly": true
        },
        "serviceConfigId": {
          "readOnly": true,
          "type": "string",
          "description": "Output only. The ID of the associated Service Config ( https://cloud.google.com/service-infrastructure/docs/glossary#config)."
        },
        "grpcServices": {
          "type": "array",
          "description": "Optional. gRPC service definition files. If specified, openapi_documents must not be included.",
          "items": {
            "$ref": "#/definitions/apigateway:v1:ApigatewayApiConfigGrpcServiceDefinition"
          }
        },
        "name": {
          "type": "string",
          "readOnly": true,
          "description": "Output only. Resource name of the API Config. Format: projects/{project}/locations/global/apis/{api}/configs/{api_config}"
        },
        "labels": {
          "additionalProperties": {
            "type": "string"
          },
          "type": "object",
          "description": "Optional. Resource labels to represent user-provided metadata. Refer to cloud documentation on labels for more details. https://cloud.google.com/compute/docs/labeling-resources"
        },
        "openapiDocuments": {
          "items": {
            "$ref": "#/definitions/apigateway:v1:ApigatewayApiConfigOpenApiDocument"
          },
          "type": "array",
          "description": "Optional. OpenAPI specification documents. If specified, grpc_services and managed_service_configs must not be included."
        }
      },
      "$id": "#/definitions/apigateway:v1:ApigatewayApiConfig"
    },
    "apigateway:v1:ApigatewayOperationMetadataDiagnostic": {
      "type": "object",
      "description": "Diagnostic information from configuration processing.",
      "properties": {
        "message": {
          "description": "The diagnostic message.",
          "type": "string"
        },
        "location": {
          "type": "string",
          "description": "Location of the diagnostic."
        }
      },
      "$id": "#/definitions/apigateway:v1:ApigatewayOperationMetadataDiagnostic"
    },
    "apigateway:v1:ApigatewayOperationMetadata": {
      "description": "Represents the metadata of the long-running operation.",
      "properties": {
        "endTime": {
          "type": "string",
          "readOnly": true,
          "description": "Output only. The time the operation finished running.",
          "format": "date-time"
        },
        "statusMessage": {
          "type": "string",
          "description": "Output only. Human-readable status of the operation, if any.",
          "readOnly": true
        },
        "verb": {
          "type": "string",
          "readOnly": true,
          "description": "Output only. Name of the verb executed by the operation."
        },
        "target": {
          "readOnly": true,
          "description": "Output only. Server-defined resource path for the target of the operation.",
          "type": "string"
        },
        "diagnostics": {
          "items": {
            "$ref": "#/definitions/apigateway:v1:ApigatewayOperationMetadataDiagnostic"
          },
          "readOnly": true,
          "description": "Output only. Diagnostics generated during processing of configuration source files.",
          "type": "array"
        },
        "requestedCancellation": {
          "readOnly": true,
          "description": "Output only. Identifies whether the user has requested cancellation of the operation. Operations that have successfully been cancelled have Operation.error value with a google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`.",
          "type": "boolean"
        },
        "createTime": {
          "description": "Output only. The time the operation was created.",
          "readOnly": true,
          "type": "string",
          "format": "date-time"
        },
        "apiVersion": {
          "description": "Output only. API version used to start the operation.",
          "readOnly": true,
          "type": "string"
        }
      },
      "type": "object",
      "$id": "#/definitions/apigateway:v1:ApigatewayOperationMetadata"
    },
    "apigateway:v1:ApigatewayApiConfigFile": {
      "description": "A lightweight description of a file.",
      "properties": {
        "contents": {
          "description": "The bytes that constitute the file.",
          "type": "string",
          "format": "byte"
        },
        "path": {
          "type": "string",
          "description": "The file path (full or relative path). This is typically the path of the file when it is uploaded."
        }
      },
      "type": "object",
      "$id": "#/definitions/apigateway:v1:ApigatewayApiConfigFile"
    },
    "apigateway:v1:ApigatewayListApisResponse": {
      "description": "Response message for ApiGatewayService.ListApis",
      "properties": {
        "apis": {
          "items": {
            "$ref": "#/definitions/apigateway:v1:ApigatewayApi"
          },
          "type": "array",
          "description": "APIs."
        },
        "nextPageToken": {
          "type": "string",
          "description": "Next page token."
        },
        "unreachableLocations": {
          "type": "array",
          "description": "Locations that could not be reached.",
          "items": {
            "type": "string"
          }
        }
      },
      "type": "object",
      "$id": "#/definitions/apigateway:v1:ApigatewayListApisResponse"
    },
    "apigateway:v1:ApigatewayGateway": {
      "properties": {
        "defaultHostname": {
          "readOnly": true,
          "description": "Output only. The default API Gateway host name of the form `{gateway_id}-{hash}.{region_code}.gateway.dev`.",
          "type": "string"
        },
        "state": {
          "type": "string",
          "enum": [
            "STATE_UNSPECIFIED",
            "CREATING",
            "ACTIVE",
            "FAILED",
            "DELETING",
            "UPDATING"
          ],
          "readOnly": true,
          "description": "Output only. The current state of the Gateway."
        },
        "labels": {
          "description": "Optional. Resource labels to represent user-provided metadata. Refer to cloud documentation on labels for more details. https://cloud.google.com/compute/docs/labeling-resources",
          "additionalProperties": {
            "type": "string"
          },
          "type": "object"
        },
        "updateTime": {
          "description": "Output only. Updated time.",
          "readOnly": true,
          "type": "string",
          "format": "date-time"
        },
        "apiConfig": {
          "type": "string",
          "description": "Required. Resource name of the API Config for this Gateway. Format: projects/{project}/locations/global/apis/{api}/configs/{apiConfig}"
        },
        "name": {
          "readOnly": true,
          "description": "Output only. Resource name of the Gateway. Format: projects/{project}/locations/{location}/gateways/{gateway}",
          "type": "string"
        },
        "createTime": {
          "description": "Output only. Created time.",
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "displayName": {
          "type": "string",
          "description": "Optional. Display name."
        }
      },
      "description": "A Gateway is an API-aware HTTP proxy. It performs API-Method and/or API-Consumer specific actions based on an API Config such as authentication, policy enforcement, and backend selection.",
      "type": "object",
      "$id": "#/definitions/apigateway:v1:ApigatewayGateway"
    },
    "apigateway:v1:Empty": {
      "description": "A generic empty message that you can re-use to avoid defining duplicated empty messages in your APIs. A typical example is to use it as the request or the response type of an API method. For instance: service Foo { rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty); }",
      "type": "object",
      "properties": {},
      "$id": "#/definitions/apigateway:v1:Empty"
    },
    "apigateway:v1:ApigatewayAuditConfig": {
      "type": "object",
      "properties": {
        "service": {
          "description": "Specifies a service that will be enabled for audit logging. For example, `storage.googleapis.com`, `cloudsql.googleapis.com`. `allServices` is a special value that covers all services.",
          "type": "string"
        },
        "auditLogConfigs": {
          "description": "The configuration for logging of each type of permission.",
          "items": {
            "$ref": "#/definitions/apigateway:v1:ApigatewayAuditLogConfig"
          },
          "type": "array"
        }
      },
      "description": "Specifies the audit configuration for a service. The configuration determines which permission types are logged, and what identities, if any, are exempted from logging. An AuditConfig must have one or more AuditLogConfigs. If there are AuditConfigs for both `allServices` and a specific service, the union of the two AuditConfigs is used for that service: the log_types specified in each AuditConfig are enabled, and the exempted_members in each AuditLogConfig are exempted. Example Policy with multiple AuditConfigs: { \"audit_configs\": [ { \"service\": \"allServices\", \"audit_log_configs\": [ { \"log_type\": \"DATA_READ\", \"exempted_members\": [ \"user:jose@example.com\" ] }, { \"log_type\": \"DATA_WRITE\" }, { \"log_type\": \"ADMIN_READ\" } ] }, { \"service\": \"sampleservice.googleapis.com\", \"audit_log_configs\": [ { \"log_type\": \"DATA_READ\" }, { \"log_type\": \"DATA_WRITE\", \"exempted_members\": [ \"user:aliya@example.com\" ] } ] } ] } For sampleservice, this policy enables DATA_READ, DATA_WRITE and ADMIN_READ logging. It also exempts `jose@example.com` from DATA_READ logging, and `aliya@example.com` from DATA_WRITE logging.",
      "$id": "#/definitions/apigateway:v1:ApigatewayAuditConfig"
    },
    "redis:v1:GoogleCloudRedisV1LocationMetadata": {
      "properties": {
        "availableZones": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/redis:v1:GoogleCloudRedisV1ZoneMetadata"
          },
          "description": "Output only. The set of available zones in the location. The map is keyed by the lowercase ID of each zone, as defined by GCE. These keys can be specified in `location_id` or `alternative_location_id` fields when creating a Redis instance.",
          "readOnly": true
        }
      },
      "type": "object",
      "description": "This location metadata represents additional configuration options for a given location where a Redis instance may be created. All fields are output only. It is returned as content of the `google.cloud.location.Location.metadata` field.",
      "$id": "#/definitions/redis:v1:GoogleCloudRedisV1LocationMetadata"
    },
    "redis:v1:NodeInfo": {
      "type": "object",
      "properties": {
        "zone": {
          "description": "Output only. Location of the node.",
          "readOnly": true,
          "type": "string"
        },
        "id": {
          "type": "string",
          "description": "Output only. Node identifying string. e.g. 'node-0', 'node-1'",
          "readOnly": true
        }
      },
      "description": "Node specific properties.",
      "$id": "#/definitions/redis:v1:NodeInfo"
    },
    "redis:v1:ImportInstanceRequest": {
      "properties": {
        "inputConfig": {
          "description": "Required. Specify data to be imported.",
          "$ref": "#/definitions/redis:v1:InputConfig"
        }
      },
      "description": "Request for Import.",
      "type": "object",
      "$id": "#/definitions/redis:v1:ImportInstanceRequest"
    },
    "redis:v1:FailoverInstanceRequest": {
      "properties": {
        "dataProtectionMode": {
          "description": "Optional. Available data protection modes that the user can choose. If it's unspecified, data protection mode will be LIMITED_DATA_LOSS by default.",
          "enum": [
            "DATA_PROTECTION_MODE_UNSPECIFIED",
            "LIMITED_DATA_LOSS",
            "FORCE_DATA_LOSS"
          ],
          "type": "string"
        }
      },
      "type": "object",
      "description": "Request for Failover.",
      "$id": "#/definitions/redis:v1:FailoverInstanceRequest"
    },
    "redis:v1:ListInstancesResponse": {
      "type": "object",
      "properties": {
        "unreachable": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Locations that could not be reached."
        },
        "nextPageToken": {
          "description": "Token to retrieve the next page of results, or empty if there are no more results in the list.",
          "type": "string"
        },
        "instances": {
          "type": "array",
          "description": "A list of Redis instances in the project in the specified location, or across all locations. If the `location_id` in the parent field of the request is \"-\", all regions available to the project are queried, and the results aggregated. If in such an aggregated query a location is unavailable, a placeholder Redis entry is included in the response with the `name` field set to a value of the form `projects/{project_id}/locations/{location_id}/instances/`- and the `status` field set to ERROR and `status_message` field set to \"location not available for ListInstances\".",
          "items": {
            "$ref": "#/definitions/redis:v1:Instance"
          }
        }
      },
      "description": "Response for ListInstances.",
      "$id": "#/definitions/redis:v1:ListInstancesResponse"
    },
    "redis:v1:Empty": {
      "properties": {},
      "description": "A generic empty message that you can re-use to avoid defining duplicated empty messages in your APIs. A typical example is to use it as the request or the response type of an API method. For instance: service Foo { rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty); }",
      "type": "object",
      "$id": "#/definitions/redis:v1:Empty"
    },
    "redis:v1:GcsSource": {
      "type": "object",
      "properties": {
        "uri": {
          "description": "Required. Source data URI. (e.g. 'gs://my_bucket/my_object').",
          "type": "string"
        }
      },
      "description": "The Cloud Storage location for the input content",
      "$id": "#/definitions/redis:v1:GcsSource"
    },
    "redis:v1:ListOperationsResponse": {
      "properties": {
        "operations": {
          "type": "array",
          "description": "A list of operations that matches the specified filter in the request.",
          "items": {
            "$ref": "#/definitions/redis:v1:Operation"
          }
        },
        "nextPageToken": {
          "type": "string",
          "description": "The standard List next-page token."
        }
      },
      "description": "The response message for Operations.ListOperations.",
      "type": "object",
      "$id": "#/definitions/redis:v1:ListOperationsResponse"
    },
    "redis:v1:RescheduleMaintenanceRequest": {
      "description": "Request for RescheduleMaintenance.",
      "type": "object",
      "properties": {
        "rescheduleType": {
          "enum": [
            "RESCHEDULE_TYPE_UNSPECIFIED",
            "IMMEDIATE",
            "NEXT_AVAILABLE_WINDOW",
            "SPECIFIC_TIME"
          ],
          "description": "Required. If reschedule type is SPECIFIC_TIME, must set up schedule_time as well.",
          "type": "string"
        },
        "scheduleTime": {
          "format": "date-time",
          "description": "Optional. Timestamp when the maintenance shall be rescheduled to if reschedule_type=SPECIFIC_TIME, in RFC 3339 format, for example `2012-11-15T16:19:00.094Z`.",
          "type": "string"
        }
      },
      "$id": "#/definitions/redis:v1:RescheduleMaintenanceRequest"
    },
    "redis:v1:Instance": {
      "properties": {
        "host": {
          "description": "Output only. Hostname or IP address of the exposed Redis endpoint used by clients to connect to the service.",
          "type": "string",
          "readOnly": true
        },
        "redisVersion": {
          "description": "Optional. The version of Redis software. If not provided, latest supported version will be used. Currently, the supported values are: * `REDIS_3_2` for Redis 3.2 compatibility * `REDIS_4_0` for Redis 4.0 compatibility (default) * `REDIS_5_0` for Redis 5.0 compatibility * `REDIS_6_X` for Redis 6.x compatibility",
          "type": "string"
        },
        "customerManagedKey": {
          "type": "string",
          "description": "Optional. The KMS key reference that the customer provides when trying to create the instance."
        },
        "persistenceIamIdentity": {
          "description": "Output only. Cloud IAM identity used by import / export operations to transfer data to/from Cloud Storage. Format is \"serviceAccount:\". The value may change over time for a given instance so should be checked before each import/export operation.",
          "type": "string",
          "readOnly": true
        },
        "authEnabled": {
          "type": "boolean",
          "description": "Optional. Indicates whether OSS Redis AUTH is enabled for the instance. If set to \"true\" AUTH is enabled on the instance. Default value is \"false\" meaning AUTH is disabled."
        },
        "statusMessage": {
          "type": "string",
          "description": "Output only. Additional information about the current status of this instance, if available.",
          "readOnly": true
        },
        "replicaCount": {
          "type": "integer",
          "description": "Optional. The number of replica nodes. The valid range for the Standard Tier with read replicas enabled is [1-5] and defaults to 2. If read replicas are not enabled for a Standard Tier instance, the only valid value is 1 and the default is 1. The valid value for basic tier is 0 and the default is also 0.",
          "format": "int32"
        },
        "availableMaintenanceVersions": {
          "type": "array",
          "description": "Optional. The available maintenance versions that an instance could update to.",
          "items": {
            "type": "string"
          }
        },
        "readEndpoint": {
          "description": "Output only. Hostname or IP address of the exposed readonly Redis endpoint. Standard tier only. Targets all healthy replica nodes in instance. Replication is asynchronous and replica nodes will exhibit some lag behind the primary. Write requests must target 'host'.",
          "readOnly": true,
          "type": "string"
        },
        "maintenanceSchedule": {
          "description": "Output only. Date and time of upcoming maintenance events which have been scheduled.",
          "readOnly": true,
          "$ref": "#/definitions/redis:v1:MaintenanceSchedule"
        },
        "maintenancePolicy": {
          "description": "Optional. The maintenance policy for the instance. If not provided, maintenance events can be performed at any time.",
          "$ref": "#/definitions/redis:v1:MaintenancePolicy"
        },
        "state": {
          "enum": [
            "STATE_UNSPECIFIED",
            "CREATING",
            "READY",
            "UPDATING",
            "DELETING",
            "REPAIRING",
            "MAINTENANCE",
            "IMPORTING",
            "FAILING_OVER"
          ],
          "readOnly": true,
          "type": "string",
          "description": "Output only. The current state of this instance."
        },
        "suspensionReasons": {
          "description": "Optional. reasons that causes instance in \"SUSPENDED\" state.",
          "items": {
            "type": "string",
            "enum": [
              "SUSPENSION_REASON_UNSPECIFIED",
              "CUSTOMER_MANAGED_KEY_ISSUE"
            ]
          },
          "type": "array"
        },
        "port": {
          "description": "Output only. The port number of the exposed Redis endpoint.",
          "readOnly": true,
          "type": "integer",
          "format": "int32"
        },
        "locationId": {
          "type": "string",
          "description": "Optional. The zone where the instance will be provisioned. If not provided, the service will choose a zone from the specified region for the instance. For standard tier, additional nodes will be added across multiple zones for protection against zonal failures. If specified, at least one node will be provisioned in this zone."
        },
        "transitEncryptionMode": {
          "type": "string",
          "enum": [
            "TRANSIT_ENCRYPTION_MODE_UNSPECIFIED",
            "SERVER_AUTHENTICATION",
            "DISABLED"
          ],
          "description": "Optional. The TLS mode of the Redis instance. If not provided, TLS is disabled for the instance."
        },
        "persistenceConfig": {
          "$ref": "#/definitions/redis:v1:PersistenceConfig",
          "description": "Optional. Persistence configuration parameters"
        },
        "tier": {
          "enum": [
            "TIER_UNSPECIFIED",
            "BASIC",
            "STANDARD_HA"
          ],
          "description": "Required. The service tier of the instance.",
          "type": "string"
        },
        "memorySizeGb": {
          "description": "Required. Redis memory size in GiB.",
          "format": "int32",
          "type": "integer"
        },
        "alternativeLocationId": {
          "type": "string",
          "description": "Optional. If specified, at least one node will be provisioned in this zone in addition to the zone specified in location_id. Only applicable to standard tier. If provided, it must be a different zone from the one provided in [location_id]. Additional nodes beyond the first 2 will be placed in zones selected by the service."
        },
        "labels": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "Resource labels to represent user provided metadata",
          "type": "object"
        },
        "name": {
          "type": "string",
          "description": "Required. Unique name of the resource in this scope including project and location using the form: `projects/{project_id}/locations/{location_id}/instances/{instance_id}` Note: Redis instances are managed and addressed at regional level so location_id here refers to a GCP region; however, users may choose which specific zone (or collection of zones for cross-zone instances) an instance should be provisioned in. Refer to location_id and alternative_location_id fields for more details."
        },
        "serverCaCerts": {
          "type": "array",
          "description": "Output only. List of server CA certificates for the instance.",
          "items": {
            "$ref": "#/definitions/redis:v1:TlsCertificate"
          },
          "readOnly": true
        },
        "displayName": {
          "description": "An arbitrary and optional user-provided name for the instance.",
          "type": "string"
        },
        "authorizedNetwork": {
          "type": "string",
          "description": "Optional. The full name of the Google Compute Engine [network](https://cloud.google.com/vpc/docs/vpc) to which the instance is connected. If left unspecified, the `default` network will be used."
        },
        "nodes": {
          "readOnly": true,
          "type": "array",
          "items": {
            "$ref": "#/definitions/redis:v1:NodeInfo"
          },
          "description": "Output only. Info per node."
        },
        "secondaryIpRange": {
          "description": "Optional. Additional IP range for node placement. Required when enabling read replicas on an existing instance. For DIRECT_PEERING mode value must be a CIDR range of size /28, or \"auto\". For PRIVATE_SERVICE_ACCESS mode value must be the name of an allocated address range associated with the private service access connection, or \"auto\".",
          "type": "string"
        },
        "maintenanceVersion": {
          "description": "Optional. The self service update maintenance version. The version is date based such as \"20210712_00_00\".",
          "type": "string"
        },
        "readReplicasMode": {
          "type": "string",
          "enum": [
            "READ_REPLICAS_MODE_UNSPECIFIED",
            "READ_REPLICAS_DISABLED",
            "READ_REPLICAS_ENABLED"
          ],
          "description": "Optional. Read replicas mode for the instance. Defaults to READ_REPLICAS_DISABLED."
        },
        "redisConfigs": {
          "type": "object",
          "description": "Optional. Redis configuration parameters, according to http://redis.io/topics/config. Currently, the only supported parameters are: Redis version 3.2 and newer: * maxmemory-policy * notify-keyspace-events Redis version 4.0 and newer: * activedefrag * lfu-decay-time * lfu-log-factor * maxmemory-gb Redis version 5.0 and newer: * stream-node-max-bytes * stream-node-max-entries",
          "additionalProperties": {
            "type": "string"
          }
        },
        "reservedIpRange": {
          "type": "string",
          "description": "Optional. For DIRECT_PEERING mode, the CIDR range of internal addresses that are reserved for this instance. Range must be unique and non-overlapping with existing subnets in an authorized network. For PRIVATE_SERVICE_ACCESS mode, the name of one allocated IP address ranges associated with this private service access connection. If not provided, the service will choose an unused /29 block, for example, 10.0.0.0/29 or 192.168.0.0/29. For READ_REPLICAS_ENABLED the default block size is /28."
        },
        "readEndpointPort": {
          "format": "int32",
          "readOnly": true,
          "description": "Output only. The port number of the exposed readonly redis endpoint. Standard tier only. Write requests should target 'port'.",
          "type": "integer"
        },
        "currentLocationId": {
          "type": "string",
          "readOnly": true,
          "description": "Output only. The current zone where the Redis primary node is located. In basic tier, this will always be the same as [location_id]. In standard tier, this can be the zone of any node in the instance."
        },
        "createTime": {
          "description": "Output only. The time the instance was created.",
          "readOnly": true,
          "format": "date-time",
          "type": "string"
        },
        "connectMode": {
          "enum": [
            "CONNECT_MODE_UNSPECIFIED",
            "DIRECT_PEERING",
            "PRIVATE_SERVICE_ACCESS"
          ],
          "type": "string",
          "description": "Optional. The network connect mode of the Redis instance. If not provided, the connect mode defaults to DIRECT_PEERING."
        }
      },
      "type": "object",
      "description": "A Memorystore for Redis instance.",
      "$id": "#/definitions/redis:v1:Instance"
    },
    "redis:v1:GcsDestination": {
      "type": "object",
      "description": "The Cloud Storage location for the output content",
      "properties": {
        "uri": {
          "type": "string",
          "description": "Required. Data destination URI (e.g. 'gs://my_bucket/my_object'). Existing files will be overwritten."
        }
      },
      "$id": "#/definitions/redis:v1:GcsDestination"
    },
    "redis:v1:InstanceAuthString": {
      "properties": {
        "authString": {
          "description": "AUTH string set on the instance.",
          "type": "string"
        }
      },
      "description": "Instance AUTH string details.",
      "type": "object",
      "$id": "#/definitions/redis:v1:InstanceAuthString"
    },
    "redis:v1:MaintenanceSchedule": {
      "properties": {
        "endTime": {
          "format": "date-time",
          "type": "string",
          "description": "Output only. The end time of any upcoming scheduled maintenance for this instance.",
          "readOnly": true
        },
        "scheduleDeadlineTime": {
          "description": "Output only. The deadline that the maintenance schedule start time can not go beyond, including reschedule.",
          "format": "date-time",
          "readOnly": true,
          "type": "string"
        },
        "canReschedule": {
          "description": "If the scheduled maintenance can be rescheduled, default is true.",
          "type": "boolean",
          "deprecated": true
        },
        "startTime": {
          "format": "date-time",
          "description": "Output only. The start time of any upcoming scheduled maintenance for this instance.",
          "readOnly": true,
          "type": "string"
        }
      },
      "type": "object",
      "description": "Upcoming maintenance schedule. If no maintenance is scheduled, fields are not populated.",
      "$id": "#/definitions/redis:v1:MaintenanceSchedule"
    },
    "redis:v1:Location": {
      "properties": {
        "labels": {
          "additionalProperties": {
            "type": "string"
          },
          "type": "object",
          "description": "Cross-service attributes for the location. For example {\"cloud.googleapis.com/region\": \"us-east1\"}"
        },
        "displayName": {
          "description": "The friendly name for this location, typically a nearby city name. For example, \"Tokyo\".",
          "type": "string"
        },
        "locationId": {
          "description": "Resource ID for the region. For example: \"us-east1\".",
          "type": "string"
        },
        "metadata": {
          "type": "object",
          "additionalProperties": {
            "type": "object",
            "description": "Properties of the object. Contains field @type with type URL."
          },
          "description": "Output only. The set of available zones in the location. The map is keyed by the lowercase ID of each zone, as defined by Compute Engine. These keys can be specified in `location_id` or `alternative_location_id` fields when creating a Redis instance."
        },
        "name": {
          "type": "string",
          "description": "Full resource name for the region. For example: \"projects/example-project/locations/us-east1\"."
        }
      },
      "type": "object",
      "description": "A resource that represents a Google Cloud location.",
      "$id": "#/definitions/redis:v1:Location"
    },
    "redis:v1:ListLocationsResponse": {
      "type": "object",
      "description": "The response message for Locations.ListLocations.",
      "properties": {
        "locations": {
          "description": "A list of locations that matches the specified filter in the request.",
          "items": {
            "$ref": "#/definitions/redis:v1:Location"
          },
          "type": "array"
        },
        "nextPageToken": {
          "type": "string",
          "description": "The standard List next-page token."
        }
      },
      "$id": "#/definitions/redis:v1:ListLocationsResponse"
    },
    "redis:v1:Status": {
      "type": "object",
      "properties": {
        "code": {
          "format": "int32",
          "description": "The status code, which should be an enum value of google.rpc.Code.",
          "type": "integer"
        },
        "message": {
          "description": "A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client.",
          "type": "string"
        },
        "details": {
          "type": "array",
          "description": "A list of messages that carry the error details. There is a common set of message types for APIs to use.",
          "items": {
            "additionalProperties": {
              "type": "object",
              "description": "Properties of the object. Contains field @type with type URL."
            },
            "type": "object"
          }
        }
      },
      "description": "The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).",
      "$id": "#/definitions/redis:v1:Status"
    },
    "redis:v1:ExportInstanceRequest": {
      "type": "object",
      "description": "Request for Export.",
      "properties": {
        "outputConfig": {
          "description": "Required. Specify data to be exported.",
          "$ref": "#/definitions/redis:v1:OutputConfig"
        }
      },
      "$id": "#/definitions/redis:v1:ExportInstanceRequest"
    },
    "redis:v1:Operation": {
      "properties": {
        "done": {
          "type": "boolean",
          "description": "If the value is `false`, it means the operation is still in progress. If `true`, the operation is completed, and either `error` or `response` is available."
        },
        "error": {
          "description": "The error result of the operation in case of failure or cancellation.",
          "$ref": "#/definitions/redis:v1:Status"
        },
        "name": {
          "type": "string",
          "description": "The server-assigned name, which is only unique within the same service that originally returns it. If you use the default HTTP mapping, the `name` should be a resource name ending with `operations/{unique_id}`."
        },
        "metadata": {
          "additionalProperties": {
            "type": "object",
            "description": "Properties of the object. Contains field @type with type URL."
          },
          "description": "{ `createTime`: The time the operation was created. `endTime`: The time the operation finished running. `target`: Server-defined resource path for the target of the operation. `verb`: Name of the verb executed by the operation. `statusDetail`: Human-readable status of the operation, if any. `cancelRequested`: Identifies whether the user has requested cancellation of the operation. Operations that have successfully been cancelled have Operation.error value with a google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`. `apiVersion`: API version used to start the operation. }",
          "type": "object"
        },
        "response": {
          "type": "object",
          "description": "The normal, successful response of the operation. If the original method returns no data on success, such as `Delete`, the response is `google.protobuf.Empty`. If the original method is standard `Get`/`Create`/`Update`, the response should be the resource. For other methods, the response should have the type `XxxResponse`, where `Xxx` is the original method name. For example, if the original method name is `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`.",
          "additionalProperties": {
            "description": "Properties of the object. Contains field @type with type URL.",
            "type": "object"
          }
        }
      },
      "type": "object",
      "description": "This resource represents a long-running operation that is the result of a network API call.",
      "$id": "#/definitions/redis:v1:Operation"
    },
    "redis:v1:InputConfig": {
      "properties": {
        "gcsSource": {
          "description": "Google Cloud Storage location where input content is located.",
          "$ref": "#/definitions/redis:v1:GcsSource"
        }
      },
      "type": "object",
      "description": "The input content",
      "$id": "#/definitions/redis:v1:InputConfig"
    },
    "redis:v1:GoogleCloudRedisV1ZoneMetadata": {
      "description": "Defines specific information for a particular zone. Currently empty and reserved for future use only.",
      "type": "object",
      "properties": {},
      "$id": "#/definitions/redis:v1:GoogleCloudRedisV1ZoneMetadata"
    },
    "redis:v1:UpgradeInstanceRequest": {
      "description": "Request for UpgradeInstance.",
      "type": "object",
      "properties": {
        "redisVersion": {
          "type": "string",
          "description": "Required. Specifies the target version of Redis software to upgrade to."
        }
      },
      "$id": "#/definitions/redis:v1:UpgradeInstanceRequest"
    },
    "redis:v1:TlsCertificate": {
      "type": "object",
      "description": "TlsCertificate Resource",
      "properties": {
        "cert": {
          "type": "string",
          "description": "PEM representation."
        },
        "expireTime": {
          "type": "string",
          "format": "date-time",
          "description": "Output only. The time when the certificate expires in [RFC 3339](https://tools.ietf.org/html/rfc3339) format, for example `2020-05-18T00:00:00.094Z`.",
          "readOnly": true
        },
        "sha1Fingerprint": {
          "description": "Sha1 Fingerprint of the certificate.",
          "type": "string"
        },
        "createTime": {
          "readOnly": true,
          "description": "Output only. The time when the certificate was created in [RFC 3339](https://tools.ietf.org/html/rfc3339) format, for example `2020-05-18T00:00:00.094Z`.",
          "type": "string",
          "format": "date-time"
        },
        "serialNumber": {
          "type": "string",
          "description": "Serial number, as extracted from the certificate."
        }
      },
      "$id": "#/definitions/redis:v1:TlsCertificate"
    },
    "redis:v1:MaintenancePolicy": {
      "description": "Maintenance policy for an instance.",
      "properties": {
        "createTime": {
          "format": "date-time",
          "description": "Output only. The time when the policy was created.",
          "type": "string",
          "readOnly": true
        },
        "updateTime": {
          "type": "string",
          "format": "date-time",
          "description": "Output only. The time when the policy was last updated.",
          "readOnly": true
        },
        "weeklyMaintenanceWindow": {
          "description": "Optional. Maintenance window that is applied to resources covered by this policy. Minimum 1. For the current version, the maximum number of weekly_window is expected to be one.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/redis:v1:WeeklyMaintenanceWindow"
          }
        },
        "description": {
          "type": "string",
          "description": "Optional. Description of what this policy is for. Create/Update methods return INVALID_ARGUMENT if the length is greater than 512."
        }
      },
      "type": "object",
      "$id": "#/definitions/redis:v1:MaintenancePolicy"
    },
    "redis:v1:WeeklyMaintenanceWindow": {
      "description": "Time window in which disruptive maintenance updates occur. Non-disruptive updates can occur inside or outside this window.",
      "properties": {
        "startTime": {
          "$ref": "#/definitions/redis:v1:TimeOfDay",
          "description": "Required. Start time of the window in UTC time."
        },
        "duration": {
          "description": "Output only. Duration of the maintenance window. The current window is fixed at 1 hour.",
          "readOnly": true,
          "type": "string",
          "format": "duration"
        },
        "day": {
          "type": "string",
          "enum": [
            "DAY_OF_WEEK_UNSPECIFIED",
            "MONDAY",
            "TUESDAY",
            "WEDNESDAY",
            "THURSDAY",
            "FRIDAY",
            "SATURDAY",
            "SUNDAY"
          ],
          "description": "Required. The day of week that maintenance updates occur."
        }
      },
      "type": "object",
      "$id": "#/definitions/redis:v1:WeeklyMaintenanceWindow"
    },
    "redis:v1:PersistenceConfig": {
      "properties": {
        "rdbNextSnapshotTime": {
          "type": "string",
          "readOnly": true,
          "description": "Output only. The next time that a snapshot attempt is scheduled to occur.",
          "format": "date-time"
        },
        "persistenceMode": {
          "description": "Optional. Controls whether Persistence features are enabled. If not provided, the existing value will be used.",
          "enum": [
            "PERSISTENCE_MODE_UNSPECIFIED",
            "DISABLED",
            "RDB"
          ],
          "type": "string"
        },
        "rdbSnapshotPeriod": {
          "type": "string",
          "enum": [
            "SNAPSHOT_PERIOD_UNSPECIFIED",
            "ONE_HOUR",
            "SIX_HOURS",
            "TWELVE_HOURS",
            "TWENTY_FOUR_HOURS"
          ],
          "description": "Optional. Period between RDB snapshots. Snapshots will be attempted every period starting from the provided snapshot start time. For example, a start time of 01/01/2033 06:45 and SIX_HOURS snapshot period will do nothing until 01/01/2033, and then trigger snapshots every day at 06:45, 12:45, 18:45, and 00:45 the next day, and so on. If not provided, TWENTY_FOUR_HOURS will be used as default."
        },
        "rdbSnapshotStartTime": {
          "format": "date-time",
          "type": "string",
          "description": "Optional. Date and time that the first snapshot was/will be attempted, and to which future snapshots will be aligned. If not provided, the current time will be used."
        }
      },
      "type": "object",
      "description": "Configuration of the persistence functionality.",
      "$id": "#/definitions/redis:v1:PersistenceConfig"
    },
    "redis:v1:ReconciliationOperationMetadata": {
      "description": "Operation metadata returned by the CLH during resource state reconciliation.",
      "properties": {
        "exclusiveAction": {
          "description": "Excluisive action returned by the CLH.",
          "type": "string",
          "enum": [
            "UNKNOWN_REPAIR_ACTION",
            "DELETE",
            "RETRY"
          ]
        },
        "deleteResource": {
          "deprecated": true,
          "description": "DEPRECATED. Use exclusive_action instead.",
          "type": "boolean"
        }
      },
      "type": "object",
      "$id": "#/definitions/redis:v1:ReconciliationOperationMetadata"
    },
    "redis:v1:OutputConfig": {
      "type": "object",
      "properties": {
        "gcsDestination": {
          "$ref": "#/definitions/redis:v1:GcsDestination",
          "description": "Google Cloud Storage destination for output content."
        }
      },
      "description": "The output content",
      "$id": "#/definitions/redis:v1:OutputConfig"
    },
    "redis:v1:TimeOfDay": {
      "description": "Represents a time of day. The date and time zone are either not significant or are specified elsewhere. An API may choose to allow leap seconds. Related types are google.type.Date and `google.protobuf.Timestamp`.",
      "type": "object",
      "properties": {
        "nanos": {
          "type": "integer",
          "description": "Fractions of seconds in nanoseconds. Must be from 0 to 999,999,999.",
          "format": "int32"
        },
        "seconds": {
          "format": "int32",
          "type": "integer",
          "description": "Seconds of minutes of the time. Must normally be from 0 to 59. An API may allow the value 60 if it allows leap-seconds."
        },
        "minutes": {
          "description": "Minutes of hour of day. Must be from 0 to 59.",
          "type": "integer",
          "format": "int32"
        },
        "hours": {
          "format": "int32",
          "description": "Hours of day in 24 hour format. Should be from 0 to 23. An API may choose to allow the value \"24:00:00\" for scenarios like business closing time.",
          "type": "integer"
        }
      },
      "$id": "#/definitions/redis:v1:TimeOfDay"
    },
    "redis:v1:GoogleCloudRedisV1OperationMetadata": {
      "description": "Represents the v1 metadata of the long-running operation.",
      "properties": {
        "createTime": {
          "format": "date-time",
          "type": "string",
          "description": "Creation timestamp."
        },
        "target": {
          "description": "Operation target.",
          "type": "string"
        },
        "cancelRequested": {
          "type": "boolean",
          "description": "Specifies if cancellation was requested for the operation."
        },
        "verb": {
          "description": "Operation verb.",
          "type": "string"
        },
        "statusDetail": {
          "description": "Operation status details.",
          "type": "string"
        },
        "apiVersion": {
          "type": "string",
          "description": "API version."
        },
        "endTime": {
          "description": "End timestamp.",
          "format": "date-time",
          "type": "string"
        }
      },
      "type": "object",
      "$id": "#/definitions/redis:v1:GoogleCloudRedisV1OperationMetadata"
    },
    "vpcaccess:v1:Subnet": {
      "description": "The subnet in which to house the connector",
      "type": "object",
      "properties": {
        "name": {
          "description": "Subnet name (relative, not fully qualified). E.g. if the full subnet selfLink is https://compute.googleapis.com/compute/v1/projects/{project}/regions/{region}/subnetworks/{subnetName} the correct input for this field would be {subnetName}",
          "type": "string"
        },
        "projectId": {
          "description": "Project in which the subnet exists. If not set, this project is assumed to be the project for which the connector create request was issued.",
          "type": "string"
        }
      },
      "$id": "#/definitions/vpcaccess:v1:Subnet"
    },
    "vpcaccess:v1:ListOperationsResponse": {
      "type": "object",
      "description": "The response message for Operations.ListOperations.",
      "properties": {
        "operations": {
          "items": {
            "$ref": "#/definitions/vpcaccess:v1:Operation"
          },
          "type": "array",
          "description": "A list of operations that matches the specified filter in the request."
        },
        "nextPageToken": {
          "type": "string",
          "description": "The standard List next-page token."
        }
      },
      "$id": "#/definitions/vpcaccess:v1:ListOperationsResponse"
    },
    "vpcaccess:v1:Operation": {
      "properties": {
        "response": {
          "type": "object",
          "description": "The normal, successful response of the operation. If the original method returns no data on success, such as `Delete`, the response is `google.protobuf.Empty`. If the original method is standard `Get`/`Create`/`Update`, the response should be the resource. For other methods, the response should have the type `XxxResponse`, where `Xxx` is the original method name. For example, if the original method name is `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`.",
          "additionalProperties": {
            "description": "Properties of the object. Contains field @type with type URL.",
            "type": "object"
          }
        },
        "metadata": {
          "description": "Service-specific metadata associated with the operation. It typically contains progress information and common metadata such as create time. Some services might not provide such metadata. Any method that returns a long-running operation should document the metadata type, if any.",
          "type": "object",
          "additionalProperties": {
            "type": "object",
            "description": "Properties of the object. Contains field @type with type URL."
          }
        },
        "name": {
          "description": "The server-assigned name, which is only unique within the same service that originally returns it. If you use the default HTTP mapping, the `name` should be a resource name ending with `operations/{unique_id}`.",
          "type": "string"
        },
        "error": {
          "$ref": "#/definitions/vpcaccess:v1:Status",
          "description": "The error result of the operation in case of failure or cancellation."
        },
        "done": {
          "description": "If the value is `false`, it means the operation is still in progress. If `true`, the operation is completed, and either `error` or `response` is available.",
          "type": "boolean"
        }
      },
      "description": "This resource represents a long-running operation that is the result of a network API call.",
      "type": "object",
      "$id": "#/definitions/vpcaccess:v1:Operation"
    },
    "vpcaccess:v1:OperationMetadata": {
      "properties": {
        "endTime": {
          "type": "string",
          "description": "Output only. Time when the operation completed.",
          "format": "date-time",
          "readOnly": true
        },
        "method": {
          "description": "Output only. Method that initiated the operation e.g. google.cloud.vpcaccess.v1.Connectors.CreateConnector.",
          "readOnly": true,
          "type": "string"
        },
        "target": {
          "description": "Output only. Name of the resource that this operation is acting on e.g. projects/my-project/locations/us-central1/connectors/v1.",
          "readOnly": true,
          "type": "string"
        },
        "createTime": {
          "readOnly": true,
          "description": "Output only. Time when the operation was created.",
          "type": "string",
          "format": "date-time"
        }
      },
      "description": "Metadata for google.longrunning.Operation.",
      "type": "object",
      "$id": "#/definitions/vpcaccess:v1:OperationMetadata"
    },
    "vpcaccess:v1:ListLocationsResponse": {
      "description": "The response message for Locations.ListLocations.",
      "properties": {
        "nextPageToken": {
          "type": "string",
          "description": "The standard List next-page token."
        },
        "locations": {
          "description": "A list of locations that matches the specified filter in the request.",
          "items": {
            "$ref": "#/definitions/vpcaccess:v1:Location"
          },
          "type": "array"
        }
      },
      "type": "object",
      "$id": "#/definitions/vpcaccess:v1:ListLocationsResponse"
    },
    "vpcaccess:v1:OperationMetadataV1Alpha1": {
      "type": "object",
      "properties": {
        "method": {
          "readOnly": true,
          "description": "Output only. Method that initiated the operation e.g. google.cloud.vpcaccess.v1alpha1.Connectors.CreateConnector.",
          "type": "string"
        },
        "target": {
          "description": "Output only. Name of the resource that this operation is acting on e.g. projects/my-project/locations/us-central1/connectors/v1.",
          "type": "string",
          "readOnly": true
        },
        "endTime": {
          "type": "string",
          "format": "date-time",
          "description": "Output only. Time when the operation completed.",
          "readOnly": true
        },
        "insertTime": {
          "description": "Output only. Time when the operation was created.",
          "type": "string",
          "readOnly": true,
          "format": "date-time"
        }
      },
      "description": "Metadata for google.longrunning.Operation.",
      "$id": "#/definitions/vpcaccess:v1:OperationMetadataV1Alpha1"
    },
    "vpcaccess:v1:Connector": {
      "type": "object",
      "properties": {
        "connectedProjects": {
          "description": "Output only. List of projects using the connector.",
          "type": "array",
          "items": {
            "type": "string"
          },
          "readOnly": true
        },
        "ipCidrRange": {
          "type": "string",
          "description": "The range of internal addresses that follows RFC 4632 notation. Example: `10.132.0.0/28`."
        },
        "minInstances": {
          "type": "integer",
          "format": "int32",
          "description": "Minimum value of instances in autoscaling group underlying the connector."
        },
        "name": {
          "type": "string",
          "description": "The resource name in the format `projects/*/locations/*/connectors/*`."
        },
        "maxThroughput": {
          "type": "integer",
          "format": "int32",
          "description": "Maximum throughput of the connector in Mbps. Default is 300, max is 1000. If both max-throughput and max-instances are provided, max-instances takes precedence over max-throughput."
        },
        "state": {
          "description": "Output only. State of the VPC access connector.",
          "readOnly": true,
          "type": "string",
          "enum": [
            "STATE_UNSPECIFIED",
            "READY",
            "CREATING",
            "DELETING",
            "ERROR",
            "UPDATING"
          ]
        },
        "network": {
          "description": "Name of a VPC network.",
          "type": "string"
        },
        "minThroughput": {
          "description": "Minimum throughput of the connector in Mbps. Default and min is 200. If both min-throughput and min-instances are provided, min-instances takes precedence over min-throughput.",
          "format": "int32",
          "type": "integer"
        },
        "maxInstances": {
          "type": "integer",
          "description": "Maximum value of instances in autoscaling group underlying the connector.",
          "format": "int32"
        },
        "subnet": {
          "$ref": "#/definitions/vpcaccess:v1:Subnet",
          "description": "The subnet in which to house the VPC Access Connector."
        },
        "machineType": {
          "type": "string",
          "description": "Machine type of VM Instance underlying connector. Default is e2-micro"
        }
      },
      "description": "Definition of a Serverless VPC Access connector.",
      "$id": "#/definitions/vpcaccess:v1:Connector"
    },
    "vpcaccess:v1:OperationMetadataV1Beta1": {
      "description": "Metadata for google.longrunning.Operation.",
      "type": "object",
      "properties": {
        "endTime": {
          "format": "date-time",
          "readOnly": true,
          "description": "Output only. Time when the operation completed.",
          "type": "string"
        },
        "target": {
          "description": "Output only. Name of the resource that this operation is acting on e.g. projects/my-project/locations/us-central1/connectors/v1.",
          "readOnly": true,
          "type": "string"
        },
        "method": {
          "description": "Output only. Method that initiated the operation e.g. google.cloud.vpcaccess.v1beta1.Connectors.CreateConnector.",
          "readOnly": true,
          "type": "string"
        },
        "createTime": {
          "format": "date-time",
          "readOnly": true,
          "description": "Output only. Time when the operation was created.",
          "type": "string"
        }
      },
      "$id": "#/definitions/vpcaccess:v1:OperationMetadataV1Beta1"
    },
    "vpcaccess:v1:ListConnectorsResponse": {
      "type": "object",
      "description": "Response for listing Serverless VPC Access connectors.",
      "properties": {
        "connectors": {
          "items": {
            "$ref": "#/definitions/vpcaccess:v1:Connector"
          },
          "type": "array",
          "description": "List of Serverless VPC Access connectors."
        },
        "nextPageToken": {
          "type": "string",
          "description": "Continuation token."
        }
      },
      "$id": "#/definitions/vpcaccess:v1:ListConnectorsResponse"
    },
    "vpcaccess:v1:Status": {
      "properties": {
        "message": {
          "type": "string",
          "description": "A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client."
        },
        "code": {
          "description": "The status code, which should be an enum value of google.rpc.Code.",
          "format": "int32",
          "type": "integer"
        },
        "details": {
          "description": "A list of messages that carry the error details. There is a common set of message types for APIs to use.",
          "type": "array",
          "items": {
            "additionalProperties": {
              "description": "Properties of the object. Contains field @type with type URL.",
              "type": "object"
            },
            "type": "object"
          }
        }
      },
      "description": "The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).",
      "type": "object",
      "$id": "#/definitions/vpcaccess:v1:Status"
    },
    "vpcaccess:v1:Location": {
      "type": "object",
      "description": "A resource that represents a Google Cloud location.",
      "properties": {
        "locationId": {
          "type": "string",
          "description": "The canonical id for this location. For example: `\"us-east1\"`."
        },
        "displayName": {
          "type": "string",
          "description": "The friendly name for this location, typically a nearby city name. For example, \"Tokyo\"."
        },
        "metadata": {
          "type": "object",
          "description": "Service-specific metadata. For example the available capacity at the given location.",
          "additionalProperties": {
            "description": "Properties of the object. Contains field @type with type URL.",
            "type": "object"
          }
        },
        "labels": {
          "type": "object",
          "description": "Cross-service attributes for the location. For example {\"cloud.googleapis.com/region\": \"us-east1\"}",
          "additionalProperties": {
            "type": "string"
          }
        },
        "name": {
          "type": "string",
          "description": "Resource name for the location, which may vary between implementations. For example: `\"projects/example-project/locations/us-east1\"`"
        }
      },
      "$id": "#/definitions/vpcaccess:v1:Location"
    },
    "cloudtasks:v2:Task": {
      "description": "A unit of scheduled work.",
      "type": "object",
      "properties": {
        "dispatchDeadline": {
          "type": "string",
          "format": "duration",
          "description": "The deadline for requests sent to the worker. If the worker does not respond by this deadline then the request is cancelled and the attempt is marked as a `DEADLINE_EXCEEDED` failure. Cloud Tasks will retry the task according to the RetryConfig. Note that when the request is cancelled, Cloud Tasks will stop listening for the response, but whether the worker stops processing depends on the worker. For example, if the worker is stuck, it may not react to cancelled requests. The default and maximum values depend on the type of request: * For HTTP tasks, the default is 10 minutes. The deadline must be in the interval [15 seconds, 30 minutes]. * For App Engine tasks, 0 indicates that the request has the default deadline. The default deadline depends on the [scaling type](https://cloud.google.com/appengine/docs/standard/go/how-instances-are-managed#instance_scaling) of the service: 10 minutes for standard apps with automatic scaling, 24 hours for standard apps with manual and basic scaling, and 60 minutes for flex apps. If the request deadline is set, it must be in the interval [15 seconds, 24 hours 15 seconds]. Regardless of the task's `dispatch_deadline`, the app handler will not run for longer than than the service's timeout. We recommend setting the `dispatch_deadline` to at most a few seconds more than the app handler's timeout. For more information see [Timeouts](https://cloud.google.com/tasks/docs/creating-appengine-handlers#timeouts). `dispatch_deadline` will be truncated to the nearest millisecond. The deadline is an approximate deadline."
        },
        "view": {
          "enum": [
            "VIEW_UNSPECIFIED",
            "BASIC",
            "FULL"
          ],
          "description": "Output only. The view specifies which subset of the Task has been returned.",
          "type": "string"
        },
        "dispatchCount": {
          "description": "Output only. The number of attempts dispatched. This count includes attempts which have been dispatched but haven't received a response.",
          "type": "integer",
          "format": "int32"
        },
        "lastAttempt": {
          "description": "Output only. The status of the task's last attempt.",
          "$ref": "#/definitions/cloudtasks:v2:Attempt"
        },
        "scheduleTime": {
          "description": "The time when the task is scheduled to be attempted or retried. `schedule_time` will be truncated to the nearest microsecond.",
          "type": "string",
          "format": "date-time"
        },
        "responseCount": {
          "type": "integer",
          "description": "Output only. The number of attempts which have received a response.",
          "format": "int32"
        },
        "name": {
          "type": "string",
          "description": "Optionally caller-specified in CreateTask. The task name. The task name must have the following format: `projects/PROJECT_ID/locations/LOCATION_ID/queues/QUEUE_ID/tasks/TASK_ID` * `PROJECT_ID` can contain letters ([A-Za-z]), numbers ([0-9]), hyphens (-), colons (:), or periods (.). For more information, see [Identifying projects](https://cloud.google.com/resource-manager/docs/creating-managing-projects#identifying_projects) * `LOCATION_ID` is the canonical ID for the task's location. The list of available locations can be obtained by calling ListLocations. For more information, see https://cloud.google.com/about/locations/. * `QUEUE_ID` can contain letters ([A-Za-z]), numbers ([0-9]), or hyphens (-). The maximum length is 100 characters. * `TASK_ID` can contain only letters ([A-Za-z]), numbers ([0-9]), hyphens (-), or underscores (_). The maximum length is 500 characters."
        },
        "httpRequest": {
          "description": "HTTP request that is sent to the worker. An HTTP task is a task that has HttpRequest set.",
          "$ref": "#/definitions/cloudtasks:v2:HttpRequest"
        },
        "appEngineHttpRequest": {
          "$ref": "#/definitions/cloudtasks:v2:AppEngineHttpRequest",
          "description": "HTTP request that is sent to the App Engine app handler. An App Engine task is a task that has AppEngineHttpRequest set."
        },
        "firstAttempt": {
          "description": "Output only. The status of the task's first attempt. Only dispatch_time will be set. The other Attempt information is not retained by Cloud Tasks.",
          "$ref": "#/definitions/cloudtasks:v2:Attempt"
        },
        "createTime": {
          "type": "string",
          "format": "date-time",
          "description": "Output only. The time that the task was created. `create_time` will be truncated to the nearest second."
        }
      },
      "$id": "#/definitions/cloudtasks:v2:Task"
    },
    "cloudtasks:v2:Expr": {
      "properties": {
        "location": {
          "type": "string",
          "description": "Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file."
        },
        "description": {
          "description": "Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.",
          "type": "string"
        },
        "expression": {
          "description": "Textual representation of an expression in Common Expression Language syntax.",
          "type": "string"
        },
        "title": {
          "type": "string",
          "description": "Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression."
        }
      },
      "description": "Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: \"Summary size limit\" description: \"Determines if a summary is less than 100 chars\" expression: \"document.summary.size() < 100\" Example (Equality): title: \"Requestor is owner\" description: \"Determines if requestor is the document owner\" expression: \"document.owner == request.auth.claims.email\" Example (Logic): title: \"Public documents\" description: \"Determine whether the document should be publicly visible\" expression: \"document.type != 'private' && document.type != 'internal'\" Example (Data Manipulation): title: \"Notification string\" description: \"Create a notification string with a timestamp.\" expression: \"'New message received at ' + string(document.create_time)\" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information.",
      "type": "object",
      "$id": "#/definitions/cloudtasks:v2:Expr"
    },
    "cloudtasks:v2:GetIamPolicyRequest": {
      "description": "Request message for `GetIamPolicy` method.",
      "properties": {
        "options": {
          "$ref": "#/definitions/cloudtasks:v2:GetPolicyOptions",
          "description": "OPTIONAL: A `GetPolicyOptions` object for specifying options to `GetIamPolicy`."
        }
      },
      "type": "object",
      "$id": "#/definitions/cloudtasks:v2:GetIamPolicyRequest"
    },
    "cloudtasks:v2:RetryConfig": {
      "type": "object",
      "description": "Retry config. These settings determine when a failed task attempt is retried.",
      "properties": {
        "maxDoublings": {
          "format": "int32",
          "type": "integer",
          "description": "The time between retries will double `max_doublings` times. A task's retry interval starts at min_backoff, then doubles `max_doublings` times, then increases linearly, and finally retries at intervals of max_backoff up to max_attempts times. For example, if min_backoff is 10s, max_backoff is 300s, and `max_doublings` is 3, then the a task will first be retried in 10s. The retry interval will double three times, and then increase linearly by 2^3 * 10s. Finally, the task will retry at intervals of max_backoff until the task has been attempted max_attempts times. Thus, the requests will retry at 10s, 20s, 40s, 80s, 160s, 240s, 300s, 300s, .... If unspecified when the queue is created, Cloud Tasks will pick the default. This field has the same meaning as [max_doublings in queue.yaml/xml](https://cloud.google.com/appengine/docs/standard/python/config/queueref#retry_parameters)."
        },
        "minBackoff": {
          "type": "string",
          "description": "A task will be scheduled for retry between min_backoff and max_backoff duration after it fails, if the queue's RetryConfig specifies that the task should be retried. If unspecified when the queue is created, Cloud Tasks will pick the default. `min_backoff` will be truncated to the nearest second. This field has the same meaning as [min_backoff_seconds in queue.yaml/xml](https://cloud.google.com/appengine/docs/standard/python/config/queueref#retry_parameters).",
          "format": "duration"
        },
        "maxBackoff": {
          "type": "string",
          "format": "duration",
          "description": "A task will be scheduled for retry between min_backoff and max_backoff duration after it fails, if the queue's RetryConfig specifies that the task should be retried. If unspecified when the queue is created, Cloud Tasks will pick the default. `max_backoff` will be truncated to the nearest second. This field has the same meaning as [max_backoff_seconds in queue.yaml/xml](https://cloud.google.com/appengine/docs/standard/python/config/queueref#retry_parameters)."
        },
        "maxAttempts": {
          "description": "Number of attempts per task. Cloud Tasks will attempt the task `max_attempts` times (that is, if the first attempt fails, then there will be `max_attempts - 1` retries). Must be >= -1. If unspecified when the queue is created, Cloud Tasks will pick the default. -1 indicates unlimited attempts. This field has the same meaning as [task_retry_limit in queue.yaml/xml](https://cloud.google.com/appengine/docs/standard/python/config/queueref#retry_parameters).",
          "type": "integer",
          "format": "int32"
        },
        "maxRetryDuration": {
          "description": "If positive, `max_retry_duration` specifies the time limit for retrying a failed task, measured from when the task was first attempted. Once `max_retry_duration` time has passed *and* the task has been attempted max_attempts times, no further attempts will be made and the task will be deleted. If zero, then the task age is unlimited. If unspecified when the queue is created, Cloud Tasks will pick the default. `max_retry_duration` will be truncated to the nearest second. This field has the same meaning as [task_age_limit in queue.yaml/xml](https://cloud.google.com/appengine/docs/standard/python/config/queueref#retry_parameters).",
          "type": "string",
          "format": "duration"
        }
      },
      "$id": "#/definitions/cloudtasks:v2:RetryConfig"
    },
    "cloudtasks:v2:Status": {
      "properties": {
        "code": {
          "type": "integer",
          "description": "The status code, which should be an enum value of google.rpc.Code.",
          "format": "int32"
        },
        "details": {
          "type": "array",
          "description": "A list of messages that carry the error details. There is a common set of message types for APIs to use.",
          "items": {
            "additionalProperties": {
              "type": "object",
              "description": "Properties of the object. Contains field @type with type URL."
            },
            "type": "object"
          }
        },
        "message": {
          "description": "A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client.",
          "type": "string"
        }
      },
      "type": "object",
      "description": "The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).",
      "$id": "#/definitions/cloudtasks:v2:Status"
    },
    "cloudtasks:v2:ListLocationsResponse": {
      "properties": {
        "locations": {
          "description": "A list of locations that matches the specified filter in the request.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/cloudtasks:v2:Location"
          }
        },
        "nextPageToken": {
          "type": "string",
          "description": "The standard List next-page token."
        }
      },
      "description": "The response message for Locations.ListLocations.",
      "type": "object",
      "$id": "#/definitions/cloudtasks:v2:ListLocationsResponse"
    },
    "cloudtasks:v2:SetIamPolicyRequest": {
      "type": "object",
      "properties": {
        "policy": {
          "$ref": "#/definitions/cloudtasks:v2:Policy",
          "description": "REQUIRED: The complete policy to be applied to the `resource`. The size of the policy is limited to a few 10s of KB. An empty policy is a valid policy but certain Google Cloud services (such as Projects) might reject them."
        }
      },
      "description": "Request message for `SetIamPolicy` method.",
      "$id": "#/definitions/cloudtasks:v2:SetIamPolicyRequest"
    },
    "cloudtasks:v2:TestIamPermissionsRequest": {
      "description": "Request message for `TestIamPermissions` method.",
      "properties": {
        "permissions": {
          "description": "The set of permissions to check for the `resource`. Permissions with wildcards (such as `*` or `storage.*`) are not allowed. For more information see [IAM Overview](https://cloud.google.com/iam/docs/overview#permissions).",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "type": "object",
      "$id": "#/definitions/cloudtasks:v2:TestIamPermissionsRequest"
    },
    "cloudtasks:v2:CreateTaskRequest": {
      "type": "object",
      "properties": {
        "task": {
          "description": "Required. The task to add. Task names have the following format: `projects/PROJECT_ID/locations/LOCATION_ID/queues/QUEUE_ID/tasks/TASK_ID`. The user can optionally specify a task name. If a name is not specified then the system will generate a random unique task id, which will be set in the task returned in the response. If schedule_time is not set or is in the past then Cloud Tasks will set it to the current time. Task De-duplication: Explicitly specifying a task ID enables task de-duplication. If a task's ID is identical to that of an existing task or a task that was deleted or executed recently then the call will fail with ALREADY_EXISTS. If the task's queue was created using Cloud Tasks, then another task with the same name can't be created for ~1hour after the original task was deleted or executed. If the task's queue was created using queue.yaml or queue.xml, then another task with the same name can't be created for ~9days after the original task was deleted or executed. Because there is an extra lookup cost to identify duplicate task names, these CreateTask calls have significantly increased latency. Using hashed strings for the task id or for the prefix of the task id is recommended. Choosing task ids that are sequential or have sequential prefixes, for example using a timestamp, causes an increase in latency and error rates in all task commands. The infrastructure relies on an approximately uniform distribution of task ids to store and serve tasks efficiently.",
          "$ref": "#/definitions/cloudtasks:v2:Task"
        },
        "responseView": {
          "type": "string",
          "enum": [
            "VIEW_UNSPECIFIED",
            "BASIC",
            "FULL"
          ],
          "description": "The response_view specifies which subset of the Task will be returned. By default response_view is BASIC; not all information is retrieved by default because some data, such as payloads, might be desirable to return only when needed because of its large size or because of the sensitivity of data that it contains. Authorization for FULL requires `cloudtasks.tasks.fullView` [Google IAM](https://cloud.google.com/iam/) permission on the Task resource."
        }
      },
      "description": "Request message for CreateTask.",
      "$id": "#/definitions/cloudtasks:v2:CreateTaskRequest"
    },
    "cloudtasks:v2:HttpRequest": {
      "properties": {
        "httpMethod": {
          "description": "The HTTP method to use for the request. The default is POST.",
          "enum": [
            "HTTP_METHOD_UNSPECIFIED",
            "POST",
            "GET",
            "HEAD",
            "PUT",
            "DELETE",
            "PATCH",
            "OPTIONS"
          ],
          "type": "string"
        },
        "headers": {
          "type": "object",
          "description": "HTTP request headers. This map contains the header field names and values. Headers can be set when the task is created. These headers represent a subset of the headers that will accompany the task's HTTP request. Some HTTP request headers will be ignored or replaced. A partial list of headers that will be ignored or replaced is: * Host: This will be computed by Cloud Tasks and derived from HttpRequest.url. * Content-Length: This will be computed by Cloud Tasks. * User-Agent: This will be set to `\"Google-Cloud-Tasks\"`. * `X-Google-*`: Google use only. * `X-AppEngine-*`: Google use only. `Content-Type` won't be set by Cloud Tasks. You can explicitly set `Content-Type` to a media type when the task is created. For example, `Content-Type` can be set to `\"application/octet-stream\"` or `\"application/json\"`. Headers which can have multiple values (according to RFC2616) can be specified using comma-separated values. The size of the headers must be less than 80KB.",
          "additionalProperties": {
            "type": "string"
          }
        },
        "body": {
          "format": "byte",
          "description": "HTTP request body. A request body is allowed only if the HTTP method is POST, PUT, or PATCH. It is an error to set body on a task with an incompatible HttpMethod.",
          "type": "string"
        },
        "oidcToken": {
          "$ref": "#/definitions/cloudtasks:v2:OidcToken",
          "description": "If specified, an [OIDC](https://developers.google.com/identity/protocols/OpenIDConnect) token will be generated and attached as an `Authorization` header in the HTTP request. This type of authorization can be used for many scenarios, including calling Cloud Run, or endpoints where you intend to validate the token yourself."
        },
        "url": {
          "description": "Required. The full url path that the request will be sent to. This string must begin with either \"http://\" or \"https://\". Some examples are: `http://acme.com` and `https://acme.com/sales:8080`. Cloud Tasks will encode some characters for safety and compatibility. The maximum allowed URL length is 2083 characters after encoding. The `Location` header response from a redirect response [`300` - `399`] may be followed. The redirect is not counted as a separate attempt.",
          "type": "string"
        },
        "oauthToken": {
          "description": "If specified, an [OAuth token](https://developers.google.com/identity/protocols/OAuth2) will be generated and attached as an `Authorization` header in the HTTP request. This type of authorization should generally only be used when calling Google APIs hosted on *.googleapis.com.",
          "$ref": "#/definitions/cloudtasks:v2:OAuthToken"
        }
      },
      "description": "HTTP request. The task will be pushed to the worker as an HTTP request. If the worker or the redirected worker acknowledges the task by returning a successful HTTP response code ([`200` - `299`]), the task will be removed from the queue. If any other HTTP response code is returned or no response is received, the task will be retried according to the following: * User-specified throttling: retry configuration, rate limits, and the queue's state. * System throttling: To prevent the worker from overloading, Cloud Tasks may temporarily reduce the queue's effective rate. User-specified settings will not be changed. System throttling happens because: * Cloud Tasks backs off on all errors. Normally the backoff specified in rate limits will be used. But if the worker returns `429` (Too Many Requests), `503` (Service Unavailable), or the rate of errors is high, Cloud Tasks will use a higher backoff rate. The retry specified in the `Retry-After` HTTP response header is considered. * To prevent traffic spikes and to smooth sudden increases in traffic, dispatches ramp up slowly when the queue is newly created or idle and if large numbers of tasks suddenly become available to dispatch (due to spikes in create task rates, the queue being unpaused, or many tasks that are scheduled at the same time).",
      "type": "object",
      "$id": "#/definitions/cloudtasks:v2:HttpRequest"
    },
    "cloudtasks:v2:AppEngineRouting": {
      "description": "App Engine Routing. Defines routing characteristics specific to App Engine - service, version, and instance. For more information about services, versions, and instances see [An Overview of App Engine](https://cloud.google.com/appengine/docs/python/an-overview-of-app-engine), [Microservices Architecture on Google App Engine](https://cloud.google.com/appengine/docs/python/microservices-on-app-engine), [App Engine Standard request routing](https://cloud.google.com/appengine/docs/standard/python/how-requests-are-routed), and [App Engine Flex request routing](https://cloud.google.com/appengine/docs/flexible/python/how-requests-are-routed). Using AppEngineRouting requires [`appengine.applications.get`](https://cloud.google.com/appengine/docs/admin-api/access-control) Google IAM permission for the project and the following scope: `https://www.googleapis.com/auth/cloud-platform`",
      "properties": {
        "host": {
          "type": "string",
          "description": "Output only. The host that the task is sent to. The host is constructed from the domain name of the app associated with the queue's project ID (for example .appspot.com), and the service, version, and instance. Tasks which were created using the App Engine SDK might have a custom domain name. For more information, see [How Requests are Routed](https://cloud.google.com/appengine/docs/standard/python/how-requests-are-routed)."
        },
        "instance": {
          "description": "App instance. By default, the task is sent to an instance which is available when the task is attempted. Requests can only be sent to a specific instance if [manual scaling is used in App Engine Standard](https://cloud.google.com/appengine/docs/python/an-overview-of-app-engine?hl=en_US#scaling_types_and_instance_classes). App Engine Flex does not support instances. For more information, see [App Engine Standard request routing](https://cloud.google.com/appengine/docs/standard/python/how-requests-are-routed) and [App Engine Flex request routing](https://cloud.google.com/appengine/docs/flexible/python/how-requests-are-routed).",
          "type": "string"
        },
        "service": {
          "description": "App service. By default, the task is sent to the service which is the default service when the task is attempted. For some queues or tasks which were created using the App Engine Task Queue API, host is not parsable into service, version, and instance. For example, some tasks which were created using the App Engine SDK use a custom domain name; custom domains are not parsed by Cloud Tasks. If host is not parsable, then service, version, and instance are the empty string.",
          "type": "string"
        },
        "version": {
          "type": "string",
          "description": "App version. By default, the task is sent to the version which is the default version when the task is attempted. For some queues or tasks which were created using the App Engine Task Queue API, host is not parsable into service, version, and instance. For example, some tasks which were created using the App Engine SDK use a custom domain name; custom domains are not parsed by Cloud Tasks. If host is not parsable, then service, version, and instance are the empty string."
        }
      },
      "type": "object",
      "$id": "#/definitions/cloudtasks:v2:AppEngineRouting"
    },
    "cloudtasks:v2:Empty": {
      "description": "A generic empty message that you can re-use to avoid defining duplicated empty messages in your APIs. A typical example is to use it as the request or the response type of an API method. For instance: service Foo { rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty); }",
      "type": "object",
      "properties": {},
      "$id": "#/definitions/cloudtasks:v2:Empty"
    },
    "cloudtasks:v2:AppEngineHttpRequest": {
      "properties": {
        "httpMethod": {
          "type": "string",
          "description": "The HTTP method to use for the request. The default is POST. The app's request handler for the task's target URL must be able to handle HTTP requests with this http_method, otherwise the task attempt fails with error code 405 (Method Not Allowed). See [Writing a push task request handler](https://cloud.google.com/appengine/docs/java/taskqueue/push/creating-handlers#writing_a_push_task_request_handler) and the App Engine documentation for your runtime on [How Requests are Handled](https://cloud.google.com/appengine/docs/standard/python3/how-requests-are-handled).",
          "enum": [
            "HTTP_METHOD_UNSPECIFIED",
            "POST",
            "GET",
            "HEAD",
            "PUT",
            "DELETE",
            "PATCH",
            "OPTIONS"
          ]
        },
        "headers": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "HTTP request headers. This map contains the header field names and values. Headers can be set when the task is created. Repeated headers are not supported but a header value can contain commas. Cloud Tasks sets some headers to default values: * `User-Agent`: By default, this header is `\"AppEngine-Google; (+http://code.google.com/appengine)\"`. This header can be modified, but Cloud Tasks will append `\"AppEngine-Google; (+http://code.google.com/appengine)\"` to the modified `User-Agent`. If the task has a body, Cloud Tasks sets the following headers: * `Content-Type`: By default, the `Content-Type` header is set to `\"application/octet-stream\"`. The default can be overridden by explicitly setting `Content-Type` to a particular media type when the task is created. For example, `Content-Type` can be set to `\"application/json\"`. * `Content-Length`: This is computed by Cloud Tasks. This value is output only. It cannot be changed. The headers below cannot be set or overridden: * `Host` * `X-Google-*` * `X-AppEngine-*` In addition, Cloud Tasks sets some headers when the task is dispatched, such as headers containing information about the task; see [request headers](https://cloud.google.com/tasks/docs/creating-appengine-handlers#reading_request_headers). These headers are set only when the task is dispatched, so they are not visible when the task is returned in a Cloud Tasks response. Although there is no specific limit for the maximum number of headers or the size, there is a limit on the maximum size of the Task. For more information, see the CreateTask documentation.",
          "type": "object"
        },
        "body": {
          "type": "string",
          "format": "byte",
          "description": "HTTP request body. A request body is allowed only if the HTTP method is POST or PUT. It is an error to set a body on a task with an incompatible HttpMethod."
        },
        "appEngineRouting": {
          "description": "Task-level setting for App Engine routing. * If app_engine_routing_override is set on the queue, this value is used for all tasks in the queue, no matter what the setting is for the task-level app_engine_routing.",
          "$ref": "#/definitions/cloudtasks:v2:AppEngineRouting"
        },
        "relativeUri": {
          "type": "string",
          "description": "The relative URI. The relative URI must begin with \"/\" and must be a valid HTTP relative URI. It can contain a path and query string arguments. If the relative URI is empty, then the root path \"/\" will be used. No spaces are allowed, and the maximum length allowed is 2083 characters."
        }
      },
      "type": "object",
      "description": "App Engine HTTP request. The message defines the HTTP request that is sent to an App Engine app when the task is dispatched. Using AppEngineHttpRequest requires [`appengine.applications.get`](https://cloud.google.com/appengine/docs/admin-api/access-control) Google IAM permission for the project and the following scope: `https://www.googleapis.com/auth/cloud-platform` The task will be delivered to the App Engine app which belongs to the same project as the queue. For more information, see [How Requests are Routed](https://cloud.google.com/appengine/docs/standard/python/how-requests-are-routed) and how routing is affected by [dispatch files](https://cloud.google.com/appengine/docs/python/config/dispatchref). Traffic is encrypted during transport and never leaves Google datacenters. Because this traffic is carried over a communication mechanism internal to Google, you cannot explicitly set the protocol (for example, HTTP or HTTPS). The request to the handler, however, will appear to have used the HTTP protocol. The AppEngineRouting used to construct the URL that the task is delivered to can be set at the queue-level or task-level: * If app_engine_routing_override is set on the queue, this value is used for all tasks in the queue, no matter what the setting is for the task-level app_engine_routing. The `url` that the task will be sent to is: * `url =` host `+` relative_uri Tasks can be dispatched to secure app handlers, unsecure app handlers, and URIs restricted with [`login: admin`](https://cloud.google.com/appengine/docs/standard/python/config/appref). Because tasks are not run as any user, they cannot be dispatched to URIs restricted with [`login: required`](https://cloud.google.com/appengine/docs/standard/python/config/appref) Task dispatches also do not follow redirects. The task attempt has succeeded if the app's request handler returns an HTTP response code in the range [`200` - `299`]. The task attempt has failed if the app's handler returns a non-2xx response code or Cloud Tasks does not receive response before the deadline. Failed tasks will be retried according to the retry configuration. `503` (Service Unavailable) is considered an App Engine system error instead of an application error and will cause Cloud Tasks' traffic congestion control to temporarily throttle the queue's dispatches. Unlike other types of task targets, a `429` (Too Many Requests) response from an app handler does not cause traffic congestion control to throttle the queue.",
      "$id": "#/definitions/cloudtasks:v2:AppEngineHttpRequest"
    },
    "cloudtasks:v2:PurgeQueueRequest": {
      "description": "Request message for PurgeQueue.",
      "properties": {},
      "type": "object",
      "$id": "#/definitions/cloudtasks:v2:PurgeQueueRequest"
    },
    "cloudtasks:v2:Attempt": {
      "properties": {
        "responseStatus": {
          "description": "Output only. The response from the worker for this attempt. If `response_time` is unset, then the task has not been attempted or is currently running and the `response_status` field is meaningless.",
          "$ref": "#/definitions/cloudtasks:v2:Status"
        },
        "scheduleTime": {
          "type": "string",
          "description": "Output only. The time that this attempt was scheduled. `schedule_time` will be truncated to the nearest microsecond.",
          "format": "date-time"
        },
        "responseTime": {
          "format": "date-time",
          "description": "Output only. The time that this attempt response was received. `response_time` will be truncated to the nearest microsecond.",
          "type": "string"
        },
        "dispatchTime": {
          "description": "Output only. The time that this attempt was dispatched. `dispatch_time` will be truncated to the nearest microsecond.",
          "type": "string",
          "format": "date-time"
        }
      },
      "description": "The status of a task attempt.",
      "type": "object",
      "$id": "#/definitions/cloudtasks:v2:Attempt"
    },
    "cloudtasks:v2:StackdriverLoggingConfig": {
      "properties": {
        "samplingRatio": {
          "description": "Specifies the fraction of operations to write to [Stackdriver Logging](https://cloud.google.com/logging/docs/). This field may contain any value between 0.0 and 1.0, inclusive. 0.0 is the default and means that no operations are logged.",
          "type": "number",
          "format": "double"
        }
      },
      "description": "Configuration options for writing logs to [Stackdriver Logging](https://cloud.google.com/logging/docs/).",
      "type": "object",
      "$id": "#/definitions/cloudtasks:v2:StackdriverLoggingConfig"
    },
    "cloudtasks:v2:TestIamPermissionsResponse": {
      "properties": {
        "permissions": {
          "type": "array",
          "description": "A subset of `TestPermissionsRequest.permissions` that the caller is allowed.",
          "items": {
            "type": "string"
          }
        }
      },
      "description": "Response message for `TestIamPermissions` method.",
      "type": "object",
      "$id": "#/definitions/cloudtasks:v2:TestIamPermissionsResponse"
    },
    "cloudtasks:v2:Binding": {
      "properties": {
        "condition": {
          "$ref": "#/definitions/cloudtasks:v2:Expr",
          "description": "The condition that is associated with this binding. If the condition evaluates to `true`, then this binding applies to the current request. If the condition evaluates to `false`, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the principals in this binding. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies)."
        },
        "role": {
          "description": "Role that is assigned to the list of `members`, or principals. For example, `roles/viewer`, `roles/editor`, or `roles/owner`.",
          "type": "string"
        },
        "members": {
          "description": "Specifies the principals requesting access for a Google Cloud resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. Does not include identities that come from external identity providers (IdPs) through identity federation. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a Google service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `serviceAccount:{projectid}.svc.id.goog[{namespace}/{kubernetes-sa}]`: An identifier for a [Kubernetes service account](https://cloud.google.com/kubernetes-engine/docs/how-to/kubernetes-service-accounts). For example, `my-project.svc.id.goog[my-namespace/my-kubernetes-sa]`. * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding.",
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "description": "Associates `members`, or principals, with a `role`.",
      "type": "object",
      "$id": "#/definitions/cloudtasks:v2:Binding"
    },
    "cloudtasks:v2:OidcToken": {
      "type": "object",
      "description": "Contains information needed for generating an [OpenID Connect token](https://developers.google.com/identity/protocols/OpenIDConnect). This type of authorization can be used for many scenarios, including calling Cloud Run, or endpoints where you intend to validate the token yourself.",
      "properties": {
        "audience": {
          "description": "Audience to be used when generating OIDC token. If not specified, the URI specified in target will be used.",
          "type": "string"
        },
        "serviceAccountEmail": {
          "description": "[Service account email](https://cloud.google.com/iam/docs/service-accounts) to be used for generating OIDC token. The service account must be within the same project as the queue. The caller must have iam.serviceAccounts.actAs permission for the service account.",
          "type": "string"
        }
      },
      "$id": "#/definitions/cloudtasks:v2:OidcToken"
    },
    "cloudtasks:v2:ResumeQueueRequest": {
      "type": "object",
      "description": "Request message for ResumeQueue.",
      "properties": {},
      "$id": "#/definitions/cloudtasks:v2:ResumeQueueRequest"
    },
    "cloudtasks:v2:RateLimits": {
      "type": "object",
      "properties": {
        "maxBurstSize": {
          "description": "Output only. The max burst size. Max burst size limits how fast tasks in queue are processed when many tasks are in the queue and the rate is high. This field allows the queue to have a high rate so processing starts shortly after a task is enqueued, but still limits resource usage when many tasks are enqueued in a short period of time. The [token bucket](https://wikipedia.org/wiki/Token_Bucket) algorithm is used to control the rate of task dispatches. Each queue has a token bucket that holds tokens, up to the maximum specified by `max_burst_size`. Each time a task is dispatched, a token is removed from the bucket. Tasks will be dispatched until the queue's bucket runs out of tokens. The bucket will be continuously refilled with new tokens based on max_dispatches_per_second. Cloud Tasks will pick the value of `max_burst_size` based on the value of max_dispatches_per_second. For queues that were created or updated using `queue.yaml/xml`, `max_burst_size` is equal to [bucket_size](https://cloud.google.com/appengine/docs/standard/python/config/queueref#bucket_size). Since `max_burst_size` is output only, if UpdateQueue is called on a queue created by `queue.yaml/xml`, `max_burst_size` will be reset based on the value of max_dispatches_per_second, regardless of whether max_dispatches_per_second is updated. ",
          "format": "int32",
          "type": "integer"
        },
        "maxDispatchesPerSecond": {
          "description": "The maximum rate at which tasks are dispatched from this queue. If unspecified when the queue is created, Cloud Tasks will pick the default. * The maximum allowed value is 500. This field has the same meaning as [rate in queue.yaml/xml](https://cloud.google.com/appengine/docs/standard/python/config/queueref#rate).",
          "format": "double",
          "type": "number"
        },
        "maxConcurrentDispatches": {
          "description": "The maximum number of concurrent tasks that Cloud Tasks allows to be dispatched for this queue. After this threshold has been reached, Cloud Tasks stops dispatching tasks until the number of concurrent requests decreases. If unspecified when the queue is created, Cloud Tasks will pick the default. The maximum allowed value is 5,000. This field has the same meaning as [max_concurrent_requests in queue.yaml/xml](https://cloud.google.com/appengine/docs/standard/python/config/queueref#max_concurrent_requests).",
          "type": "integer",
          "format": "int32"
        }
      },
      "description": "Rate limits. This message determines the maximum rate that tasks can be dispatched by a queue, regardless of whether the dispatch is a first task attempt or a retry. Note: The debugging command, RunTask, will run a task even if the queue has reached its RateLimits.",
      "$id": "#/definitions/cloudtasks:v2:RateLimits"
    },
    "cloudtasks:v2:Policy": {
      "properties": {
        "version": {
          "format": "int32",
          "type": "integer",
          "description": "Specifies the format of the policy. Valid values are `0`, `1`, and `3`. Requests that specify an invalid value are rejected. Any operation that affects conditional role bindings must specify version `3`. This requirement applies to the following operations: * Getting a policy that includes a conditional role binding * Adding a conditional role binding to a policy * Changing a conditional role binding in a policy * Removing any role binding, with or without a condition, from a policy that includes conditions **Important:** If you use IAM Conditions, you must include the `etag` field whenever you call `setIamPolicy`. If you omit this field, then IAM allows you to overwrite a version `3` policy with a version `1` policy, and all of the conditions in the version `3` policy are lost. If a policy does not include any conditions, operations on that policy may specify any valid version or leave the field unset. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies)."
        },
        "etag": {
          "type": "string",
          "description": "`etag` is used for optimistic concurrency control as a way to help prevent simultaneous updates of a policy from overwriting each other. It is strongly suggested that systems make use of the `etag` in the read-modify-write cycle to perform policy updates in order to avoid race conditions: An `etag` is returned in the response to `getIamPolicy`, and systems are expected to put that etag in the request to `setIamPolicy` to ensure that their change will be applied to the same version of the policy. **Important:** If you use IAM Conditions, you must include the `etag` field whenever you call `setIamPolicy`. If you omit this field, then IAM allows you to overwrite a version `3` policy with a version `1` policy, and all of the conditions in the version `3` policy are lost.",
          "format": "byte"
        },
        "bindings": {
          "items": {
            "$ref": "#/definitions/cloudtasks:v2:Binding"
          },
          "description": "Associates a list of `members`, or principals, with a `role`. Optionally, may specify a `condition` that determines how and when the `bindings` are applied. Each of the `bindings` must contain at least one principal. The `bindings` in a `Policy` can refer to up to 1,500 principals; up to 250 of these principals can be Google groups. Each occurrence of a principal counts towards these limits. For example, if the `bindings` grant 50 different roles to `user:alice@example.com`, and not to any other principal, then you can add another 1,450 principals to the `bindings` in the `Policy`.",
          "type": "array"
        }
      },
      "type": "object",
      "description": "An Identity and Access Management (IAM) policy, which specifies access controls for Google Cloud resources. A `Policy` is a collection of `bindings`. A `binding` binds one or more `members`, or principals, to a single `role`. Principals can be user accounts, service accounts, Google groups, and domains (such as G Suite). A `role` is a named list of permissions; each `role` can be an IAM predefined role or a user-created custom role. For some types of Google Cloud resources, a `binding` can also specify a `condition`, which is a logical expression that allows access to a resource only if the expression evaluates to `true`. A condition can add constraints based on attributes of the request, the resource, or both. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies). **JSON example:** { \"bindings\": [ { \"role\": \"roles/resourcemanager.organizationAdmin\", \"members\": [ \"user:mike@example.com\", \"group:admins@example.com\", \"domain:google.com\", \"serviceAccount:my-project-id@appspot.gserviceaccount.com\" ] }, { \"role\": \"roles/resourcemanager.organizationViewer\", \"members\": [ \"user:eve@example.com\" ], \"condition\": { \"title\": \"expirable access\", \"description\": \"Does not grant access after Sep 2020\", \"expression\": \"request.time < timestamp('2020-10-01T00:00:00.000Z')\", } } ], \"etag\": \"BwWWja0YfJA=\", \"version\": 3 } **YAML example:** bindings: - members: - user:mike@example.com - group:admins@example.com - domain:google.com - serviceAccount:my-project-id@appspot.gserviceaccount.com role: roles/resourcemanager.organizationAdmin - members: - user:eve@example.com role: roles/resourcemanager.organizationViewer condition: title: expirable access description: Does not grant access after Sep 2020 expression: request.time < timestamp('2020-10-01T00:00:00.000Z') etag: BwWWja0YfJA= version: 3 For a description of IAM and its features, see the [IAM documentation](https://cloud.google.com/iam/docs/).",
      "$id": "#/definitions/cloudtasks:v2:Policy"
    },
    "cloudtasks:v2:GetPolicyOptions": {
      "type": "object",
      "description": "Encapsulates settings provided to GetIamPolicy.",
      "properties": {
        "requestedPolicyVersion": {
          "type": "integer",
          "format": "int32",
          "description": "Optional. The maximum policy version that will be used to format the policy. Valid values are 0, 1, and 3. Requests specifying an invalid value will be rejected. Requests for policies with any conditional role bindings must specify version 3. Policies with no conditional role bindings may specify any valid value or leave the field unset. The policy in the response might use the policy version that you specified, or it might use a lower policy version. For example, if you specify version 3, but the policy has no conditional role bindings, the response uses version 1. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies)."
        }
      },
      "$id": "#/definitions/cloudtasks:v2:GetPolicyOptions"
    },
    "cloudtasks:v2:OAuthToken": {
      "properties": {
        "scope": {
          "type": "string",
          "description": "OAuth scope to be used for generating OAuth access token. If not specified, \"https://www.googleapis.com/auth/cloud-platform\" will be used."
        },
        "serviceAccountEmail": {
          "description": "[Service account email](https://cloud.google.com/iam/docs/service-accounts) to be used for generating OAuth token. The service account must be within the same project as the queue. The caller must have iam.serviceAccounts.actAs permission for the service account.",
          "type": "string"
        }
      },
      "type": "object",
      "description": "Contains information needed for generating an [OAuth token](https://developers.google.com/identity/protocols/OAuth2). This type of authorization should generally only be used when calling Google APIs hosted on *.googleapis.com.",
      "$id": "#/definitions/cloudtasks:v2:OAuthToken"
    },
    "cloudtasks:v2:ListQueuesResponse": {
      "type": "object",
      "description": "Response message for ListQueues.",
      "properties": {
        "nextPageToken": {
          "type": "string",
          "description": "A token to retrieve next page of results. To return the next page of results, call ListQueues with this value as the page_token. If the next_page_token is empty, there are no more results. The page token is valid for only 2 hours."
        },
        "queues": {
          "type": "array",
          "description": "The list of queues.",
          "items": {
            "$ref": "#/definitions/cloudtasks:v2:Queue"
          }
        }
      },
      "$id": "#/definitions/cloudtasks:v2:ListQueuesResponse"
    },
    "cloudtasks:v2:ListTasksResponse": {
      "properties": {
        "tasks": {
          "description": "The list of tasks.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/cloudtasks:v2:Task"
          }
        },
        "nextPageToken": {
          "description": "A token to retrieve next page of results. To return the next page of results, call ListTasks with this value as the page_token. If the next_page_token is empty, there are no more results.",
          "type": "string"
        }
      },
      "type": "object",
      "description": "Response message for listing tasks using ListTasks.",
      "$id": "#/definitions/cloudtasks:v2:ListTasksResponse"
    },
    "cloudtasks:v2:PauseQueueRequest": {
      "properties": {},
      "description": "Request message for PauseQueue.",
      "type": "object",
      "$id": "#/definitions/cloudtasks:v2:PauseQueueRequest"
    },
    "cloudtasks:v2:Queue": {
      "type": "object",
      "properties": {
        "purgeTime": {
          "format": "date-time",
          "type": "string",
          "description": "Output only. The last time this queue was purged. All tasks that were created before this time were purged. A queue can be purged using PurgeQueue, the [App Engine Task Queue SDK, or the Cloud Console](https://cloud.google.com/appengine/docs/standard/python/taskqueue/push/deleting-tasks-and-queues#purging_all_tasks_from_a_queue). Purge time will be truncated to the nearest microsecond. Purge time will be unset if the queue has never been purged."
        },
        "name": {
          "type": "string",
          "description": "Caller-specified and required in CreateQueue, after which it becomes output only. The queue name. The queue name must have the following format: `projects/PROJECT_ID/locations/LOCATION_ID/queues/QUEUE_ID` * `PROJECT_ID` can contain letters ([A-Za-z]), numbers ([0-9]), hyphens (-), colons (:), or periods (.). For more information, see [Identifying projects](https://cloud.google.com/resource-manager/docs/creating-managing-projects#identifying_projects) * `LOCATION_ID` is the canonical ID for the queue's location. The list of available locations can be obtained by calling ListLocations. For more information, see https://cloud.google.com/about/locations/. * `QUEUE_ID` can contain letters ([A-Za-z]), numbers ([0-9]), or hyphens (-). The maximum length is 100 characters."
        },
        "retryConfig": {
          "$ref": "#/definitions/cloudtasks:v2:RetryConfig",
          "description": "Settings that determine the retry behavior. * For tasks created using Cloud Tasks: the queue-level retry settings apply to all tasks in the queue that were created using Cloud Tasks. Retry settings cannot be set on individual tasks. * For tasks created using the App Engine SDK: the queue-level retry settings apply to all tasks in the queue which do not have retry settings explicitly set on the task and were created by the App Engine SDK. See [App Engine documentation](https://cloud.google.com/appengine/docs/standard/python/taskqueue/push/retrying-tasks)."
        },
        "rateLimits": {
          "description": "Rate limits for task dispatches. rate_limits and retry_config are related because they both control task attempts. However they control task attempts in different ways: * rate_limits controls the total rate of dispatches from a queue (i.e. all traffic dispatched from the queue, regardless of whether the dispatch is from a first attempt or a retry). * retry_config controls what happens to particular a task after its first attempt fails. That is, retry_config controls task retries (the second attempt, third attempt, etc). The queue's actual dispatch rate is the result of: * Number of tasks in the queue * User-specified throttling: rate_limits, retry_config, and the queue's state. * System throttling due to `429` (Too Many Requests) or `503` (Service Unavailable) responses from the worker, high error rates, or to smooth sudden large traffic spikes.",
          "$ref": "#/definitions/cloudtasks:v2:RateLimits"
        },
        "appEngineRoutingOverride": {
          "$ref": "#/definitions/cloudtasks:v2:AppEngineRouting",
          "description": "Overrides for task-level app_engine_routing. These settings apply only to App Engine tasks in this queue. Http tasks are not affected. If set, `app_engine_routing_override` is used for all App Engine tasks in the queue, no matter what the setting is for the task-level app_engine_routing."
        },
        "stackdriverLoggingConfig": {
          "description": "Configuration options for writing logs to [Stackdriver Logging](https://cloud.google.com/logging/docs/). If this field is unset, then no logs are written.",
          "$ref": "#/definitions/cloudtasks:v2:StackdriverLoggingConfig"
        },
        "state": {
          "type": "string",
          "description": "Output only. The state of the queue. `state` can only be changed by calling PauseQueue, ResumeQueue, or uploading [queue.yaml/xml](https://cloud.google.com/appengine/docs/python/config/queueref). UpdateQueue cannot be used to change `state`.",
          "enum": [
            "STATE_UNSPECIFIED",
            "RUNNING",
            "PAUSED",
            "DISABLED"
          ]
        }
      },
      "description": "A queue is a container of related tasks. Queues are configured to manage how those tasks are dispatched. Configurable properties include rate limits, retry options, queue types, and others.",
      "$id": "#/definitions/cloudtasks:v2:Queue"
    },
    "cloudtasks:v2:RunTaskRequest": {
      "type": "object",
      "description": "Request message for forcing a task to run now using RunTask.",
      "properties": {
        "responseView": {
          "enum": [
            "VIEW_UNSPECIFIED",
            "BASIC",
            "FULL"
          ],
          "type": "string",
          "description": "The response_view specifies which subset of the Task will be returned. By default response_view is BASIC; not all information is retrieved by default because some data, such as payloads, might be desirable to return only when needed because of its large size or because of the sensitivity of data that it contains. Authorization for FULL requires `cloudtasks.tasks.fullView` [Google IAM](https://cloud.google.com/iam/) permission on the Task resource."
        }
      },
      "$id": "#/definitions/cloudtasks:v2:RunTaskRequest"
    },
    "cloudtasks:v2:Location": {
      "type": "object",
      "description": "A resource that represents a Google Cloud location.",
      "properties": {
        "displayName": {
          "description": "The friendly name for this location, typically a nearby city name. For example, \"Tokyo\".",
          "type": "string"
        },
        "metadata": {
          "type": "object",
          "additionalProperties": {
            "description": "Properties of the object. Contains field @type with type URL.",
            "type": "object"
          },
          "description": "Service-specific metadata. For example the available capacity at the given location."
        },
        "locationId": {
          "description": "The canonical id for this location. For example: `\"us-east1\"`.",
          "type": "string"
        },
        "name": {
          "description": "Resource name for the location, which may vary between implementations. For example: `\"projects/example-project/locations/us-east1\"`",
          "type": "string"
        },
        "labels": {
          "description": "Cross-service attributes for the location. For example {\"cloud.googleapis.com/region\": \"us-east1\"}",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      },
      "$id": "#/definitions/cloudtasks:v2:Location"
    }
  }
}